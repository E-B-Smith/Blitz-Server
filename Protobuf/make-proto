#!/bin/bash
set -euo pipefail
IFS=$'\n'
scriptpath="${BASH_SOURCE[0]}"
scriptpath=$(cd "$(dirname "${scriptpath}")" && pwd)
scriptname=$(basename "${BASH_SOURCE[0]}")
cd "$scriptpath"

echo ">>> Building proto files."

go install -v github.com/golang/protobuf/protoc-gen-go

mkdir -p Build/java
mkdir -p Build/obj-c
mkdir -p Build/golang

cd Source
protoc  google/protobuf/descriptor.proto \
    --java_out=../Build/java

shopt -s extglob
protoc !(objectivec-descriptor).proto \
    --go_out=../Build/golang  \
    --java_out=../Build/java  \
    --objc_out=../Build/obj-c

cd ..

path=../../Blitz-iOS/Shared/ProtocolBuffers/Message
if [ -d "$path" ]; then
    echo ">>> Installing obj-c files in '$path'."
    rm "$path/"*.pb.h  "$path"/*.pb.m
    rsync -av --exclude=".*" Build/obj-c/ "$path"/
fi

path=../src/BlitzMessage
if [ -d "$path" ]; then
    echo ">>> Installing golang files in '$path'."
    rm "$path"/*.pb.go
    for file in Build/golang/*; do
        echo ">>> Fixing '$file'."
        sed -i'.bak' -e 's,import _ ".",,' "$file"
        rm "${file}.bak"
    done
    rsync -av --exclude=".*" Build/golang/  "$path"/
fi

# sed -i'.bak' -e 's,import _ ".",,' golang/happiness.pb.go; \
# $(rm) golang/happiness.pb.go.bak ; \
# cp -av obj-c/ ../../iOS/Shared/ProtocolBuffers/ ; \
# cp -av golang/ ../src/happiness/ ; \
