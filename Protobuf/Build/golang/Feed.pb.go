// Code generated by protoc-gen-go.
// source: Feed.proto
// DO NOT EDIT!

package BlitzMessage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// discarding unused import google_protobuf1 "."

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FeedPostType int32

const (
	FeedPostType_FPUnknown           FeedPostType = 0
	FeedPostType_FPOpenEndedQuestion FeedPostType = 1
	FeedPostType_FPSurveyQuestion    FeedPostType = 2
)

var FeedPostType_name = map[int32]string{
	0: "FPUnknown",
	1: "FPOpenEndedQuestion",
	2: "FPSurveyQuestion",
}
var FeedPostType_value = map[string]int32{
	"FPUnknown":           0,
	"FPOpenEndedQuestion": 1,
	"FPSurveyQuestion":    2,
}

func (x FeedPostType) Enum() *FeedPostType {
	p := new(FeedPostType)
	*p = x
	return p
}
func (x FeedPostType) String() string {
	return proto.EnumName(FeedPostType_name, int32(x))
}
func (x *FeedPostType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FeedPostType_value, data, "FeedPostType")
	if err != nil {
		return err
	}
	*x = FeedPostType(value)
	return nil
}

type FeedPostScope int32

const (
	FeedPostScope_FPScopeUnknown       FeedPostScope = 0
	FeedPostScope_FPScopeLocalNetwork  FeedPostScope = 1
	FeedPostScope_FPScopeGlobalNetwork FeedPostScope = 2
)

var FeedPostScope_name = map[int32]string{
	0: "FPScopeUnknown",
	1: "FPScopeLocalNetwork",
	2: "FPScopeGlobalNetwork",
}
var FeedPostScope_value = map[string]int32{
	"FPScopeUnknown":       0,
	"FPScopeLocalNetwork":  1,
	"FPScopeGlobalNetwork": 2,
}

func (x FeedPostScope) Enum() *FeedPostScope {
	p := new(FeedPostScope)
	*p = x
	return p
}
func (x FeedPostScope) String() string {
	return proto.EnumName(FeedPostScope_name, int32(x))
}
func (x *FeedPostScope) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FeedPostScope_value, data, "FeedPostScope")
	if err != nil {
		return err
	}
	*x = FeedPostScope(value)
	return nil
}

type UpdateVerb int32

const (
	UpdateVerb_UVCreate UpdateVerb = 1
	UpdateVerb_UVUpdate UpdateVerb = 2
	UpdateVerb_UVDelete UpdateVerb = 3
)

var UpdateVerb_name = map[int32]string{
	1: "UVCreate",
	2: "UVUpdate",
	3: "UVDelete",
}
var UpdateVerb_value = map[string]int32{
	"UVCreate": 1,
	"UVUpdate": 2,
	"UVDelete": 3,
}

func (x UpdateVerb) Enum() *UpdateVerb {
	p := new(UpdateVerb)
	*p = x
	return p
}
func (x UpdateVerb) String() string {
	return proto.EnumName(UpdateVerb_name, int32(x))
}
func (x *UpdateVerb) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UpdateVerb_value, data, "UpdateVerb")
	if err != nil {
		return err
	}
	*x = UpdateVerb(value)
	return nil
}

type EntityType int32

const (
	EntityType_ETUnknown  EntityType = 0
	EntityType_ETUser     EntityType = 1
	EntityType_ETFeedPost EntityType = 2
)

var EntityType_name = map[int32]string{
	0: "ETUnknown",
	1: "ETUser",
	2: "ETFeedPost",
}
var EntityType_value = map[string]int32{
	"ETUnknown":  0,
	"ETUser":     1,
	"ETFeedPost": 2,
}

func (x EntityType) Enum() *EntityType {
	p := new(EntityType)
	*p = x
	return p
}
func (x EntityType) String() string {
	return proto.EnumName(EntityType_name, int32(x))
}
func (x *EntityType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EntityType_value, data, "EntityType")
	if err != nil {
		return err
	}
	*x = EntityType(value)
	return nil
}

type FeedReplyTag struct {
	TagName          *string `protobuf:"bytes,1,opt,name=tagName" json:"tagName,omitempty"`
	VoteCount        *int32  `protobuf:"varint,2,opt,name=voteCount" json:"voteCount,omitempty"`
	UserHasVoted     *bool   `protobuf:"varint,3,opt,name=userHasVoted" json:"userHasVoted,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FeedReplyTag) Reset()         { *m = FeedReplyTag{} }
func (m *FeedReplyTag) String() string { return proto.CompactTextString(m) }
func (*FeedReplyTag) ProtoMessage()    {}

func (m *FeedReplyTag) GetTagName() string {
	if m != nil && m.TagName != nil {
		return *m.TagName
	}
	return ""
}

func (m *FeedReplyTag) GetVoteCount() int32 {
	if m != nil && m.VoteCount != nil {
		return *m.VoteCount
	}
	return 0
}

func (m *FeedReplyTag) GetUserHasVoted() bool {
	if m != nil && m.UserHasVoted != nil {
		return *m.UserHasVoted
	}
	return false
}

type FeedReply struct {
	ReplyId          *string         `protobuf:"bytes,1,opt,name=replyId" json:"replyId,omitempty"`
	PostId           *string         `protobuf:"bytes,2,opt,name=postId" json:"postId,omitempty"`
	Timestamp        *Timestamp      `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	UserId           *string         `protobuf:"bytes,4,opt,name=userId" json:"userId,omitempty"`
	VoteCount        *int32          `protobuf:"varint,5,opt,name=voteCount" json:"voteCount,omitempty"`
	UserHasVoted     *bool           `protobuf:"varint,6,opt,name=userHasVoted" json:"userHasVoted,omitempty"`
	ReplyTags        []*FeedReplyTag `protobuf:"bytes,7,rep,name=replyTags" json:"replyTags,omitempty"`
	HeadlineText     *string         `protobuf:"bytes,8,opt,name=headlineText" json:"headlineText,omitempty"`
	BodyText         *string         `protobuf:"bytes,9,opt,name=bodyText" json:"bodyText,omitempty"`
	Topics           []string        `protobuf:"bytes,10,rep,name=topics" json:"topics,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *FeedReply) Reset()         { *m = FeedReply{} }
func (m *FeedReply) String() string { return proto.CompactTextString(m) }
func (*FeedReply) ProtoMessage()    {}

func (m *FeedReply) GetReplyId() string {
	if m != nil && m.ReplyId != nil {
		return *m.ReplyId
	}
	return ""
}

func (m *FeedReply) GetPostId() string {
	if m != nil && m.PostId != nil {
		return *m.PostId
	}
	return ""
}

func (m *FeedReply) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *FeedReply) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *FeedReply) GetVoteCount() int32 {
	if m != nil && m.VoteCount != nil {
		return *m.VoteCount
	}
	return 0
}

func (m *FeedReply) GetUserHasVoted() bool {
	if m != nil && m.UserHasVoted != nil {
		return *m.UserHasVoted
	}
	return false
}

func (m *FeedReply) GetReplyTags() []*FeedReplyTag {
	if m != nil {
		return m.ReplyTags
	}
	return nil
}

func (m *FeedReply) GetHeadlineText() string {
	if m != nil && m.HeadlineText != nil {
		return *m.HeadlineText
	}
	return ""
}

func (m *FeedReply) GetBodyText() string {
	if m != nil && m.BodyText != nil {
		return *m.BodyText
	}
	return ""
}

func (m *FeedReply) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type FeedPost struct {
	PostId                   *string        `protobuf:"bytes,1,opt,name=postId" json:"postId,omitempty"`
	UserId                   *string        `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
	UserVanityId             *string        `protobuf:"bytes,3,opt,name=userVanityId" json:"userVanityId,omitempty"`
	AnonymousPost            *bool          `protobuf:"varint,4,opt,name=anonymousPost,def=0" json:"anonymousPost,omitempty"`
	Timestamp                *Timestamp     `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
	TimespanActive           *Timespan      `protobuf:"bytes,6,opt,name=timespanActive" json:"timespanActive,omitempty"`
	HeadlineText             *string        `protobuf:"bytes,7,opt,name=headlineText" json:"headlineText,omitempty"`
	BodyText                 *string        `protobuf:"bytes,8,opt,name=bodyText" json:"bodyText,omitempty"`
	Topics                   []string       `protobuf:"bytes,9,rep,name=topics" json:"topics,omitempty"`
	PostScope                *FeedPostScope `protobuf:"varint,10,opt,name=postScope,enum=BlitzMessage.FeedPostScope" json:"postScope,omitempty"`
	PostType                 *FeedPostType  `protobuf:"varint,11,opt,name=postType,enum=BlitzMessage.FeedPostType" json:"postType,omitempty"`
	Replies                  []*FeedReply   `protobuf:"bytes,12,rep,name=replies" json:"replies,omitempty"`
	MayAddReply              *bool          `protobuf:"varint,13,opt,name=mayAddReply" json:"mayAddReply,omitempty"`
	MayChooseMulitpleReplies *bool          `protobuf:"varint,14,opt,name=mayChooseMulitpleReplies" json:"mayChooseMulitpleReplies,omitempty"`
	UserHasFollowedPost      *bool          `protobuf:"varint,15,opt,name=userHasFollowedPost" json:"userHasFollowedPost,omitempty"`
	XXX_unrecognized         []byte         `json:"-"`
}

func (m *FeedPost) Reset()         { *m = FeedPost{} }
func (m *FeedPost) String() string { return proto.CompactTextString(m) }
func (*FeedPost) ProtoMessage()    {}

const Default_FeedPost_AnonymousPost bool = false

func (m *FeedPost) GetPostId() string {
	if m != nil && m.PostId != nil {
		return *m.PostId
	}
	return ""
}

func (m *FeedPost) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *FeedPost) GetUserVanityId() string {
	if m != nil && m.UserVanityId != nil {
		return *m.UserVanityId
	}
	return ""
}

func (m *FeedPost) GetAnonymousPost() bool {
	if m != nil && m.AnonymousPost != nil {
		return *m.AnonymousPost
	}
	return Default_FeedPost_AnonymousPost
}

func (m *FeedPost) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *FeedPost) GetTimespanActive() *Timespan {
	if m != nil {
		return m.TimespanActive
	}
	return nil
}

func (m *FeedPost) GetHeadlineText() string {
	if m != nil && m.HeadlineText != nil {
		return *m.HeadlineText
	}
	return ""
}

func (m *FeedPost) GetBodyText() string {
	if m != nil && m.BodyText != nil {
		return *m.BodyText
	}
	return ""
}

func (m *FeedPost) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *FeedPost) GetPostScope() FeedPostScope {
	if m != nil && m.PostScope != nil {
		return *m.PostScope
	}
	return FeedPostScope_FPScopeUnknown
}

func (m *FeedPost) GetPostType() FeedPostType {
	if m != nil && m.PostType != nil {
		return *m.PostType
	}
	return FeedPostType_FPUnknown
}

func (m *FeedPost) GetReplies() []*FeedReply {
	if m != nil {
		return m.Replies
	}
	return nil
}

func (m *FeedPost) GetMayAddReply() bool {
	if m != nil && m.MayAddReply != nil {
		return *m.MayAddReply
	}
	return false
}

func (m *FeedPost) GetMayChooseMulitpleReplies() bool {
	if m != nil && m.MayChooseMulitpleReplies != nil {
		return *m.MayChooseMulitpleReplies
	}
	return false
}

func (m *FeedPost) GetUserHasFollowedPost() bool {
	if m != nil && m.UserHasFollowedPost != nil {
		return *m.UserHasFollowedPost
	}
	return false
}

type FeedPostFetchRequest struct {
	Timespan         *Timespan `protobuf:"bytes,1,opt,name=timespan" json:"timespan,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *FeedPostFetchRequest) Reset()         { *m = FeedPostFetchRequest{} }
func (m *FeedPostFetchRequest) String() string { return proto.CompactTextString(m) }
func (*FeedPostFetchRequest) ProtoMessage()    {}

func (m *FeedPostFetchRequest) GetTimespan() *Timespan {
	if m != nil {
		return m.Timespan
	}
	return nil
}

type FeedPostFetchResponse struct {
	FeedPosts        []*FeedPost `protobuf:"bytes,1,rep,name=feedPosts" json:"feedPosts,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *FeedPostFetchResponse) Reset()         { *m = FeedPostFetchResponse{} }
func (m *FeedPostFetchResponse) String() string { return proto.CompactTextString(m) }
func (*FeedPostFetchResponse) ProtoMessage()    {}

func (m *FeedPostFetchResponse) GetFeedPosts() []*FeedPost {
	if m != nil {
		return m.FeedPosts
	}
	return nil
}

type FeedPostUpdateRequest struct {
	UpdateVerb       *UpdateVerb `protobuf:"varint,1,opt,name=updateVerb,enum=BlitzMessage.UpdateVerb" json:"updateVerb,omitempty"`
	FeedPost         *FeedPost   `protobuf:"bytes,2,opt,name=feedPost" json:"feedPost,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *FeedPostUpdateRequest) Reset()         { *m = FeedPostUpdateRequest{} }
func (m *FeedPostUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*FeedPostUpdateRequest) ProtoMessage()    {}

func (m *FeedPostUpdateRequest) GetUpdateVerb() UpdateVerb {
	if m != nil && m.UpdateVerb != nil {
		return *m.UpdateVerb
	}
	return UpdateVerb_UVCreate
}

func (m *FeedPostUpdateRequest) GetFeedPost() *FeedPost {
	if m != nil {
		return m.FeedPost
	}
	return nil
}

type FeedPostUpdateResponse struct {
	FeedPost         *FeedPost `protobuf:"bytes,1,opt,name=feedPost" json:"feedPost,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *FeedPostUpdateResponse) Reset()         { *m = FeedPostUpdateResponse{} }
func (m *FeedPostUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*FeedPostUpdateResponse) ProtoMessage()    {}

func (m *FeedPostUpdateResponse) GetFeedPost() *FeedPost {
	if m != nil {
		return m.FeedPost
	}
	return nil
}

type FeedPostVote struct {
	PostId           *string         `protobuf:"bytes,1,opt,name=postId" json:"postId,omitempty"`
	ReplyId          *string         `protobuf:"bytes,2,opt,name=replyId" json:"replyId,omitempty"`
	ReplyTags        []*FeedReplyTag `protobuf:"bytes,3,rep,name=replyTags" json:"replyTags,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *FeedPostVote) Reset()         { *m = FeedPostVote{} }
func (m *FeedPostVote) String() string { return proto.CompactTextString(m) }
func (*FeedPostVote) ProtoMessage()    {}

func (m *FeedPostVote) GetPostId() string {
	if m != nil && m.PostId != nil {
		return *m.PostId
	}
	return ""
}

func (m *FeedPostVote) GetReplyId() string {
	if m != nil && m.ReplyId != nil {
		return *m.ReplyId
	}
	return ""
}

func (m *FeedPostVote) GetReplyTags() []*FeedReplyTag {
	if m != nil {
		return m.ReplyTags
	}
	return nil
}

type FollowRequest struct {
	UpdateVerb       *UpdateVerb `protobuf:"varint,1,opt,name=updateVerb,enum=BlitzMessage.UpdateVerb" json:"updateVerb,omitempty"`
	EntityType       *EntityType `protobuf:"varint,2,opt,name=entityType,enum=BlitzMessage.EntityType" json:"entityType,omitempty"`
	EntityId         *string     `protobuf:"bytes,3,opt,name=entityId" json:"entityId,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *FollowRequest) Reset()         { *m = FollowRequest{} }
func (m *FollowRequest) String() string { return proto.CompactTextString(m) }
func (*FollowRequest) ProtoMessage()    {}

func (m *FollowRequest) GetUpdateVerb() UpdateVerb {
	if m != nil && m.UpdateVerb != nil {
		return *m.UpdateVerb
	}
	return UpdateVerb_UVCreate
}

func (m *FollowRequest) GetEntityType() EntityType {
	if m != nil && m.EntityType != nil {
		return *m.EntityType
	}
	return EntityType_ETUnknown
}

func (m *FollowRequest) GetEntityId() string {
	if m != nil && m.EntityId != nil {
		return *m.EntityId
	}
	return ""
}

func init() {
	proto.RegisterEnum("BlitzMessage.FeedPostType", FeedPostType_name, FeedPostType_value)
	proto.RegisterEnum("BlitzMessage.FeedPostScope", FeedPostScope_name, FeedPostScope_value)
	proto.RegisterEnum("BlitzMessage.UpdateVerb", UpdateVerb_name, UpdateVerb_value)
	proto.RegisterEnum("BlitzMessage.EntityType", EntityType_name, EntityType_value)
}
