// Code generated by protoc-gen-go.
// source: UserTracking.proto
// DO NOT EDIT!

package BlitzMessage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "."

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UserTrackingEvent struct {
	Timestamp        *Timestamp `protobuf:"bytes,1,req,name=timestamp" json:"timestamp,omitempty"`
	Location         *Location  `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	Event            *string    `protobuf:"bytes,3,req,name=event" json:"event,omitempty"`
	EventData        []string   `protobuf:"bytes,4,rep,name=eventData" json:"eventData,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *UserTrackingEvent) Reset()                    { *m = UserTrackingEvent{} }
func (m *UserTrackingEvent) String() string            { return proto.CompactTextString(m) }
func (*UserTrackingEvent) ProtoMessage()               {}
func (*UserTrackingEvent) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *UserTrackingEvent) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *UserTrackingEvent) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *UserTrackingEvent) GetEvent() string {
	if m != nil && m.Event != nil {
		return *m.Event
	}
	return ""
}

func (m *UserTrackingEvent) GetEventData() []string {
	if m != nil {
		return m.EventData
	}
	return nil
}

type UserTrackingBatch struct {
	UserEvents       []*UserTrackingEvent `protobuf:"bytes,1,rep,name=userEvents" json:"userEvents,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *UserTrackingBatch) Reset()                    { *m = UserTrackingBatch{} }
func (m *UserTrackingBatch) String() string            { return proto.CompactTextString(m) }
func (*UserTrackingBatch) ProtoMessage()               {}
func (*UserTrackingBatch) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *UserTrackingBatch) GetUserEvents() []*UserTrackingEvent {
	if m != nil {
		return m.UserEvents
	}
	return nil
}

type UserTrackingResponse struct {
	LatestEventUpdate *Timestamp `protobuf:"bytes,1,opt,name=latestEventUpdate" json:"latestEventUpdate,omitempty"`
	XXX_unrecognized  []byte     `json:"-"`
}

func (m *UserTrackingResponse) Reset()                    { *m = UserTrackingResponse{} }
func (m *UserTrackingResponse) String() string            { return proto.CompactTextString(m) }
func (*UserTrackingResponse) ProtoMessage()               {}
func (*UserTrackingResponse) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *UserTrackingResponse) GetLatestEventUpdate() *Timestamp {
	if m != nil {
		return m.LatestEventUpdate
	}
	return nil
}

func init() {
	proto.RegisterType((*UserTrackingEvent)(nil), "BlitzMessage.UserTrackingEvent")
	proto.RegisterType((*UserTrackingBatch)(nil), "BlitzMessage.UserTrackingBatch")
	proto.RegisterType((*UserTrackingResponse)(nil), "BlitzMessage.UserTrackingResponse")
}

var fileDescriptor8 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x8f, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xdd, 0x46, 0xc1, 0x4c, 0xf5, 0x90, 0x45, 0x34, 0xc4, 0x83, 0x21, 0xa7, 0x20, 0x18,
	0xa1, 0xde, 0x7b, 0x08, 0x0a, 0x22, 0x7a, 0x91, 0xf4, 0x01, 0xb6, 0xdb, 0xa1, 0x5d, 0x4d, 0xb2,
	0xcb, 0xee, 0x58, 0xd0, 0x27, 0x10, 0x7c, 0xbb, 0x3e, 0x91, 0xdb, 0x54, 0x21, 0x41, 0xf0, 0xb6,
	0xff, 0xcc, 0xb7, 0xff, 0xff, 0x0f, 0xf0, 0x99, 0x43, 0x5b, 0x59, 0x21, 0x5f, 0x55, 0xbb, 0x2c,
	0x8c, 0xd5, 0xa4, 0xf9, 0x51, 0x59, 0x2b, 0xfa, 0x78, 0x42, 0xe7, 0xc4, 0x12, 0x93, 0x73, 0x3d,
	0x7f, 0x41, 0x49, 0x6a, 0x8d, 0xf2, 0x6a, 0x81, 0x4e, 0x5a, 0x65, 0x48, 0xdb, 0x1d, 0x9a, 0x8c,
	0xab, 0x77, 0x83, 0x6e, 0x27, 0xb2, 0x2f, 0x06, 0x51, 0xdf, 0xee, 0x6e, 0x8d, 0x2d, 0xf1, 0x4b,
	0x08, 0x49, 0x35, 0xe8, 0x48, 0x34, 0x26, 0x66, 0xe9, 0x28, 0x1f, 0x4f, 0xce, 0x8a, 0x7e, 0x42,
	0x51, 0xfd, 0xae, 0x79, 0x0e, 0x87, 0xb5, 0x96, 0x82, 0x94, 0x6e, 0xe3, 0x51, 0xca, 0x3c, 0x7a,
	0x3a, 0x44, 0x1f, 0x7f, 0xb6, 0xfc, 0x18, 0x0e, 0x70, 0x6b, 0x1f, 0x07, 0xde, 0x31, 0xe4, 0x11,
	0x84, 0x9d, 0xbc, 0x15, 0x24, 0xe2, 0xfd, 0x34, 0xc8, 0xc3, 0xec, 0x7e, 0x58, 0xa6, 0x14, 0x24,
	0x57, 0xfc, 0x06, 0xe0, 0xcd, 0x0f, 0xbb, 0x66, 0xce, 0xb7, 0x09, 0x7c, 0xc4, 0xc5, 0x30, 0xe2,
	0xcf, 0x05, 0xd9, 0x03, 0x9c, 0xf4, 0x87, 0xcf, 0xe8, 0x8c, 0x6e, 0x1d, 0xf2, 0x09, 0x44, 0xb5,
	0x20, 0x5f, 0xbd, 0xc3, 0x66, 0x66, 0xe1, 0x85, 0xf7, 0x64, 0xff, 0x5c, 0x58, 0x5e, 0x6f, 0xa6,
	0x23, 0xd8, 0xdb, 0x4c, 0x03, 0xce, 0x4a, 0xff, 0x8c, 0x19, 0x24, 0x52, 0x37, 0xc5, 0x7c, 0x4b,
	0xaf, 0xd0, 0xe2, 0xe0, 0xdf, 0x27, 0x63, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xee, 0xe7, 0x99,
	0x01, 0xa1, 0x01, 0x00, 0x00,
}
