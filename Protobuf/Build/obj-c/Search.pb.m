// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Search.pb.h"
// @@protoc_insertion_point(imports)

@implementation BSearchRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BSearchRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL BSearchTypeIsValidValue(BSearchType value) {
  switch (value) {
    case BSearchTypeSTSearchAll:
    case BSearchTypeSTUsers:
    case BSearchTypeSTTopics:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBSearchType(BSearchType value) {
  switch (value) {
    case BSearchTypeSTSearchAll:
      return @"BSearchTypeSTSearchAll";
    case BSearchTypeSTUsers:
      return @"BSearchTypeSTUsers";
    case BSearchTypeSTTopics:
      return @"BSearchTypeSTTopics";
    default:
      return nil;
  }
}

@interface BAutocompleteRequest ()
@property (strong) NSString* query;
@property BSearchType type;
@end

@implementation BAutocompleteRequest

- (BOOL) hasQuery {
  return !!hasQuery_;
}
- (void) setHasQuery:(BOOL) _value_ {
  hasQuery_ = !!_value_;
}
@synthesize query;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (instancetype) init {
  if ((self = [super init])) {
    self.query = @"";
    self.type = BSearchTypeSTSearchAll;
  }
  return self;
}
static BAutocompleteRequest* defaultBAutocompleteRequestInstance = nil;
+ (void) initialize {
  if (self == [BAutocompleteRequest class]) {
    defaultBAutocompleteRequestInstance = [[BAutocompleteRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBAutocompleteRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBAutocompleteRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasQuery) {
    [output writeString:1 value:self.query];
  }
  if (self.hasType) {
    [output writeEnum:2 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasQuery) {
    size_ += computeStringSize(1, self.query);
  }
  if (self.hasType) {
    size_ += computeEnumSize(2, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BAutocompleteRequest*) parseFromData:(NSData*) data {
  return (BAutocompleteRequest*)[[[BAutocompleteRequest builder] mergeFromData:data] build];
}
+ (BAutocompleteRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAutocompleteRequest*)[[[BAutocompleteRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BAutocompleteRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BAutocompleteRequest*)[[[BAutocompleteRequest builder] mergeFromInputStream:input] build];
}
+ (BAutocompleteRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAutocompleteRequest*)[[[BAutocompleteRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAutocompleteRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BAutocompleteRequest*)[[[BAutocompleteRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BAutocompleteRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAutocompleteRequest*)[[[BAutocompleteRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAutocompleteRequestBuilder*) builder {
  return [[BAutocompleteRequestBuilder alloc] init];
}
+ (BAutocompleteRequestBuilder*) builderWithPrototype:(BAutocompleteRequest*) prototype {
  return [[BAutocompleteRequest builder] mergeFrom:prototype];
}
- (BAutocompleteRequestBuilder*) builder {
  return [BAutocompleteRequest builder];
}
- (BAutocompleteRequestBuilder*) toBuilder {
  return [BAutocompleteRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasQuery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"query", self.query];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromBSearchType(self.type)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasQuery) {
    [dictionary setObject: self.query forKey: @"query"];
  }
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BAutocompleteRequest class]]) {
    return NO;
  }
  BAutocompleteRequest *otherMessage = other;
  return
      self.hasQuery == otherMessage.hasQuery &&
      (!self.hasQuery || [self.query isEqual:otherMessage.query]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasQuery) {
    hashCode = hashCode * 31 + [self.query hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BAutocompleteRequestBuilder()
@property (strong) BAutocompleteRequest* resultAutocompleteRequest;
@end

@implementation BAutocompleteRequestBuilder
@synthesize resultAutocompleteRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAutocompleteRequest = [[BAutocompleteRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAutocompleteRequest;
}
- (BAutocompleteRequestBuilder*) clear {
  self.resultAutocompleteRequest = [[BAutocompleteRequest alloc] init];
  return self;
}
- (BAutocompleteRequestBuilder*) clone {
  return [BAutocompleteRequest builderWithPrototype:resultAutocompleteRequest];
}
- (BAutocompleteRequest*) defaultInstance {
  return [BAutocompleteRequest defaultInstance];
}
- (BAutocompleteRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BAutocompleteRequest*) buildPartial {
  BAutocompleteRequest* returnMe = resultAutocompleteRequest;
  self.resultAutocompleteRequest = nil;
  return returnMe;
}
- (BAutocompleteRequestBuilder*) mergeFrom:(BAutocompleteRequest*) other {
  if (other == [BAutocompleteRequest defaultInstance]) {
    return self;
  }
  if (other.hasQuery) {
    [self setQuery:other.query];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BAutocompleteRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BAutocompleteRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setQuery:[input readString]];
        break;
      }
      case 16: {
        BSearchType value = (BSearchType)[input readEnum];
        if (BSearchTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasQuery {
  return resultAutocompleteRequest.hasQuery;
}
- (NSString*) query {
  return resultAutocompleteRequest.query;
}
- (BAutocompleteRequestBuilder*) setQuery:(NSString*) value {
  resultAutocompleteRequest.hasQuery = YES;
  resultAutocompleteRequest.query = value;
  return self;
}
- (BAutocompleteRequestBuilder*) clearQuery {
  resultAutocompleteRequest.hasQuery = NO;
  resultAutocompleteRequest.query = @"";
  return self;
}
- (BOOL) hasType {
  return resultAutocompleteRequest.hasType;
}
- (BSearchType) type {
  return resultAutocompleteRequest.type;
}
- (BAutocompleteRequestBuilder*) setType:(BSearchType) value {
  resultAutocompleteRequest.hasType = YES;
  resultAutocompleteRequest.type = value;
  return self;
}
- (BAutocompleteRequestBuilder*) clearType {
  resultAutocompleteRequest.hasType = NO;
  resultAutocompleteRequest.type = BSearchTypeSTSearchAll;
  return self;
}
@end

@interface BAutocompleteResponse ()
@property (strong) NSMutableArray * itemsArray;
@end

@implementation BAutocompleteResponse

@synthesize itemsArray;
@dynamic items;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BAutocompleteResponse* defaultBAutocompleteResponseInstance = nil;
+ (void) initialize {
  if (self == [BAutocompleteResponse class]) {
    defaultBAutocompleteResponseInstance = [[BAutocompleteResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBAutocompleteResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultBAutocompleteResponseInstance;
}
- (NSArray *)items {
  return itemsArray;
}
- (NSString*)itemsAtIndex:(NSUInteger)index {
  return [itemsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.itemsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.itemsArray.count;
    [self.itemsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BAutocompleteResponse*) parseFromData:(NSData*) data {
  return (BAutocompleteResponse*)[[[BAutocompleteResponse builder] mergeFromData:data] build];
}
+ (BAutocompleteResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAutocompleteResponse*)[[[BAutocompleteResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BAutocompleteResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BAutocompleteResponse*)[[[BAutocompleteResponse builder] mergeFromInputStream:input] build];
}
+ (BAutocompleteResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAutocompleteResponse*)[[[BAutocompleteResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAutocompleteResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BAutocompleteResponse*)[[[BAutocompleteResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BAutocompleteResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAutocompleteResponse*)[[[BAutocompleteResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAutocompleteResponseBuilder*) builder {
  return [[BAutocompleteResponseBuilder alloc] init];
}
+ (BAutocompleteResponseBuilder*) builderWithPrototype:(BAutocompleteResponse*) prototype {
  return [[BAutocompleteResponse builder] mergeFrom:prototype];
}
- (BAutocompleteResponseBuilder*) builder {
  return [BAutocompleteResponse builder];
}
- (BAutocompleteResponseBuilder*) toBuilder {
  return [BAutocompleteResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.itemsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"items", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [dictionary setObject:self.items forKey: @"items"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BAutocompleteResponse class]]) {
    return NO;
  }
  BAutocompleteResponse *otherMessage = other;
  return
      [self.itemsArray isEqualToArray:otherMessage.itemsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.itemsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BAutocompleteResponseBuilder()
@property (strong) BAutocompleteResponse* resultAutocompleteResponse;
@end

@implementation BAutocompleteResponseBuilder
@synthesize resultAutocompleteResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAutocompleteResponse = [[BAutocompleteResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAutocompleteResponse;
}
- (BAutocompleteResponseBuilder*) clear {
  self.resultAutocompleteResponse = [[BAutocompleteResponse alloc] init];
  return self;
}
- (BAutocompleteResponseBuilder*) clone {
  return [BAutocompleteResponse builderWithPrototype:resultAutocompleteResponse];
}
- (BAutocompleteResponse*) defaultInstance {
  return [BAutocompleteResponse defaultInstance];
}
- (BAutocompleteResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BAutocompleteResponse*) buildPartial {
  BAutocompleteResponse* returnMe = resultAutocompleteResponse;
  self.resultAutocompleteResponse = nil;
  return returnMe;
}
- (BAutocompleteResponseBuilder*) mergeFrom:(BAutocompleteResponse*) other {
  if (other == [BAutocompleteResponse defaultInstance]) {
    return self;
  }
  if (other.itemsArray.count > 0) {
    if (resultAutocompleteResponse.itemsArray == nil) {
      resultAutocompleteResponse.itemsArray = [[NSMutableArray alloc] initWithArray:other.itemsArray];
    } else {
      [resultAutocompleteResponse.itemsArray addObjectsFromArray:other.itemsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BAutocompleteResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BAutocompleteResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addItems:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray *)items {
  return resultAutocompleteResponse.itemsArray;
}
- (NSString*)itemsAtIndex:(NSUInteger)index {
  return [resultAutocompleteResponse itemsAtIndex:index];
}
- (BAutocompleteResponseBuilder *)addItems:(NSString*)value {
  if (resultAutocompleteResponse.itemsArray == nil) {
    resultAutocompleteResponse.itemsArray = [[NSMutableArray alloc]init];
  }
  [resultAutocompleteResponse.itemsArray addObject:value];
  return self;
}
- (BAutocompleteResponseBuilder *)setItemsArray:(NSArray *)array {
  resultAutocompleteResponse.itemsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (BAutocompleteResponseBuilder *)clearItems {
  resultAutocompleteResponse.itemsArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
