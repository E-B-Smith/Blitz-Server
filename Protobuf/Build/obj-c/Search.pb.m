// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Search.pb.h"
// @@protoc_insertion_point(imports)

@implementation BSearchRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BSearchRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    [BUserProfilesRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL BSearchTypeIsValidValue(BSearchType value) {
  switch (value) {
    case BSearchTypeSTSearchAll:
    case BSearchTypeSTUsers:
    case BSearchTypeSTTopics:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBSearchType(BSearchType value) {
  switch (value) {
    case BSearchTypeSTSearchAll:
      return @"BSearchTypeSTSearchAll";
    case BSearchTypeSTUsers:
      return @"BSearchTypeSTUsers";
    case BSearchTypeSTTopics:
      return @"BSearchTypeSTTopics";
    default:
      return nil;
  }
}

@interface BAutocompleteRequest ()
@property (strong) NSString* query;
@property BSearchType searchType;
@end

@implementation BAutocompleteRequest

- (BOOL) hasQuery {
  return !!hasQuery_;
}
- (void) setHasQuery:(BOOL) _value_ {
  hasQuery_ = !!_value_;
}
@synthesize query;
- (BOOL) hasSearchType {
  return !!hasSearchType_;
}
- (void) setHasSearchType:(BOOL) _value_ {
  hasSearchType_ = !!_value_;
}
@synthesize searchType;
- (instancetype) init {
  if ((self = [super init])) {
    self.query = @"";
    self.searchType = BSearchTypeSTSearchAll;
  }
  return self;
}
static BAutocompleteRequest* defaultBAutocompleteRequestInstance = nil;
+ (void) initialize {
  if (self == [BAutocompleteRequest class]) {
    defaultBAutocompleteRequestInstance = [[BAutocompleteRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBAutocompleteRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBAutocompleteRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasQuery) {
    [output writeString:1 value:self.query];
  }
  if (self.hasSearchType) {
    [output writeEnum:2 value:self.searchType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasQuery) {
    size_ += computeStringSize(1, self.query);
  }
  if (self.hasSearchType) {
    size_ += computeEnumSize(2, self.searchType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BAutocompleteRequest*) parseFromData:(NSData*) data {
  return (BAutocompleteRequest*)[[[BAutocompleteRequest builder] mergeFromData:data] build];
}
+ (BAutocompleteRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAutocompleteRequest*)[[[BAutocompleteRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BAutocompleteRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BAutocompleteRequest*)[[[BAutocompleteRequest builder] mergeFromInputStream:input] build];
}
+ (BAutocompleteRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAutocompleteRequest*)[[[BAutocompleteRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAutocompleteRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BAutocompleteRequest*)[[[BAutocompleteRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BAutocompleteRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAutocompleteRequest*)[[[BAutocompleteRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAutocompleteRequestBuilder*) builder {
  return [[BAutocompleteRequestBuilder alloc] init];
}
+ (BAutocompleteRequestBuilder*) builderWithPrototype:(BAutocompleteRequest*) prototype {
  return [[BAutocompleteRequest builder] mergeFrom:prototype];
}
- (BAutocompleteRequestBuilder*) builder {
  return [BAutocompleteRequest builder];
}
- (BAutocompleteRequestBuilder*) toBuilder {
  return [BAutocompleteRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasQuery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"query", self.query];
  }
  if (self.hasSearchType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchType", NSStringFromBSearchType(self.searchType)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasQuery) {
    [dictionary setObject: self.query forKey: @"query"];
  }
  if (self.hasSearchType) {
    [dictionary setObject: @(self.searchType) forKey: @"searchType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BAutocompleteRequest class]]) {
    return NO;
  }
  BAutocompleteRequest *otherMessage = other;
  return
      self.hasQuery == otherMessage.hasQuery &&
      (!self.hasQuery || [self.query isEqual:otherMessage.query]) &&
      self.hasSearchType == otherMessage.hasSearchType &&
      (!self.hasSearchType || self.searchType == otherMessage.searchType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasQuery) {
    hashCode = hashCode * 31 + [self.query hash];
  }
  if (self.hasSearchType) {
    hashCode = hashCode * 31 + self.searchType;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BAutocompleteRequestBuilder()
@property (strong) BAutocompleteRequest* resultAutocompleteRequest;
@end

@implementation BAutocompleteRequestBuilder
@synthesize resultAutocompleteRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAutocompleteRequest = [[BAutocompleteRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAutocompleteRequest;
}
- (BAutocompleteRequestBuilder*) clear {
  self.resultAutocompleteRequest = [[BAutocompleteRequest alloc] init];
  return self;
}
- (BAutocompleteRequestBuilder*) clone {
  return [BAutocompleteRequest builderWithPrototype:resultAutocompleteRequest];
}
- (BAutocompleteRequest*) defaultInstance {
  return [BAutocompleteRequest defaultInstance];
}
- (BAutocompleteRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BAutocompleteRequest*) buildPartial {
  BAutocompleteRequest* returnMe = resultAutocompleteRequest;
  self.resultAutocompleteRequest = nil;
  return returnMe;
}
- (BAutocompleteRequestBuilder*) mergeFrom:(BAutocompleteRequest*) other {
  if (other == [BAutocompleteRequest defaultInstance]) {
    return self;
  }
  if (other.hasQuery) {
    [self setQuery:other.query];
  }
  if (other.hasSearchType) {
    [self setSearchType:other.searchType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BAutocompleteRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BAutocompleteRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setQuery:[input readString]];
        break;
      }
      case 16: {
        BSearchType value = (BSearchType)[input readEnum];
        if (BSearchTypeIsValidValue(value)) {
          [self setSearchType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasQuery {
  return resultAutocompleteRequest.hasQuery;
}
- (NSString*) query {
  return resultAutocompleteRequest.query;
}
- (BAutocompleteRequestBuilder*) setQuery:(NSString*) value {
  resultAutocompleteRequest.hasQuery = YES;
  resultAutocompleteRequest.query = value;
  return self;
}
- (BAutocompleteRequestBuilder*) clearQuery {
  resultAutocompleteRequest.hasQuery = NO;
  resultAutocompleteRequest.query = @"";
  return self;
}
- (BOOL) hasSearchType {
  return resultAutocompleteRequest.hasSearchType;
}
- (BSearchType) searchType {
  return resultAutocompleteRequest.searchType;
}
- (BAutocompleteRequestBuilder*) setSearchType:(BSearchType) value {
  resultAutocompleteRequest.hasSearchType = YES;
  resultAutocompleteRequest.searchType = value;
  return self;
}
- (BAutocompleteRequestBuilder*) clearSearchType {
  resultAutocompleteRequest.hasSearchType = NO;
  resultAutocompleteRequest.searchType = BSearchTypeSTSearchAll;
  return self;
}
@end

@interface BAutocompleteResponse ()
@property (strong) NSString* query;
@property (strong) NSMutableArray * suggestionsArray;
@end

@implementation BAutocompleteResponse

- (BOOL) hasQuery {
  return !!hasQuery_;
}
- (void) setHasQuery:(BOOL) _value_ {
  hasQuery_ = !!_value_;
}
@synthesize query;
@synthesize suggestionsArray;
@dynamic suggestions;
- (instancetype) init {
  if ((self = [super init])) {
    self.query = @"";
  }
  return self;
}
static BAutocompleteResponse* defaultBAutocompleteResponseInstance = nil;
+ (void) initialize {
  if (self == [BAutocompleteResponse class]) {
    defaultBAutocompleteResponseInstance = [[BAutocompleteResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBAutocompleteResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultBAutocompleteResponseInstance;
}
- (NSArray *)suggestions {
  return suggestionsArray;
}
- (NSString*)suggestionsAtIndex:(NSUInteger)index {
  return [suggestionsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasQuery) {
    [output writeString:1 value:self.query];
  }
  [self.suggestionsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasQuery) {
    size_ += computeStringSize(1, self.query);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.suggestionsArray.count;
    [self.suggestionsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BAutocompleteResponse*) parseFromData:(NSData*) data {
  return (BAutocompleteResponse*)[[[BAutocompleteResponse builder] mergeFromData:data] build];
}
+ (BAutocompleteResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAutocompleteResponse*)[[[BAutocompleteResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BAutocompleteResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BAutocompleteResponse*)[[[BAutocompleteResponse builder] mergeFromInputStream:input] build];
}
+ (BAutocompleteResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAutocompleteResponse*)[[[BAutocompleteResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAutocompleteResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BAutocompleteResponse*)[[[BAutocompleteResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BAutocompleteResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAutocompleteResponse*)[[[BAutocompleteResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAutocompleteResponseBuilder*) builder {
  return [[BAutocompleteResponseBuilder alloc] init];
}
+ (BAutocompleteResponseBuilder*) builderWithPrototype:(BAutocompleteResponse*) prototype {
  return [[BAutocompleteResponse builder] mergeFrom:prototype];
}
- (BAutocompleteResponseBuilder*) builder {
  return [BAutocompleteResponse builder];
}
- (BAutocompleteResponseBuilder*) toBuilder {
  return [BAutocompleteResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasQuery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"query", self.query];
  }
  [self.suggestionsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"suggestions", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasQuery) {
    [dictionary setObject: self.query forKey: @"query"];
  }
  [dictionary setObject:self.suggestions forKey: @"suggestions"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BAutocompleteResponse class]]) {
    return NO;
  }
  BAutocompleteResponse *otherMessage = other;
  return
      self.hasQuery == otherMessage.hasQuery &&
      (!self.hasQuery || [self.query isEqual:otherMessage.query]) &&
      [self.suggestionsArray isEqualToArray:otherMessage.suggestionsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasQuery) {
    hashCode = hashCode * 31 + [self.query hash];
  }
  [self.suggestionsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BAutocompleteResponseBuilder()
@property (strong) BAutocompleteResponse* resultAutocompleteResponse;
@end

@implementation BAutocompleteResponseBuilder
@synthesize resultAutocompleteResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAutocompleteResponse = [[BAutocompleteResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAutocompleteResponse;
}
- (BAutocompleteResponseBuilder*) clear {
  self.resultAutocompleteResponse = [[BAutocompleteResponse alloc] init];
  return self;
}
- (BAutocompleteResponseBuilder*) clone {
  return [BAutocompleteResponse builderWithPrototype:resultAutocompleteResponse];
}
- (BAutocompleteResponse*) defaultInstance {
  return [BAutocompleteResponse defaultInstance];
}
- (BAutocompleteResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BAutocompleteResponse*) buildPartial {
  BAutocompleteResponse* returnMe = resultAutocompleteResponse;
  self.resultAutocompleteResponse = nil;
  return returnMe;
}
- (BAutocompleteResponseBuilder*) mergeFrom:(BAutocompleteResponse*) other {
  if (other == [BAutocompleteResponse defaultInstance]) {
    return self;
  }
  if (other.hasQuery) {
    [self setQuery:other.query];
  }
  if (other.suggestionsArray.count > 0) {
    if (resultAutocompleteResponse.suggestionsArray == nil) {
      resultAutocompleteResponse.suggestionsArray = [[NSMutableArray alloc] initWithArray:other.suggestionsArray];
    } else {
      [resultAutocompleteResponse.suggestionsArray addObjectsFromArray:other.suggestionsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BAutocompleteResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BAutocompleteResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setQuery:[input readString]];
        break;
      }
      case 18: {
        [self addSuggestions:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasQuery {
  return resultAutocompleteResponse.hasQuery;
}
- (NSString*) query {
  return resultAutocompleteResponse.query;
}
- (BAutocompleteResponseBuilder*) setQuery:(NSString*) value {
  resultAutocompleteResponse.hasQuery = YES;
  resultAutocompleteResponse.query = value;
  return self;
}
- (BAutocompleteResponseBuilder*) clearQuery {
  resultAutocompleteResponse.hasQuery = NO;
  resultAutocompleteResponse.query = @"";
  return self;
}
- (NSMutableArray *)suggestions {
  return resultAutocompleteResponse.suggestionsArray;
}
- (NSString*)suggestionsAtIndex:(NSUInteger)index {
  return [resultAutocompleteResponse suggestionsAtIndex:index];
}
- (BAutocompleteResponseBuilder *)addSuggestions:(NSString*)value {
  if (resultAutocompleteResponse.suggestionsArray == nil) {
    resultAutocompleteResponse.suggestionsArray = [[NSMutableArray alloc]init];
  }
  [resultAutocompleteResponse.suggestionsArray addObject:value];
  return self;
}
- (BAutocompleteResponseBuilder *)setSuggestionsArray:(NSArray *)array {
  resultAutocompleteResponse.suggestionsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (BAutocompleteResponseBuilder *)clearSuggestions {
  resultAutocompleteResponse.suggestionsArray = nil;
  return self;
}
@end

@interface BUserSearchRequest ()
@property (strong) NSString* query;
@end

@implementation BUserSearchRequest

- (BOOL) hasQuery {
  return !!hasQuery_;
}
- (void) setHasQuery:(BOOL) _value_ {
  hasQuery_ = !!_value_;
}
@synthesize query;
- (instancetype) init {
  if ((self = [super init])) {
    self.query = @"";
  }
  return self;
}
static BUserSearchRequest* defaultBUserSearchRequestInstance = nil;
+ (void) initialize {
  if (self == [BUserSearchRequest class]) {
    defaultBUserSearchRequestInstance = [[BUserSearchRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBUserSearchRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBUserSearchRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasQuery) {
    [output writeString:1 value:self.query];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasQuery) {
    size_ += computeStringSize(1, self.query);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BUserSearchRequest*) parseFromData:(NSData*) data {
  return (BUserSearchRequest*)[[[BUserSearchRequest builder] mergeFromData:data] build];
}
+ (BUserSearchRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserSearchRequest*)[[[BUserSearchRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BUserSearchRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BUserSearchRequest*)[[[BUserSearchRequest builder] mergeFromInputStream:input] build];
}
+ (BUserSearchRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserSearchRequest*)[[[BUserSearchRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserSearchRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BUserSearchRequest*)[[[BUserSearchRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BUserSearchRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserSearchRequest*)[[[BUserSearchRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserSearchRequestBuilder*) builder {
  return [[BUserSearchRequestBuilder alloc] init];
}
+ (BUserSearchRequestBuilder*) builderWithPrototype:(BUserSearchRequest*) prototype {
  return [[BUserSearchRequest builder] mergeFrom:prototype];
}
- (BUserSearchRequestBuilder*) builder {
  return [BUserSearchRequest builder];
}
- (BUserSearchRequestBuilder*) toBuilder {
  return [BUserSearchRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasQuery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"query", self.query];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasQuery) {
    [dictionary setObject: self.query forKey: @"query"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BUserSearchRequest class]]) {
    return NO;
  }
  BUserSearchRequest *otherMessage = other;
  return
      self.hasQuery == otherMessage.hasQuery &&
      (!self.hasQuery || [self.query isEqual:otherMessage.query]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasQuery) {
    hashCode = hashCode * 31 + [self.query hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BUserSearchRequestBuilder()
@property (strong) BUserSearchRequest* resultUserSearchRequest;
@end

@implementation BUserSearchRequestBuilder
@synthesize resultUserSearchRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserSearchRequest = [[BUserSearchRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserSearchRequest;
}
- (BUserSearchRequestBuilder*) clear {
  self.resultUserSearchRequest = [[BUserSearchRequest alloc] init];
  return self;
}
- (BUserSearchRequestBuilder*) clone {
  return [BUserSearchRequest builderWithPrototype:resultUserSearchRequest];
}
- (BUserSearchRequest*) defaultInstance {
  return [BUserSearchRequest defaultInstance];
}
- (BUserSearchRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BUserSearchRequest*) buildPartial {
  BUserSearchRequest* returnMe = resultUserSearchRequest;
  self.resultUserSearchRequest = nil;
  return returnMe;
}
- (BUserSearchRequestBuilder*) mergeFrom:(BUserSearchRequest*) other {
  if (other == [BUserSearchRequest defaultInstance]) {
    return self;
  }
  if (other.hasQuery) {
    [self setQuery:other.query];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BUserSearchRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BUserSearchRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setQuery:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasQuery {
  return resultUserSearchRequest.hasQuery;
}
- (NSString*) query {
  return resultUserSearchRequest.query;
}
- (BUserSearchRequestBuilder*) setQuery:(NSString*) value {
  resultUserSearchRequest.hasQuery = YES;
  resultUserSearchRequest.query = value;
  return self;
}
- (BUserSearchRequestBuilder*) clearQuery {
  resultUserSearchRequest.hasQuery = NO;
  resultUserSearchRequest.query = @"";
  return self;
}
@end

@interface BUserSearchResponse ()
@property (strong) NSString* query;
@property (strong) NSMutableArray<BUserProfile*> * profilesArray;
@end

@implementation BUserSearchResponse

- (BOOL) hasQuery {
  return !!hasQuery_;
}
- (void) setHasQuery:(BOOL) _value_ {
  hasQuery_ = !!_value_;
}
@synthesize query;
@synthesize profilesArray;
@dynamic profiles;
- (instancetype) init {
  if ((self = [super init])) {
    self.query = @"";
  }
  return self;
}
static BUserSearchResponse* defaultBUserSearchResponseInstance = nil;
+ (void) initialize {
  if (self == [BUserSearchResponse class]) {
    defaultBUserSearchResponseInstance = [[BUserSearchResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBUserSearchResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultBUserSearchResponseInstance;
}
- (NSArray<BUserProfile*> *)profiles {
  return profilesArray;
}
- (BUserProfile*)profilesAtIndex:(NSUInteger)index {
  return [profilesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitprofiles = YES;
   [self.profiles enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitprofiles = NO;
      *stop = YES;
    }
  }];
  if (!isInitprofiles) return isInitprofiles;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasQuery) {
    [output writeString:1 value:self.query];
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasQuery) {
    size_ += computeStringSize(1, self.query);
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BUserSearchResponse*) parseFromData:(NSData*) data {
  return (BUserSearchResponse*)[[[BUserSearchResponse builder] mergeFromData:data] build];
}
+ (BUserSearchResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserSearchResponse*)[[[BUserSearchResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BUserSearchResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BUserSearchResponse*)[[[BUserSearchResponse builder] mergeFromInputStream:input] build];
}
+ (BUserSearchResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserSearchResponse*)[[[BUserSearchResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserSearchResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BUserSearchResponse*)[[[BUserSearchResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BUserSearchResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserSearchResponse*)[[[BUserSearchResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserSearchResponseBuilder*) builder {
  return [[BUserSearchResponseBuilder alloc] init];
}
+ (BUserSearchResponseBuilder*) builderWithPrototype:(BUserSearchResponse*) prototype {
  return [[BUserSearchResponse builder] mergeFrom:prototype];
}
- (BUserSearchResponseBuilder*) builder {
  return [BUserSearchResponse builder];
}
- (BUserSearchResponseBuilder*) toBuilder {
  return [BUserSearchResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasQuery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"query", self.query];
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"profiles"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasQuery) {
    [dictionary setObject: self.query forKey: @"query"];
  }
  for (BUserProfile* element in self.profilesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"profiles"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BUserSearchResponse class]]) {
    return NO;
  }
  BUserSearchResponse *otherMessage = other;
  return
      self.hasQuery == otherMessage.hasQuery &&
      (!self.hasQuery || [self.query isEqual:otherMessage.query]) &&
      [self.profilesArray isEqualToArray:otherMessage.profilesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasQuery) {
    hashCode = hashCode * 31 + [self.query hash];
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BUserSearchResponseBuilder()
@property (strong) BUserSearchResponse* resultUserSearchResponse;
@end

@implementation BUserSearchResponseBuilder
@synthesize resultUserSearchResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserSearchResponse = [[BUserSearchResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserSearchResponse;
}
- (BUserSearchResponseBuilder*) clear {
  self.resultUserSearchResponse = [[BUserSearchResponse alloc] init];
  return self;
}
- (BUserSearchResponseBuilder*) clone {
  return [BUserSearchResponse builderWithPrototype:resultUserSearchResponse];
}
- (BUserSearchResponse*) defaultInstance {
  return [BUserSearchResponse defaultInstance];
}
- (BUserSearchResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BUserSearchResponse*) buildPartial {
  BUserSearchResponse* returnMe = resultUserSearchResponse;
  self.resultUserSearchResponse = nil;
  return returnMe;
}
- (BUserSearchResponseBuilder*) mergeFrom:(BUserSearchResponse*) other {
  if (other == [BUserSearchResponse defaultInstance]) {
    return self;
  }
  if (other.hasQuery) {
    [self setQuery:other.query];
  }
  if (other.profilesArray.count > 0) {
    if (resultUserSearchResponse.profilesArray == nil) {
      resultUserSearchResponse.profilesArray = [[NSMutableArray alloc] initWithArray:other.profilesArray];
    } else {
      [resultUserSearchResponse.profilesArray addObjectsFromArray:other.profilesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BUserSearchResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BUserSearchResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setQuery:[input readString]];
        break;
      }
      case 18: {
        BUserProfileBuilder* subBuilder = [BUserProfile builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProfiles:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasQuery {
  return resultUserSearchResponse.hasQuery;
}
- (NSString*) query {
  return resultUserSearchResponse.query;
}
- (BUserSearchResponseBuilder*) setQuery:(NSString*) value {
  resultUserSearchResponse.hasQuery = YES;
  resultUserSearchResponse.query = value;
  return self;
}
- (BUserSearchResponseBuilder*) clearQuery {
  resultUserSearchResponse.hasQuery = NO;
  resultUserSearchResponse.query = @"";
  return self;
}
- (NSMutableArray<BUserProfile*> *)profiles {
  return resultUserSearchResponse.profilesArray;
}
- (BUserProfile*)profilesAtIndex:(NSUInteger)index {
  return [resultUserSearchResponse profilesAtIndex:index];
}
- (BUserSearchResponseBuilder *)addProfiles:(BUserProfile*)value {
  if (resultUserSearchResponse.profilesArray == nil) {
    resultUserSearchResponse.profilesArray = [[NSMutableArray alloc]init];
  }
  [resultUserSearchResponse.profilesArray addObject:value];
  return self;
}
- (BUserSearchResponseBuilder *)setProfilesArray:(NSArray<BUserProfile*> *)array {
  resultUserSearchResponse.profilesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BUserSearchResponseBuilder *)clearProfiles {
  resultUserSearchResponse.profilesArray = nil;
  return self;
}
@end

@interface BSearchCategory ()
@property (strong) NSString* item;
@property (strong) NSString* parent;
@property BOOL isLeaf;
@property (strong) NSString* descriptionText;
@end

@implementation BSearchCategory

- (BOOL) hasItem {
  return !!hasItem_;
}
- (void) setHasItem:(BOOL) _value_ {
  hasItem_ = !!_value_;
}
@synthesize item;
- (BOOL) hasParent {
  return !!hasParent_;
}
- (void) setHasParent:(BOOL) _value_ {
  hasParent_ = !!_value_;
}
@synthesize parent;
- (BOOL) hasIsLeaf {
  return !!hasIsLeaf_;
}
- (void) setHasIsLeaf:(BOOL) _value_ {
  hasIsLeaf_ = !!_value_;
}
- (BOOL) isLeaf {
  return !!isLeaf_;
}
- (void) setIsLeaf:(BOOL) _value_ {
  isLeaf_ = !!_value_;
}
- (BOOL) hasDescriptionText {
  return !!hasDescriptionText_;
}
- (void) setHasDescriptionText:(BOOL) _value_ {
  hasDescriptionText_ = !!_value_;
}
@synthesize descriptionText;
- (instancetype) init {
  if ((self = [super init])) {
    self.item = @"";
    self.parent = @"";
    self.isLeaf = NO;
    self.descriptionText = @"";
  }
  return self;
}
static BSearchCategory* defaultBSearchCategoryInstance = nil;
+ (void) initialize {
  if (self == [BSearchCategory class]) {
    defaultBSearchCategoryInstance = [[BSearchCategory alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBSearchCategoryInstance;
}
- (instancetype) defaultInstance {
  return defaultBSearchCategoryInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItem) {
    [output writeString:1 value:self.item];
  }
  if (self.hasParent) {
    [output writeString:2 value:self.parent];
  }
  if (self.hasIsLeaf) {
    [output writeBool:3 value:self.isLeaf];
  }
  if (self.hasDescriptionText) {
    [output writeString:4 value:self.descriptionText];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasItem) {
    size_ += computeStringSize(1, self.item);
  }
  if (self.hasParent) {
    size_ += computeStringSize(2, self.parent);
  }
  if (self.hasIsLeaf) {
    size_ += computeBoolSize(3, self.isLeaf);
  }
  if (self.hasDescriptionText) {
    size_ += computeStringSize(4, self.descriptionText);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BSearchCategory*) parseFromData:(NSData*) data {
  return (BSearchCategory*)[[[BSearchCategory builder] mergeFromData:data] build];
}
+ (BSearchCategory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSearchCategory*)[[[BSearchCategory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BSearchCategory*) parseFromInputStream:(NSInputStream*) input {
  return (BSearchCategory*)[[[BSearchCategory builder] mergeFromInputStream:input] build];
}
+ (BSearchCategory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSearchCategory*)[[[BSearchCategory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BSearchCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BSearchCategory*)[[[BSearchCategory builder] mergeFromCodedInputStream:input] build];
}
+ (BSearchCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSearchCategory*)[[[BSearchCategory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BSearchCategoryBuilder*) builder {
  return [[BSearchCategoryBuilder alloc] init];
}
+ (BSearchCategoryBuilder*) builderWithPrototype:(BSearchCategory*) prototype {
  return [[BSearchCategory builder] mergeFrom:prototype];
}
- (BSearchCategoryBuilder*) builder {
  return [BSearchCategory builder];
}
- (BSearchCategoryBuilder*) toBuilder {
  return [BSearchCategory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasItem) {
    [output appendFormat:@"%@%@: %@\n", indent, @"item", self.item];
  }
  if (self.hasParent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parent", self.parent];
  }
  if (self.hasIsLeaf) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isLeaf", [NSNumber numberWithBool:self.isLeaf]];
  }
  if (self.hasDescriptionText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"descriptionText", self.descriptionText];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasItem) {
    [dictionary setObject: self.item forKey: @"item"];
  }
  if (self.hasParent) {
    [dictionary setObject: self.parent forKey: @"parent"];
  }
  if (self.hasIsLeaf) {
    [dictionary setObject: [NSNumber numberWithBool:self.isLeaf] forKey: @"isLeaf"];
  }
  if (self.hasDescriptionText) {
    [dictionary setObject: self.descriptionText forKey: @"descriptionText"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BSearchCategory class]]) {
    return NO;
  }
  BSearchCategory *otherMessage = other;
  return
      self.hasItem == otherMessage.hasItem &&
      (!self.hasItem || [self.item isEqual:otherMessage.item]) &&
      self.hasParent == otherMessage.hasParent &&
      (!self.hasParent || [self.parent isEqual:otherMessage.parent]) &&
      self.hasIsLeaf == otherMessage.hasIsLeaf &&
      (!self.hasIsLeaf || self.isLeaf == otherMessage.isLeaf) &&
      self.hasDescriptionText == otherMessage.hasDescriptionText &&
      (!self.hasDescriptionText || [self.descriptionText isEqual:otherMessage.descriptionText]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasItem) {
    hashCode = hashCode * 31 + [self.item hash];
  }
  if (self.hasParent) {
    hashCode = hashCode * 31 + [self.parent hash];
  }
  if (self.hasIsLeaf) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isLeaf] hash];
  }
  if (self.hasDescriptionText) {
    hashCode = hashCode * 31 + [self.descriptionText hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BSearchCategoryBuilder()
@property (strong) BSearchCategory* resultSearchCategory;
@end

@implementation BSearchCategoryBuilder
@synthesize resultSearchCategory;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSearchCategory = [[BSearchCategory alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSearchCategory;
}
- (BSearchCategoryBuilder*) clear {
  self.resultSearchCategory = [[BSearchCategory alloc] init];
  return self;
}
- (BSearchCategoryBuilder*) clone {
  return [BSearchCategory builderWithPrototype:resultSearchCategory];
}
- (BSearchCategory*) defaultInstance {
  return [BSearchCategory defaultInstance];
}
- (BSearchCategory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BSearchCategory*) buildPartial {
  BSearchCategory* returnMe = resultSearchCategory;
  self.resultSearchCategory = nil;
  return returnMe;
}
- (BSearchCategoryBuilder*) mergeFrom:(BSearchCategory*) other {
  if (other == [BSearchCategory defaultInstance]) {
    return self;
  }
  if (other.hasItem) {
    [self setItem:other.item];
  }
  if (other.hasParent) {
    [self setParent:other.parent];
  }
  if (other.hasIsLeaf) {
    [self setIsLeaf:other.isLeaf];
  }
  if (other.hasDescriptionText) {
    [self setDescriptionText:other.descriptionText];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BSearchCategoryBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BSearchCategoryBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setItem:[input readString]];
        break;
      }
      case 18: {
        [self setParent:[input readString]];
        break;
      }
      case 24: {
        [self setIsLeaf:[input readBool]];
        break;
      }
      case 34: {
        [self setDescriptionText:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasItem {
  return resultSearchCategory.hasItem;
}
- (NSString*) item {
  return resultSearchCategory.item;
}
- (BSearchCategoryBuilder*) setItem:(NSString*) value {
  resultSearchCategory.hasItem = YES;
  resultSearchCategory.item = value;
  return self;
}
- (BSearchCategoryBuilder*) clearItem {
  resultSearchCategory.hasItem = NO;
  resultSearchCategory.item = @"";
  return self;
}
- (BOOL) hasParent {
  return resultSearchCategory.hasParent;
}
- (NSString*) parent {
  return resultSearchCategory.parent;
}
- (BSearchCategoryBuilder*) setParent:(NSString*) value {
  resultSearchCategory.hasParent = YES;
  resultSearchCategory.parent = value;
  return self;
}
- (BSearchCategoryBuilder*) clearParent {
  resultSearchCategory.hasParent = NO;
  resultSearchCategory.parent = @"";
  return self;
}
- (BOOL) hasIsLeaf {
  return resultSearchCategory.hasIsLeaf;
}
- (BOOL) isLeaf {
  return resultSearchCategory.isLeaf;
}
- (BSearchCategoryBuilder*) setIsLeaf:(BOOL) value {
  resultSearchCategory.hasIsLeaf = YES;
  resultSearchCategory.isLeaf = value;
  return self;
}
- (BSearchCategoryBuilder*) clearIsLeaf {
  resultSearchCategory.hasIsLeaf = NO;
  resultSearchCategory.isLeaf = NO;
  return self;
}
- (BOOL) hasDescriptionText {
  return resultSearchCategory.hasDescriptionText;
}
- (NSString*) descriptionText {
  return resultSearchCategory.descriptionText;
}
- (BSearchCategoryBuilder*) setDescriptionText:(NSString*) value {
  resultSearchCategory.hasDescriptionText = YES;
  resultSearchCategory.descriptionText = value;
  return self;
}
- (BSearchCategoryBuilder*) clearDescriptionText {
  resultSearchCategory.hasDescriptionText = NO;
  resultSearchCategory.descriptionText = @"";
  return self;
}
@end

@interface BSearchCategories ()
@property (strong) NSMutableArray<BSearchCategory*> * categoriesArray;
@end

@implementation BSearchCategories

@synthesize categoriesArray;
@dynamic categories;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BSearchCategories* defaultBSearchCategoriesInstance = nil;
+ (void) initialize {
  if (self == [BSearchCategories class]) {
    defaultBSearchCategoriesInstance = [[BSearchCategories alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBSearchCategoriesInstance;
}
- (instancetype) defaultInstance {
  return defaultBSearchCategoriesInstance;
}
- (NSArray<BSearchCategory*> *)categories {
  return categoriesArray;
}
- (BSearchCategory*)categoriesAtIndex:(NSUInteger)index {
  return [categoriesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.categoriesArray enumerateObjectsUsingBlock:^(BSearchCategory *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.categoriesArray enumerateObjectsUsingBlock:^(BSearchCategory *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BSearchCategories*) parseFromData:(NSData*) data {
  return (BSearchCategories*)[[[BSearchCategories builder] mergeFromData:data] build];
}
+ (BSearchCategories*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSearchCategories*)[[[BSearchCategories builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BSearchCategories*) parseFromInputStream:(NSInputStream*) input {
  return (BSearchCategories*)[[[BSearchCategories builder] mergeFromInputStream:input] build];
}
+ (BSearchCategories*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSearchCategories*)[[[BSearchCategories builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BSearchCategories*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BSearchCategories*)[[[BSearchCategories builder] mergeFromCodedInputStream:input] build];
}
+ (BSearchCategories*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSearchCategories*)[[[BSearchCategories builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BSearchCategoriesBuilder*) builder {
  return [[BSearchCategoriesBuilder alloc] init];
}
+ (BSearchCategoriesBuilder*) builderWithPrototype:(BSearchCategories*) prototype {
  return [[BSearchCategories builder] mergeFrom:prototype];
}
- (BSearchCategoriesBuilder*) builder {
  return [BSearchCategories builder];
}
- (BSearchCategoriesBuilder*) toBuilder {
  return [BSearchCategories builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.categoriesArray enumerateObjectsUsingBlock:^(BSearchCategory *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"categories"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (BSearchCategory* element in self.categoriesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"categories"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BSearchCategories class]]) {
    return NO;
  }
  BSearchCategories *otherMessage = other;
  return
      [self.categoriesArray isEqualToArray:otherMessage.categoriesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.categoriesArray enumerateObjectsUsingBlock:^(BSearchCategory *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BSearchCategoriesBuilder()
@property (strong) BSearchCategories* resultSearchCategories;
@end

@implementation BSearchCategoriesBuilder
@synthesize resultSearchCategories;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSearchCategories = [[BSearchCategories alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSearchCategories;
}
- (BSearchCategoriesBuilder*) clear {
  self.resultSearchCategories = [[BSearchCategories alloc] init];
  return self;
}
- (BSearchCategoriesBuilder*) clone {
  return [BSearchCategories builderWithPrototype:resultSearchCategories];
}
- (BSearchCategories*) defaultInstance {
  return [BSearchCategories defaultInstance];
}
- (BSearchCategories*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BSearchCategories*) buildPartial {
  BSearchCategories* returnMe = resultSearchCategories;
  self.resultSearchCategories = nil;
  return returnMe;
}
- (BSearchCategoriesBuilder*) mergeFrom:(BSearchCategories*) other {
  if (other == [BSearchCategories defaultInstance]) {
    return self;
  }
  if (other.categoriesArray.count > 0) {
    if (resultSearchCategories.categoriesArray == nil) {
      resultSearchCategories.categoriesArray = [[NSMutableArray alloc] initWithArray:other.categoriesArray];
    } else {
      [resultSearchCategories.categoriesArray addObjectsFromArray:other.categoriesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BSearchCategoriesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BSearchCategoriesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BSearchCategoryBuilder* subBuilder = [BSearchCategory builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCategories:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray<BSearchCategory*> *)categories {
  return resultSearchCategories.categoriesArray;
}
- (BSearchCategory*)categoriesAtIndex:(NSUInteger)index {
  return [resultSearchCategories categoriesAtIndex:index];
}
- (BSearchCategoriesBuilder *)addCategories:(BSearchCategory*)value {
  if (resultSearchCategories.categoriesArray == nil) {
    resultSearchCategories.categoriesArray = [[NSMutableArray alloc]init];
  }
  [resultSearchCategories.categoriesArray addObject:value];
  return self;
}
- (BSearchCategoriesBuilder *)setCategoriesArray:(NSArray<BSearchCategory*> *)array {
  resultSearchCategories.categoriesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BSearchCategoriesBuilder *)clearCategories {
  resultSearchCategories.categoriesArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
