// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Connections.pb.h"
// @@protoc_insertion_point(imports)

@implementation BConnectionsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BConnectionsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    [BUserProfilesRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL BConnectionStatusIsValidValue(BConnectionStatus value) {
  switch (value) {
    case BConnectionStatusCSUnknown:
    case BConnectionStatusCSInviter:
    case BConnectionStatusCSInvitee:
    case BConnectionStatusCSIgnored:
    case BConnectionStatusCSAccepted:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBConnectionStatus(BConnectionStatus value) {
  switch (value) {
    case BConnectionStatusCSUnknown:
      return @"BConnectionStatusCSUnknown";
    case BConnectionStatusCSInviter:
      return @"BConnectionStatusCSInviter";
    case BConnectionStatusCSInvitee:
      return @"BConnectionStatusCSInvitee";
    case BConnectionStatusCSIgnored:
      return @"BConnectionStatusCSIgnored";
    case BConnectionStatusCSAccepted:
      return @"BConnectionStatusCSAccepted";
    default:
      return nil;
  }
}

@interface BConnection ()
@property (strong) NSString* connectionID;
@property BConnectionStatus friendStatus;
@property BOOL isInCircle;
@property (strong) NSString* inviteLink;
@end

@implementation BConnection

- (BOOL) hasConnectionID {
  return !!hasConnectionID_;
}
- (void) setHasConnectionID:(BOOL) _value_ {
  hasConnectionID_ = !!_value_;
}
@synthesize connectionID;
- (BOOL) hasFriendStatus {
  return !!hasFriendStatus_;
}
- (void) setHasFriendStatus:(BOOL) _value_ {
  hasFriendStatus_ = !!_value_;
}
@synthesize friendStatus;
- (BOOL) hasIsInCircle {
  return !!hasIsInCircle_;
}
- (void) setHasIsInCircle:(BOOL) _value_ {
  hasIsInCircle_ = !!_value_;
}
- (BOOL) isInCircle {
  return !!isInCircle_;
}
- (void) setIsInCircle:(BOOL) _value_ {
  isInCircle_ = !!_value_;
}
- (BOOL) hasInviteLink {
  return !!hasInviteLink_;
}
- (void) setHasInviteLink:(BOOL) _value_ {
  hasInviteLink_ = !!_value_;
}
@synthesize inviteLink;
- (instancetype) init {
  if ((self = [super init])) {
    self.connectionID = @"";
    self.friendStatus = BConnectionStatusCSUnknown;
    self.isInCircle = NO;
    self.inviteLink = @"";
  }
  return self;
}
static BConnection* defaultBConnectionInstance = nil;
+ (void) initialize {
  if (self == [BConnection class]) {
    defaultBConnectionInstance = [[BConnection alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBConnectionInstance;
}
- (instancetype) defaultInstance {
  return defaultBConnectionInstance;
}
- (BOOL) isInitialized {
  if (!self.hasConnectionID) {
    return NO;
  }
  if (!self.hasFriendStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasConnectionID) {
    [output writeString:1 value:self.connectionID];
  }
  if (self.hasFriendStatus) {
    [output writeEnum:2 value:self.friendStatus];
  }
  if (self.hasIsInCircle) {
    [output writeBool:3 value:self.isInCircle];
  }
  if (self.hasInviteLink) {
    [output writeString:4 value:self.inviteLink];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasConnectionID) {
    size_ += computeStringSize(1, self.connectionID);
  }
  if (self.hasFriendStatus) {
    size_ += computeEnumSize(2, self.friendStatus);
  }
  if (self.hasIsInCircle) {
    size_ += computeBoolSize(3, self.isInCircle);
  }
  if (self.hasInviteLink) {
    size_ += computeStringSize(4, self.inviteLink);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BConnection*) parseFromData:(NSData*) data {
  return (BConnection*)[[[BConnection builder] mergeFromData:data] build];
}
+ (BConnection*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BConnection*)[[[BConnection builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BConnection*) parseFromInputStream:(NSInputStream*) input {
  return (BConnection*)[[[BConnection builder] mergeFromInputStream:input] build];
}
+ (BConnection*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BConnection*)[[[BConnection builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BConnection*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BConnection*)[[[BConnection builder] mergeFromCodedInputStream:input] build];
}
+ (BConnection*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BConnection*)[[[BConnection builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BConnectionBuilder*) builder {
  return [[BConnectionBuilder alloc] init];
}
+ (BConnectionBuilder*) builderWithPrototype:(BConnection*) prototype {
  return [[BConnection builder] mergeFrom:prototype];
}
- (BConnectionBuilder*) builder {
  return [BConnection builder];
}
- (BConnectionBuilder*) toBuilder {
  return [BConnection builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasConnectionID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"connectionID", self.connectionID];
  }
  if (self.hasFriendStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"friendStatus", NSStringFromBConnectionStatus(self.friendStatus)];
  }
  if (self.hasIsInCircle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isInCircle", [NSNumber numberWithBool:self.isInCircle]];
  }
  if (self.hasInviteLink) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inviteLink", self.inviteLink];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasConnectionID) {
    [dictionary setObject: self.connectionID forKey: @"connectionID"];
  }
  if (self.hasFriendStatus) {
    [dictionary setObject: @(self.friendStatus) forKey: @"friendStatus"];
  }
  if (self.hasIsInCircle) {
    [dictionary setObject: [NSNumber numberWithBool:self.isInCircle] forKey: @"isInCircle"];
  }
  if (self.hasInviteLink) {
    [dictionary setObject: self.inviteLink forKey: @"inviteLink"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BConnection class]]) {
    return NO;
  }
  BConnection *otherMessage = other;
  return
      self.hasConnectionID == otherMessage.hasConnectionID &&
      (!self.hasConnectionID || [self.connectionID isEqual:otherMessage.connectionID]) &&
      self.hasFriendStatus == otherMessage.hasFriendStatus &&
      (!self.hasFriendStatus || self.friendStatus == otherMessage.friendStatus) &&
      self.hasIsInCircle == otherMessage.hasIsInCircle &&
      (!self.hasIsInCircle || self.isInCircle == otherMessage.isInCircle) &&
      self.hasInviteLink == otherMessage.hasInviteLink &&
      (!self.hasInviteLink || [self.inviteLink isEqual:otherMessage.inviteLink]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasConnectionID) {
    hashCode = hashCode * 31 + [self.connectionID hash];
  }
  if (self.hasFriendStatus) {
    hashCode = hashCode * 31 + self.friendStatus;
  }
  if (self.hasIsInCircle) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isInCircle] hash];
  }
  if (self.hasInviteLink) {
    hashCode = hashCode * 31 + [self.inviteLink hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BConnectionBuilder()
@property (strong) BConnection* resultConnection;
@end

@implementation BConnectionBuilder
@synthesize resultConnection;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConnection = [[BConnection alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConnection;
}
- (BConnectionBuilder*) clear {
  self.resultConnection = [[BConnection alloc] init];
  return self;
}
- (BConnectionBuilder*) clone {
  return [BConnection builderWithPrototype:resultConnection];
}
- (BConnection*) defaultInstance {
  return [BConnection defaultInstance];
}
- (BConnection*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BConnection*) buildPartial {
  BConnection* returnMe = resultConnection;
  self.resultConnection = nil;
  return returnMe;
}
- (BConnectionBuilder*) mergeFrom:(BConnection*) other {
  if (other == [BConnection defaultInstance]) {
    return self;
  }
  if (other.hasConnectionID) {
    [self setConnectionID:other.connectionID];
  }
  if (other.hasFriendStatus) {
    [self setFriendStatus:other.friendStatus];
  }
  if (other.hasIsInCircle) {
    [self setIsInCircle:other.isInCircle];
  }
  if (other.hasInviteLink) {
    [self setInviteLink:other.inviteLink];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BConnectionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BConnectionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setConnectionID:[input readString]];
        break;
      }
      case 16: {
        BConnectionStatus value = (BConnectionStatus)[input readEnum];
        if (BConnectionStatusIsValidValue(value)) {
          [self setFriendStatus:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setIsInCircle:[input readBool]];
        break;
      }
      case 34: {
        [self setInviteLink:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasConnectionID {
  return resultConnection.hasConnectionID;
}
- (NSString*) connectionID {
  return resultConnection.connectionID;
}
- (BConnectionBuilder*) setConnectionID:(NSString*) value {
  resultConnection.hasConnectionID = YES;
  resultConnection.connectionID = value;
  return self;
}
- (BConnectionBuilder*) clearConnectionID {
  resultConnection.hasConnectionID = NO;
  resultConnection.connectionID = @"";
  return self;
}
- (BOOL) hasFriendStatus {
  return resultConnection.hasFriendStatus;
}
- (BConnectionStatus) friendStatus {
  return resultConnection.friendStatus;
}
- (BConnectionBuilder*) setFriendStatus:(BConnectionStatus) value {
  resultConnection.hasFriendStatus = YES;
  resultConnection.friendStatus = value;
  return self;
}
- (BConnectionBuilder*) clearFriendStatus {
  resultConnection.hasFriendStatus = NO;
  resultConnection.friendStatus = BConnectionStatusCSUnknown;
  return self;
}
- (BOOL) hasIsInCircle {
  return resultConnection.hasIsInCircle;
}
- (BOOL) isInCircle {
  return resultConnection.isInCircle;
}
- (BConnectionBuilder*) setIsInCircle:(BOOL) value {
  resultConnection.hasIsInCircle = YES;
  resultConnection.isInCircle = value;
  return self;
}
- (BConnectionBuilder*) clearIsInCircle {
  resultConnection.hasIsInCircle = NO;
  resultConnection.isInCircle = NO;
  return self;
}
- (BOOL) hasInviteLink {
  return resultConnection.hasInviteLink;
}
- (NSString*) inviteLink {
  return resultConnection.inviteLink;
}
- (BConnectionBuilder*) setInviteLink:(NSString*) value {
  resultConnection.hasInviteLink = YES;
  resultConnection.inviteLink = value;
  return self;
}
- (BConnectionBuilder*) clearInviteLink {
  resultConnection.hasInviteLink = NO;
  resultConnection.inviteLink = @"";
  return self;
}
@end

@interface BConnectionUpdate ()
@property (strong) NSMutableArray * connectionsArray;
@end

@implementation BConnectionUpdate

@synthesize connectionsArray;
@dynamic connections;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BConnectionUpdate* defaultBConnectionUpdateInstance = nil;
+ (void) initialize {
  if (self == [BConnectionUpdate class]) {
    defaultBConnectionUpdateInstance = [[BConnectionUpdate alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBConnectionUpdateInstance;
}
- (instancetype) defaultInstance {
  return defaultBConnectionUpdateInstance;
}
- (NSArray *)connections {
  return connectionsArray;
}
- (BConnection*)connectionsAtIndex:(NSUInteger)index {
  return [connectionsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitconnections = YES;
   [self.connections enumerateObjectsUsingBlock:^(BConnection *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitconnections = NO;
      *stop = YES;
    }
  }];
  if (!isInitconnections) return isInitconnections;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.connectionsArray enumerateObjectsUsingBlock:^(BConnection *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.connectionsArray enumerateObjectsUsingBlock:^(BConnection *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BConnectionUpdate*) parseFromData:(NSData*) data {
  return (BConnectionUpdate*)[[[BConnectionUpdate builder] mergeFromData:data] build];
}
+ (BConnectionUpdate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BConnectionUpdate*)[[[BConnectionUpdate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BConnectionUpdate*) parseFromInputStream:(NSInputStream*) input {
  return (BConnectionUpdate*)[[[BConnectionUpdate builder] mergeFromInputStream:input] build];
}
+ (BConnectionUpdate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BConnectionUpdate*)[[[BConnectionUpdate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BConnectionUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BConnectionUpdate*)[[[BConnectionUpdate builder] mergeFromCodedInputStream:input] build];
}
+ (BConnectionUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BConnectionUpdate*)[[[BConnectionUpdate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BConnectionUpdateBuilder*) builder {
  return [[BConnectionUpdateBuilder alloc] init];
}
+ (BConnectionUpdateBuilder*) builderWithPrototype:(BConnectionUpdate*) prototype {
  return [[BConnectionUpdate builder] mergeFrom:prototype];
}
- (BConnectionUpdateBuilder*) builder {
  return [BConnectionUpdate builder];
}
- (BConnectionUpdateBuilder*) toBuilder {
  return [BConnectionUpdate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.connectionsArray enumerateObjectsUsingBlock:^(BConnection *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"connections"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (BConnection* element in self.connectionsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"connections"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BConnectionUpdate class]]) {
    return NO;
  }
  BConnectionUpdate *otherMessage = other;
  return
      [self.connectionsArray isEqualToArray:otherMessage.connectionsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.connectionsArray enumerateObjectsUsingBlock:^(BConnection *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BConnectionUpdateBuilder()
@property (strong) BConnectionUpdate* resultConnectionUpdate;
@end

@implementation BConnectionUpdateBuilder
@synthesize resultConnectionUpdate;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConnectionUpdate = [[BConnectionUpdate alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConnectionUpdate;
}
- (BConnectionUpdateBuilder*) clear {
  self.resultConnectionUpdate = [[BConnectionUpdate alloc] init];
  return self;
}
- (BConnectionUpdateBuilder*) clone {
  return [BConnectionUpdate builderWithPrototype:resultConnectionUpdate];
}
- (BConnectionUpdate*) defaultInstance {
  return [BConnectionUpdate defaultInstance];
}
- (BConnectionUpdate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BConnectionUpdate*) buildPartial {
  BConnectionUpdate* returnMe = resultConnectionUpdate;
  self.resultConnectionUpdate = nil;
  return returnMe;
}
- (BConnectionUpdateBuilder*) mergeFrom:(BConnectionUpdate*) other {
  if (other == [BConnectionUpdate defaultInstance]) {
    return self;
  }
  if (other.connectionsArray.count > 0) {
    if (resultConnectionUpdate.connectionsArray == nil) {
      resultConnectionUpdate.connectionsArray = [[NSMutableArray alloc] initWithArray:other.connectionsArray];
    } else {
      [resultConnectionUpdate.connectionsArray addObjectsFromArray:other.connectionsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BConnectionUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BConnectionUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BConnectionBuilder* subBuilder = [BConnection builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addConnections:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)connections {
  return resultConnectionUpdate.connectionsArray;
}
- (BConnection*)connectionsAtIndex:(NSUInteger)index {
  return [resultConnectionUpdate connectionsAtIndex:index];
}
- (BConnectionUpdateBuilder *)addConnections:(BConnection*)value {
  if (resultConnectionUpdate.connectionsArray == nil) {
    resultConnectionUpdate.connectionsArray = [[NSMutableArray alloc]init];
  }
  [resultConnectionUpdate.connectionsArray addObject:value];
  return self;
}
- (BConnectionUpdateBuilder *)setConnectionsArray:(NSArray *)array {
  resultConnectionUpdate.connectionsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BConnectionUpdateBuilder *)clearConnections {
  resultConnectionUpdate.connectionsArray = nil;
  return self;
}
@end

@interface BConnectionRequest ()
@property (strong) BUserProfile* connectionProfile;
@property BOOL isInCircle;
@end

@implementation BConnectionRequest

- (BOOL) hasConnectionProfile {
  return !!hasConnectionProfile_;
}
- (void) setHasConnectionProfile:(BOOL) _value_ {
  hasConnectionProfile_ = !!_value_;
}
@synthesize connectionProfile;
- (BOOL) hasIsInCircle {
  return !!hasIsInCircle_;
}
- (void) setHasIsInCircle:(BOOL) _value_ {
  hasIsInCircle_ = !!_value_;
}
- (BOOL) isInCircle {
  return !!isInCircle_;
}
- (void) setIsInCircle:(BOOL) _value_ {
  isInCircle_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.connectionProfile = [BUserProfile defaultInstance];
    self.isInCircle = NO;
  }
  return self;
}
static BConnectionRequest* defaultBConnectionRequestInstance = nil;
+ (void) initialize {
  if (self == [BConnectionRequest class]) {
    defaultBConnectionRequestInstance = [[BConnectionRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBConnectionRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBConnectionRequestInstance;
}
- (BOOL) isInitialized {
  if (self.hasConnectionProfile) {
    if (!self.connectionProfile.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasConnectionProfile) {
    [output writeMessage:1 value:self.connectionProfile];
  }
  if (self.hasIsInCircle) {
    [output writeBool:2 value:self.isInCircle];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasConnectionProfile) {
    size_ += computeMessageSize(1, self.connectionProfile);
  }
  if (self.hasIsInCircle) {
    size_ += computeBoolSize(2, self.isInCircle);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BConnectionRequest*) parseFromData:(NSData*) data {
  return (BConnectionRequest*)[[[BConnectionRequest builder] mergeFromData:data] build];
}
+ (BConnectionRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BConnectionRequest*)[[[BConnectionRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BConnectionRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BConnectionRequest*)[[[BConnectionRequest builder] mergeFromInputStream:input] build];
}
+ (BConnectionRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BConnectionRequest*)[[[BConnectionRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BConnectionRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BConnectionRequest*)[[[BConnectionRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BConnectionRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BConnectionRequest*)[[[BConnectionRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BConnectionRequestBuilder*) builder {
  return [[BConnectionRequestBuilder alloc] init];
}
+ (BConnectionRequestBuilder*) builderWithPrototype:(BConnectionRequest*) prototype {
  return [[BConnectionRequest builder] mergeFrom:prototype];
}
- (BConnectionRequestBuilder*) builder {
  return [BConnectionRequest builder];
}
- (BConnectionRequestBuilder*) toBuilder {
  return [BConnectionRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasConnectionProfile) {
    [output appendFormat:@"%@%@ {\n", indent, @"connectionProfile"];
    [self.connectionProfile writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasIsInCircle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isInCircle", [NSNumber numberWithBool:self.isInCircle]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasConnectionProfile) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.connectionProfile storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"connectionProfile"];
  }
  if (self.hasIsInCircle) {
    [dictionary setObject: [NSNumber numberWithBool:self.isInCircle] forKey: @"isInCircle"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BConnectionRequest class]]) {
    return NO;
  }
  BConnectionRequest *otherMessage = other;
  return
      self.hasConnectionProfile == otherMessage.hasConnectionProfile &&
      (!self.hasConnectionProfile || [self.connectionProfile isEqual:otherMessage.connectionProfile]) &&
      self.hasIsInCircle == otherMessage.hasIsInCircle &&
      (!self.hasIsInCircle || self.isInCircle == otherMessage.isInCircle) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasConnectionProfile) {
    hashCode = hashCode * 31 + [self.connectionProfile hash];
  }
  if (self.hasIsInCircle) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isInCircle] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BConnectionRequestBuilder()
@property (strong) BConnectionRequest* resultConnectionRequest;
@end

@implementation BConnectionRequestBuilder
@synthesize resultConnectionRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConnectionRequest = [[BConnectionRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConnectionRequest;
}
- (BConnectionRequestBuilder*) clear {
  self.resultConnectionRequest = [[BConnectionRequest alloc] init];
  return self;
}
- (BConnectionRequestBuilder*) clone {
  return [BConnectionRequest builderWithPrototype:resultConnectionRequest];
}
- (BConnectionRequest*) defaultInstance {
  return [BConnectionRequest defaultInstance];
}
- (BConnectionRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BConnectionRequest*) buildPartial {
  BConnectionRequest* returnMe = resultConnectionRequest;
  self.resultConnectionRequest = nil;
  return returnMe;
}
- (BConnectionRequestBuilder*) mergeFrom:(BConnectionRequest*) other {
  if (other == [BConnectionRequest defaultInstance]) {
    return self;
  }
  if (other.hasConnectionProfile) {
    [self mergeConnectionProfile:other.connectionProfile];
  }
  if (other.hasIsInCircle) {
    [self setIsInCircle:other.isInCircle];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BConnectionRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BConnectionRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BUserProfileBuilder* subBuilder = [BUserProfile builder];
        if (self.hasConnectionProfile) {
          [subBuilder mergeFrom:self.connectionProfile];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setConnectionProfile:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setIsInCircle:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasConnectionProfile {
  return resultConnectionRequest.hasConnectionProfile;
}
- (BUserProfile*) connectionProfile {
  return resultConnectionRequest.connectionProfile;
}
- (BConnectionRequestBuilder*) setConnectionProfile:(BUserProfile*) value {
  resultConnectionRequest.hasConnectionProfile = YES;
  resultConnectionRequest.connectionProfile = value;
  return self;
}
- (BConnectionRequestBuilder*) setConnectionProfileBuilder:(BUserProfileBuilder*) builderForValue {
  return [self setConnectionProfile:[builderForValue build]];
}
- (BConnectionRequestBuilder*) mergeConnectionProfile:(BUserProfile*) value {
  if (resultConnectionRequest.hasConnectionProfile &&
      resultConnectionRequest.connectionProfile != [BUserProfile defaultInstance]) {
    resultConnectionRequest.connectionProfile =
      [[[BUserProfile builderWithPrototype:resultConnectionRequest.connectionProfile] mergeFrom:value] buildPartial];
  } else {
    resultConnectionRequest.connectionProfile = value;
  }
  resultConnectionRequest.hasConnectionProfile = YES;
  return self;
}
- (BConnectionRequestBuilder*) clearConnectionProfile {
  resultConnectionRequest.hasConnectionProfile = NO;
  resultConnectionRequest.connectionProfile = [BUserProfile defaultInstance];
  return self;
}
- (BOOL) hasIsInCircle {
  return resultConnectionRequest.hasIsInCircle;
}
- (BOOL) isInCircle {
  return resultConnectionRequest.isInCircle;
}
- (BConnectionRequestBuilder*) setIsInCircle:(BOOL) value {
  resultConnectionRequest.hasIsInCircle = YES;
  resultConnectionRequest.isInCircle = value;
  return self;
}
- (BConnectionRequestBuilder*) clearIsInCircle {
  resultConnectionRequest.hasIsInCircle = NO;
  resultConnectionRequest.isInCircle = NO;
  return self;
}
@end

@interface BAcceptConnectionRequest ()
@property (strong) NSString* userID;
@property (strong) NSString* connectionID;
@property (strong) NSString* message;
@property (strong) BContactInfo* contactInfo;
@property (strong) NSMutableArray * profilesArray;
@property (strong) NSString* confirmationCode;
@end

@implementation BAcceptConnectionRequest

- (BOOL) hasUserID {
  return !!hasUserID_;
}
- (void) setHasUserID:(BOOL) _value_ {
  hasUserID_ = !!_value_;
}
@synthesize userID;
- (BOOL) hasConnectionID {
  return !!hasConnectionID_;
}
- (void) setHasConnectionID:(BOOL) _value_ {
  hasConnectionID_ = !!_value_;
}
@synthesize connectionID;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (BOOL) hasContactInfo {
  return !!hasContactInfo_;
}
- (void) setHasContactInfo:(BOOL) _value_ {
  hasContactInfo_ = !!_value_;
}
@synthesize contactInfo;
@synthesize profilesArray;
@dynamic profiles;
- (BOOL) hasConfirmationCode {
  return !!hasConfirmationCode_;
}
- (void) setHasConfirmationCode:(BOOL) _value_ {
  hasConfirmationCode_ = !!_value_;
}
@synthesize confirmationCode;
- (instancetype) init {
  if ((self = [super init])) {
    self.userID = @"";
    self.connectionID = @"";
    self.message = @"";
    self.contactInfo = [BContactInfo defaultInstance];
    self.confirmationCode = @"";
  }
  return self;
}
static BAcceptConnectionRequest* defaultBAcceptConnectionRequestInstance = nil;
+ (void) initialize {
  if (self == [BAcceptConnectionRequest class]) {
    defaultBAcceptConnectionRequestInstance = [[BAcceptConnectionRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBAcceptConnectionRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBAcceptConnectionRequestInstance;
}
- (NSArray *)profiles {
  return profilesArray;
}
- (BUserProfile*)profilesAtIndex:(NSUInteger)index {
  return [profilesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasContactInfo) {
    if (!self.contactInfo.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitprofiles = YES;
   [self.profiles enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitprofiles = NO;
      *stop = YES;
    }
  }];
  if (!isInitprofiles) return isInitprofiles;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserID) {
    [output writeString:1 value:self.userID];
  }
  if (self.hasConnectionID) {
    [output writeString:2 value:self.connectionID];
  }
  if (self.hasMessage) {
    [output writeString:3 value:self.message];
  }
  if (self.hasContactInfo) {
    [output writeMessage:4 value:self.contactInfo];
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  if (self.hasConfirmationCode) {
    [output writeString:6 value:self.confirmationCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserID) {
    size_ += computeStringSize(1, self.userID);
  }
  if (self.hasConnectionID) {
    size_ += computeStringSize(2, self.connectionID);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(3, self.message);
  }
  if (self.hasContactInfo) {
    size_ += computeMessageSize(4, self.contactInfo);
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  if (self.hasConfirmationCode) {
    size_ += computeStringSize(6, self.confirmationCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BAcceptConnectionRequest*) parseFromData:(NSData*) data {
  return (BAcceptConnectionRequest*)[[[BAcceptConnectionRequest builder] mergeFromData:data] build];
}
+ (BAcceptConnectionRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAcceptConnectionRequest*)[[[BAcceptConnectionRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BAcceptConnectionRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BAcceptConnectionRequest*)[[[BAcceptConnectionRequest builder] mergeFromInputStream:input] build];
}
+ (BAcceptConnectionRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAcceptConnectionRequest*)[[[BAcceptConnectionRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAcceptConnectionRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BAcceptConnectionRequest*)[[[BAcceptConnectionRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BAcceptConnectionRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAcceptConnectionRequest*)[[[BAcceptConnectionRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAcceptConnectionRequestBuilder*) builder {
  return [[BAcceptConnectionRequestBuilder alloc] init];
}
+ (BAcceptConnectionRequestBuilder*) builderWithPrototype:(BAcceptConnectionRequest*) prototype {
  return [[BAcceptConnectionRequest builder] mergeFrom:prototype];
}
- (BAcceptConnectionRequestBuilder*) builder {
  return [BAcceptConnectionRequest builder];
}
- (BAcceptConnectionRequestBuilder*) toBuilder {
  return [BAcceptConnectionRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userID", self.userID];
  }
  if (self.hasConnectionID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"connectionID", self.connectionID];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasContactInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"contactInfo"];
    [self.contactInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"profiles"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasConfirmationCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"confirmationCode", self.confirmationCode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserID) {
    [dictionary setObject: self.userID forKey: @"userID"];
  }
  if (self.hasConnectionID) {
    [dictionary setObject: self.connectionID forKey: @"connectionID"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  if (self.hasContactInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.contactInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"contactInfo"];
  }
  for (BUserProfile* element in self.profilesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"profiles"];
  }
  if (self.hasConfirmationCode) {
    [dictionary setObject: self.confirmationCode forKey: @"confirmationCode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BAcceptConnectionRequest class]]) {
    return NO;
  }
  BAcceptConnectionRequest *otherMessage = other;
  return
      self.hasUserID == otherMessage.hasUserID &&
      (!self.hasUserID || [self.userID isEqual:otherMessage.userID]) &&
      self.hasConnectionID == otherMessage.hasConnectionID &&
      (!self.hasConnectionID || [self.connectionID isEqual:otherMessage.connectionID]) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasContactInfo == otherMessage.hasContactInfo &&
      (!self.hasContactInfo || [self.contactInfo isEqual:otherMessage.contactInfo]) &&
      [self.profilesArray isEqualToArray:otherMessage.profilesArray] &&
      self.hasConfirmationCode == otherMessage.hasConfirmationCode &&
      (!self.hasConfirmationCode || [self.confirmationCode isEqual:otherMessage.confirmationCode]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserID) {
    hashCode = hashCode * 31 + [self.userID hash];
  }
  if (self.hasConnectionID) {
    hashCode = hashCode * 31 + [self.connectionID hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasContactInfo) {
    hashCode = hashCode * 31 + [self.contactInfo hash];
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasConfirmationCode) {
    hashCode = hashCode * 31 + [self.confirmationCode hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BAcceptConnectionRequestBuilder()
@property (strong) BAcceptConnectionRequest* resultAcceptConnectionRequest;
@end

@implementation BAcceptConnectionRequestBuilder
@synthesize resultAcceptConnectionRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAcceptConnectionRequest = [[BAcceptConnectionRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAcceptConnectionRequest;
}
- (BAcceptConnectionRequestBuilder*) clear {
  self.resultAcceptConnectionRequest = [[BAcceptConnectionRequest alloc] init];
  return self;
}
- (BAcceptConnectionRequestBuilder*) clone {
  return [BAcceptConnectionRequest builderWithPrototype:resultAcceptConnectionRequest];
}
- (BAcceptConnectionRequest*) defaultInstance {
  return [BAcceptConnectionRequest defaultInstance];
}
- (BAcceptConnectionRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BAcceptConnectionRequest*) buildPartial {
  BAcceptConnectionRequest* returnMe = resultAcceptConnectionRequest;
  self.resultAcceptConnectionRequest = nil;
  return returnMe;
}
- (BAcceptConnectionRequestBuilder*) mergeFrom:(BAcceptConnectionRequest*) other {
  if (other == [BAcceptConnectionRequest defaultInstance]) {
    return self;
  }
  if (other.hasUserID) {
    [self setUserID:other.userID];
  }
  if (other.hasConnectionID) {
    [self setConnectionID:other.connectionID];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.hasContactInfo) {
    [self mergeContactInfo:other.contactInfo];
  }
  if (other.profilesArray.count > 0) {
    if (resultAcceptConnectionRequest.profilesArray == nil) {
      resultAcceptConnectionRequest.profilesArray = [[NSMutableArray alloc] initWithArray:other.profilesArray];
    } else {
      [resultAcceptConnectionRequest.profilesArray addObjectsFromArray:other.profilesArray];
    }
  }
  if (other.hasConfirmationCode) {
    [self setConfirmationCode:other.confirmationCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BAcceptConnectionRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BAcceptConnectionRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserID:[input readString]];
        break;
      }
      case 18: {
        [self setConnectionID:[input readString]];
        break;
      }
      case 26: {
        [self setMessage:[input readString]];
        break;
      }
      case 34: {
        BContactInfoBuilder* subBuilder = [BContactInfo builder];
        if (self.hasContactInfo) {
          [subBuilder mergeFrom:self.contactInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setContactInfo:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        BUserProfileBuilder* subBuilder = [BUserProfile builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProfiles:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self setConfirmationCode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserID {
  return resultAcceptConnectionRequest.hasUserID;
}
- (NSString*) userID {
  return resultAcceptConnectionRequest.userID;
}
- (BAcceptConnectionRequestBuilder*) setUserID:(NSString*) value {
  resultAcceptConnectionRequest.hasUserID = YES;
  resultAcceptConnectionRequest.userID = value;
  return self;
}
- (BAcceptConnectionRequestBuilder*) clearUserID {
  resultAcceptConnectionRequest.hasUserID = NO;
  resultAcceptConnectionRequest.userID = @"";
  return self;
}
- (BOOL) hasConnectionID {
  return resultAcceptConnectionRequest.hasConnectionID;
}
- (NSString*) connectionID {
  return resultAcceptConnectionRequest.connectionID;
}
- (BAcceptConnectionRequestBuilder*) setConnectionID:(NSString*) value {
  resultAcceptConnectionRequest.hasConnectionID = YES;
  resultAcceptConnectionRequest.connectionID = value;
  return self;
}
- (BAcceptConnectionRequestBuilder*) clearConnectionID {
  resultAcceptConnectionRequest.hasConnectionID = NO;
  resultAcceptConnectionRequest.connectionID = @"";
  return self;
}
- (BOOL) hasMessage {
  return resultAcceptConnectionRequest.hasMessage;
}
- (NSString*) message {
  return resultAcceptConnectionRequest.message;
}
- (BAcceptConnectionRequestBuilder*) setMessage:(NSString*) value {
  resultAcceptConnectionRequest.hasMessage = YES;
  resultAcceptConnectionRequest.message = value;
  return self;
}
- (BAcceptConnectionRequestBuilder*) clearMessage {
  resultAcceptConnectionRequest.hasMessage = NO;
  resultAcceptConnectionRequest.message = @"";
  return self;
}
- (BOOL) hasContactInfo {
  return resultAcceptConnectionRequest.hasContactInfo;
}
- (BContactInfo*) contactInfo {
  return resultAcceptConnectionRequest.contactInfo;
}
- (BAcceptConnectionRequestBuilder*) setContactInfo:(BContactInfo*) value {
  resultAcceptConnectionRequest.hasContactInfo = YES;
  resultAcceptConnectionRequest.contactInfo = value;
  return self;
}
- (BAcceptConnectionRequestBuilder*) setContactInfoBuilder:(BContactInfoBuilder*) builderForValue {
  return [self setContactInfo:[builderForValue build]];
}
- (BAcceptConnectionRequestBuilder*) mergeContactInfo:(BContactInfo*) value {
  if (resultAcceptConnectionRequest.hasContactInfo &&
      resultAcceptConnectionRequest.contactInfo != [BContactInfo defaultInstance]) {
    resultAcceptConnectionRequest.contactInfo =
      [[[BContactInfo builderWithPrototype:resultAcceptConnectionRequest.contactInfo] mergeFrom:value] buildPartial];
  } else {
    resultAcceptConnectionRequest.contactInfo = value;
  }
  resultAcceptConnectionRequest.hasContactInfo = YES;
  return self;
}
- (BAcceptConnectionRequestBuilder*) clearContactInfo {
  resultAcceptConnectionRequest.hasContactInfo = NO;
  resultAcceptConnectionRequest.contactInfo = [BContactInfo defaultInstance];
  return self;
}
- (NSMutableArray *)profiles {
  return resultAcceptConnectionRequest.profilesArray;
}
- (BUserProfile*)profilesAtIndex:(NSUInteger)index {
  return [resultAcceptConnectionRequest profilesAtIndex:index];
}
- (BAcceptConnectionRequestBuilder *)addProfiles:(BUserProfile*)value {
  if (resultAcceptConnectionRequest.profilesArray == nil) {
    resultAcceptConnectionRequest.profilesArray = [[NSMutableArray alloc]init];
  }
  [resultAcceptConnectionRequest.profilesArray addObject:value];
  return self;
}
- (BAcceptConnectionRequestBuilder *)setProfilesArray:(NSArray *)array {
  resultAcceptConnectionRequest.profilesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BAcceptConnectionRequestBuilder *)clearProfiles {
  resultAcceptConnectionRequest.profilesArray = nil;
  return self;
}
- (BOOL) hasConfirmationCode {
  return resultAcceptConnectionRequest.hasConfirmationCode;
}
- (NSString*) confirmationCode {
  return resultAcceptConnectionRequest.confirmationCode;
}
- (BAcceptConnectionRequestBuilder*) setConfirmationCode:(NSString*) value {
  resultAcceptConnectionRequest.hasConfirmationCode = YES;
  resultAcceptConnectionRequest.confirmationCode = value;
  return self;
}
- (BAcceptConnectionRequestBuilder*) clearConfirmationCode {
  resultAcceptConnectionRequest.hasConfirmationCode = NO;
  resultAcceptConnectionRequest.confirmationCode = @"";
  return self;
}
@end

@interface BAcceptConnectionResponse ()
@property (strong) NSString* userID;
@property (strong) NSString* connectionID;
@property (strong) NSString* message;
@property (strong) NSMutableArray * connectionsArray;
@property (strong) NSMutableArray * profilesArray;
@end

@implementation BAcceptConnectionResponse

- (BOOL) hasUserID {
  return !!hasUserID_;
}
- (void) setHasUserID:(BOOL) _value_ {
  hasUserID_ = !!_value_;
}
@synthesize userID;
- (BOOL) hasConnectionID {
  return !!hasConnectionID_;
}
- (void) setHasConnectionID:(BOOL) _value_ {
  hasConnectionID_ = !!_value_;
}
@synthesize connectionID;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
@synthesize connectionsArray;
@dynamic connections;
@synthesize profilesArray;
@dynamic profiles;
- (instancetype) init {
  if ((self = [super init])) {
    self.userID = @"";
    self.connectionID = @"";
    self.message = @"";
  }
  return self;
}
static BAcceptConnectionResponse* defaultBAcceptConnectionResponseInstance = nil;
+ (void) initialize {
  if (self == [BAcceptConnectionResponse class]) {
    defaultBAcceptConnectionResponseInstance = [[BAcceptConnectionResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBAcceptConnectionResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultBAcceptConnectionResponseInstance;
}
- (NSArray *)connections {
  return connectionsArray;
}
- (BConnection*)connectionsAtIndex:(NSUInteger)index {
  return [connectionsArray objectAtIndex:index];
}
- (NSArray *)profiles {
  return profilesArray;
}
- (BUserProfile*)profilesAtIndex:(NSUInteger)index {
  return [profilesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitconnections = YES;
   [self.connections enumerateObjectsUsingBlock:^(BConnection *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitconnections = NO;
      *stop = YES;
    }
  }];
  if (!isInitconnections) return isInitconnections;
  __block BOOL isInitprofiles = YES;
   [self.profiles enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitprofiles = NO;
      *stop = YES;
    }
  }];
  if (!isInitprofiles) return isInitprofiles;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserID) {
    [output writeString:1 value:self.userID];
  }
  if (self.hasConnectionID) {
    [output writeString:2 value:self.connectionID];
  }
  if (self.hasMessage) {
    [output writeString:3 value:self.message];
  }
  [self.connectionsArray enumerateObjectsUsingBlock:^(BConnection *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserID) {
    size_ += computeStringSize(1, self.userID);
  }
  if (self.hasConnectionID) {
    size_ += computeStringSize(2, self.connectionID);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(3, self.message);
  }
  [self.connectionsArray enumerateObjectsUsingBlock:^(BConnection *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BAcceptConnectionResponse*) parseFromData:(NSData*) data {
  return (BAcceptConnectionResponse*)[[[BAcceptConnectionResponse builder] mergeFromData:data] build];
}
+ (BAcceptConnectionResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAcceptConnectionResponse*)[[[BAcceptConnectionResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BAcceptConnectionResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BAcceptConnectionResponse*)[[[BAcceptConnectionResponse builder] mergeFromInputStream:input] build];
}
+ (BAcceptConnectionResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAcceptConnectionResponse*)[[[BAcceptConnectionResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAcceptConnectionResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BAcceptConnectionResponse*)[[[BAcceptConnectionResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BAcceptConnectionResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAcceptConnectionResponse*)[[[BAcceptConnectionResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAcceptConnectionResponseBuilder*) builder {
  return [[BAcceptConnectionResponseBuilder alloc] init];
}
+ (BAcceptConnectionResponseBuilder*) builderWithPrototype:(BAcceptConnectionResponse*) prototype {
  return [[BAcceptConnectionResponse builder] mergeFrom:prototype];
}
- (BAcceptConnectionResponseBuilder*) builder {
  return [BAcceptConnectionResponse builder];
}
- (BAcceptConnectionResponseBuilder*) toBuilder {
  return [BAcceptConnectionResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userID", self.userID];
  }
  if (self.hasConnectionID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"connectionID", self.connectionID];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  [self.connectionsArray enumerateObjectsUsingBlock:^(BConnection *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"connections"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"profiles"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserID) {
    [dictionary setObject: self.userID forKey: @"userID"];
  }
  if (self.hasConnectionID) {
    [dictionary setObject: self.connectionID forKey: @"connectionID"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  for (BConnection* element in self.connectionsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"connections"];
  }
  for (BUserProfile* element in self.profilesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"profiles"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BAcceptConnectionResponse class]]) {
    return NO;
  }
  BAcceptConnectionResponse *otherMessage = other;
  return
      self.hasUserID == otherMessage.hasUserID &&
      (!self.hasUserID || [self.userID isEqual:otherMessage.userID]) &&
      self.hasConnectionID == otherMessage.hasConnectionID &&
      (!self.hasConnectionID || [self.connectionID isEqual:otherMessage.connectionID]) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      [self.connectionsArray isEqualToArray:otherMessage.connectionsArray] &&
      [self.profilesArray isEqualToArray:otherMessage.profilesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserID) {
    hashCode = hashCode * 31 + [self.userID hash];
  }
  if (self.hasConnectionID) {
    hashCode = hashCode * 31 + [self.connectionID hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  [self.connectionsArray enumerateObjectsUsingBlock:^(BConnection *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BAcceptConnectionResponseBuilder()
@property (strong) BAcceptConnectionResponse* resultAcceptConnectionResponse;
@end

@implementation BAcceptConnectionResponseBuilder
@synthesize resultAcceptConnectionResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAcceptConnectionResponse = [[BAcceptConnectionResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAcceptConnectionResponse;
}
- (BAcceptConnectionResponseBuilder*) clear {
  self.resultAcceptConnectionResponse = [[BAcceptConnectionResponse alloc] init];
  return self;
}
- (BAcceptConnectionResponseBuilder*) clone {
  return [BAcceptConnectionResponse builderWithPrototype:resultAcceptConnectionResponse];
}
- (BAcceptConnectionResponse*) defaultInstance {
  return [BAcceptConnectionResponse defaultInstance];
}
- (BAcceptConnectionResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BAcceptConnectionResponse*) buildPartial {
  BAcceptConnectionResponse* returnMe = resultAcceptConnectionResponse;
  self.resultAcceptConnectionResponse = nil;
  return returnMe;
}
- (BAcceptConnectionResponseBuilder*) mergeFrom:(BAcceptConnectionResponse*) other {
  if (other == [BAcceptConnectionResponse defaultInstance]) {
    return self;
  }
  if (other.hasUserID) {
    [self setUserID:other.userID];
  }
  if (other.hasConnectionID) {
    [self setConnectionID:other.connectionID];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.connectionsArray.count > 0) {
    if (resultAcceptConnectionResponse.connectionsArray == nil) {
      resultAcceptConnectionResponse.connectionsArray = [[NSMutableArray alloc] initWithArray:other.connectionsArray];
    } else {
      [resultAcceptConnectionResponse.connectionsArray addObjectsFromArray:other.connectionsArray];
    }
  }
  if (other.profilesArray.count > 0) {
    if (resultAcceptConnectionResponse.profilesArray == nil) {
      resultAcceptConnectionResponse.profilesArray = [[NSMutableArray alloc] initWithArray:other.profilesArray];
    } else {
      [resultAcceptConnectionResponse.profilesArray addObjectsFromArray:other.profilesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BAcceptConnectionResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BAcceptConnectionResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserID:[input readString]];
        break;
      }
      case 18: {
        [self setConnectionID:[input readString]];
        break;
      }
      case 26: {
        [self setMessage:[input readString]];
        break;
      }
      case 34: {
        BConnectionBuilder* subBuilder = [BConnection builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addConnections:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        BUserProfileBuilder* subBuilder = [BUserProfile builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProfiles:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserID {
  return resultAcceptConnectionResponse.hasUserID;
}
- (NSString*) userID {
  return resultAcceptConnectionResponse.userID;
}
- (BAcceptConnectionResponseBuilder*) setUserID:(NSString*) value {
  resultAcceptConnectionResponse.hasUserID = YES;
  resultAcceptConnectionResponse.userID = value;
  return self;
}
- (BAcceptConnectionResponseBuilder*) clearUserID {
  resultAcceptConnectionResponse.hasUserID = NO;
  resultAcceptConnectionResponse.userID = @"";
  return self;
}
- (BOOL) hasConnectionID {
  return resultAcceptConnectionResponse.hasConnectionID;
}
- (NSString*) connectionID {
  return resultAcceptConnectionResponse.connectionID;
}
- (BAcceptConnectionResponseBuilder*) setConnectionID:(NSString*) value {
  resultAcceptConnectionResponse.hasConnectionID = YES;
  resultAcceptConnectionResponse.connectionID = value;
  return self;
}
- (BAcceptConnectionResponseBuilder*) clearConnectionID {
  resultAcceptConnectionResponse.hasConnectionID = NO;
  resultAcceptConnectionResponse.connectionID = @"";
  return self;
}
- (BOOL) hasMessage {
  return resultAcceptConnectionResponse.hasMessage;
}
- (NSString*) message {
  return resultAcceptConnectionResponse.message;
}
- (BAcceptConnectionResponseBuilder*) setMessage:(NSString*) value {
  resultAcceptConnectionResponse.hasMessage = YES;
  resultAcceptConnectionResponse.message = value;
  return self;
}
- (BAcceptConnectionResponseBuilder*) clearMessage {
  resultAcceptConnectionResponse.hasMessage = NO;
  resultAcceptConnectionResponse.message = @"";
  return self;
}
- (NSMutableArray *)connections {
  return resultAcceptConnectionResponse.connectionsArray;
}
- (BConnection*)connectionsAtIndex:(NSUInteger)index {
  return [resultAcceptConnectionResponse connectionsAtIndex:index];
}
- (BAcceptConnectionResponseBuilder *)addConnections:(BConnection*)value {
  if (resultAcceptConnectionResponse.connectionsArray == nil) {
    resultAcceptConnectionResponse.connectionsArray = [[NSMutableArray alloc]init];
  }
  [resultAcceptConnectionResponse.connectionsArray addObject:value];
  return self;
}
- (BAcceptConnectionResponseBuilder *)setConnectionsArray:(NSArray *)array {
  resultAcceptConnectionResponse.connectionsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BAcceptConnectionResponseBuilder *)clearConnections {
  resultAcceptConnectionResponse.connectionsArray = nil;
  return self;
}
- (NSMutableArray *)profiles {
  return resultAcceptConnectionResponse.profilesArray;
}
- (BUserProfile*)profilesAtIndex:(NSUInteger)index {
  return [resultAcceptConnectionResponse profilesAtIndex:index];
}
- (BAcceptConnectionResponseBuilder *)addProfiles:(BUserProfile*)value {
  if (resultAcceptConnectionResponse.profilesArray == nil) {
    resultAcceptConnectionResponse.profilesArray = [[NSMutableArray alloc]init];
  }
  [resultAcceptConnectionResponse.profilesArray addObject:value];
  return self;
}
- (BAcceptConnectionResponseBuilder *)setProfilesArray:(NSArray *)array {
  resultAcceptConnectionResponse.profilesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BAcceptConnectionResponseBuilder *)clearProfiles {
  resultAcceptConnectionResponse.profilesArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
