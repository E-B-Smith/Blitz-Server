// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Feed.pb.h"
// @@protoc_insertion_point(imports)

@implementation BFeedRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BFeedRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    [BTypesRoot registerAllExtensions:registry];
    [BEntityTagsRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL BFeedPostTypeIsValidValue(BFeedPostType value) {
  switch (value) {
    case BFeedPostTypeFPUnknown:
    case BFeedPostTypeFPOpenEndedQuestion:
    case BFeedPostTypeFPOpenEndedReply:
    case BFeedPostTypeFPSurveyQuestion:
    case BFeedPostTypeFPSurveyAnswer:
    case BFeedPostTypeFPWantedQuestion:
    case BFeedPostTypeFPWantedAnswer:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBFeedPostType(BFeedPostType value) {
  switch (value) {
    case BFeedPostTypeFPUnknown:
      return @"BFeedPostTypeFPUnknown";
    case BFeedPostTypeFPOpenEndedQuestion:
      return @"BFeedPostTypeFPOpenEndedQuestion";
    case BFeedPostTypeFPOpenEndedReply:
      return @"BFeedPostTypeFPOpenEndedReply";
    case BFeedPostTypeFPSurveyQuestion:
      return @"BFeedPostTypeFPSurveyQuestion";
    case BFeedPostTypeFPSurveyAnswer:
      return @"BFeedPostTypeFPSurveyAnswer";
    case BFeedPostTypeFPWantedQuestion:
      return @"BFeedPostTypeFPWantedQuestion";
    case BFeedPostTypeFPWantedAnswer:
      return @"BFeedPostTypeFPWantedAnswer";
    default:
      return nil;
  }
}

BOOL BFeedPostScopeIsValidValue(BFeedPostScope value) {
  switch (value) {
    case BFeedPostScopeFPScopeUnknown:
    case BFeedPostScopeFPScopeLocalNetwork:
    case BFeedPostScopeFPScopeGlobalNetwork:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBFeedPostScope(BFeedPostScope value) {
  switch (value) {
    case BFeedPostScopeFPScopeUnknown:
      return @"BFeedPostScopeFPScopeUnknown";
    case BFeedPostScopeFPScopeLocalNetwork:
      return @"BFeedPostScopeFPScopeLocalNetwork";
    case BFeedPostScopeFPScopeGlobalNetwork:
      return @"BFeedPostScopeFPScopeGlobalNetwork";
    default:
      return nil;
  }
}

BOOL BFeedPostStatusIsValidValue(BFeedPostStatus value) {
  switch (value) {
    case BFeedPostStatusFPSUnknown:
    case BFeedPostStatusFPSActive:
    case BFeedPostStatusFPSDeleted:
    case BFeedPostStatusFPSAnswered:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBFeedPostStatus(BFeedPostStatus value) {
  switch (value) {
    case BFeedPostStatusFPSUnknown:
      return @"BFeedPostStatusFPSUnknown";
    case BFeedPostStatusFPSActive:
      return @"BFeedPostStatusFPSActive";
    case BFeedPostStatusFPSDeleted:
      return @"BFeedPostStatusFPSDeleted";
    case BFeedPostStatusFPSAnswered:
      return @"BFeedPostStatusFPSAnswered";
    default:
      return nil;
  }
}

BOOL BUpdateVerbIsValidValue(BUpdateVerb value) {
  switch (value) {
    case BUpdateVerbUVCreate:
    case BUpdateVerbUVUpdate:
    case BUpdateVerbUVDelete:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBUpdateVerb(BUpdateVerb value) {
  switch (value) {
    case BUpdateVerbUVCreate:
      return @"BUpdateVerbUVCreate";
    case BUpdateVerbUVUpdate:
      return @"BUpdateVerbUVUpdate";
    case BUpdateVerbUVDelete:
      return @"BUpdateVerbUVDelete";
    default:
      return nil;
  }
}

@interface BFeedPanelMember ()
@property (strong) NSString* userID;
@property (strong) NSString* bountyAmount;
@property (strong) BTimestamp* dateAnswered;
@end

@implementation BFeedPanelMember

- (BOOL) hasUserID {
  return !!hasUserID_;
}
- (void) setHasUserID:(BOOL) _value_ {
  hasUserID_ = !!_value_;
}
@synthesize userID;
- (BOOL) hasBountyAmount {
  return !!hasBountyAmount_;
}
- (void) setHasBountyAmount:(BOOL) _value_ {
  hasBountyAmount_ = !!_value_;
}
@synthesize bountyAmount;
- (BOOL) hasDateAnswered {
  return !!hasDateAnswered_;
}
- (void) setHasDateAnswered:(BOOL) _value_ {
  hasDateAnswered_ = !!_value_;
}
@synthesize dateAnswered;
- (instancetype) init {
  if ((self = [super init])) {
    self.userID = @"";
    self.bountyAmount = @"";
    self.dateAnswered = [BTimestamp defaultInstance];
  }
  return self;
}
static BFeedPanelMember* defaultBFeedPanelMemberInstance = nil;
+ (void) initialize {
  if (self == [BFeedPanelMember class]) {
    defaultBFeedPanelMemberInstance = [[BFeedPanelMember alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBFeedPanelMemberInstance;
}
- (instancetype) defaultInstance {
  return defaultBFeedPanelMemberInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserID) {
    [output writeString:1 value:self.userID];
  }
  if (self.hasBountyAmount) {
    [output writeString:2 value:self.bountyAmount];
  }
  if (self.hasDateAnswered) {
    [output writeMessage:3 value:self.dateAnswered];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserID) {
    size_ += computeStringSize(1, self.userID);
  }
  if (self.hasBountyAmount) {
    size_ += computeStringSize(2, self.bountyAmount);
  }
  if (self.hasDateAnswered) {
    size_ += computeMessageSize(3, self.dateAnswered);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BFeedPanelMember*) parseFromData:(NSData*) data {
  return (BFeedPanelMember*)[[[BFeedPanelMember builder] mergeFromData:data] build];
}
+ (BFeedPanelMember*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFeedPanelMember*)[[[BFeedPanelMember builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BFeedPanelMember*) parseFromInputStream:(NSInputStream*) input {
  return (BFeedPanelMember*)[[[BFeedPanelMember builder] mergeFromInputStream:input] build];
}
+ (BFeedPanelMember*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFeedPanelMember*)[[[BFeedPanelMember builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BFeedPanelMember*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BFeedPanelMember*)[[[BFeedPanelMember builder] mergeFromCodedInputStream:input] build];
}
+ (BFeedPanelMember*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFeedPanelMember*)[[[BFeedPanelMember builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BFeedPanelMemberBuilder*) builder {
  return [[BFeedPanelMemberBuilder alloc] init];
}
+ (BFeedPanelMemberBuilder*) builderWithPrototype:(BFeedPanelMember*) prototype {
  return [[BFeedPanelMember builder] mergeFrom:prototype];
}
- (BFeedPanelMemberBuilder*) builder {
  return [BFeedPanelMember builder];
}
- (BFeedPanelMemberBuilder*) toBuilder {
  return [BFeedPanelMember builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userID", self.userID];
  }
  if (self.hasBountyAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bountyAmount", self.bountyAmount];
  }
  if (self.hasDateAnswered) {
    [output appendFormat:@"%@%@ {\n", indent, @"dateAnswered"];
    [self.dateAnswered writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserID) {
    [dictionary setObject: self.userID forKey: @"userID"];
  }
  if (self.hasBountyAmount) {
    [dictionary setObject: self.bountyAmount forKey: @"bountyAmount"];
  }
  if (self.hasDateAnswered) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.dateAnswered storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"dateAnswered"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BFeedPanelMember class]]) {
    return NO;
  }
  BFeedPanelMember *otherMessage = other;
  return
      self.hasUserID == otherMessage.hasUserID &&
      (!self.hasUserID || [self.userID isEqual:otherMessage.userID]) &&
      self.hasBountyAmount == otherMessage.hasBountyAmount &&
      (!self.hasBountyAmount || [self.bountyAmount isEqual:otherMessage.bountyAmount]) &&
      self.hasDateAnswered == otherMessage.hasDateAnswered &&
      (!self.hasDateAnswered || [self.dateAnswered isEqual:otherMessage.dateAnswered]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserID) {
    hashCode = hashCode * 31 + [self.userID hash];
  }
  if (self.hasBountyAmount) {
    hashCode = hashCode * 31 + [self.bountyAmount hash];
  }
  if (self.hasDateAnswered) {
    hashCode = hashCode * 31 + [self.dateAnswered hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BFeedPanelMemberBuilder()
@property (strong) BFeedPanelMember* resultFeedPanelMember;
@end

@implementation BFeedPanelMemberBuilder
@synthesize resultFeedPanelMember;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFeedPanelMember = [[BFeedPanelMember alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFeedPanelMember;
}
- (BFeedPanelMemberBuilder*) clear {
  self.resultFeedPanelMember = [[BFeedPanelMember alloc] init];
  return self;
}
- (BFeedPanelMemberBuilder*) clone {
  return [BFeedPanelMember builderWithPrototype:resultFeedPanelMember];
}
- (BFeedPanelMember*) defaultInstance {
  return [BFeedPanelMember defaultInstance];
}
- (BFeedPanelMember*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BFeedPanelMember*) buildPartial {
  BFeedPanelMember* returnMe = resultFeedPanelMember;
  self.resultFeedPanelMember = nil;
  return returnMe;
}
- (BFeedPanelMemberBuilder*) mergeFrom:(BFeedPanelMember*) other {
  if (other == [BFeedPanelMember defaultInstance]) {
    return self;
  }
  if (other.hasUserID) {
    [self setUserID:other.userID];
  }
  if (other.hasBountyAmount) {
    [self setBountyAmount:other.bountyAmount];
  }
  if (other.hasDateAnswered) {
    [self mergeDateAnswered:other.dateAnswered];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BFeedPanelMemberBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BFeedPanelMemberBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserID:[input readString]];
        break;
      }
      case 18: {
        [self setBountyAmount:[input readString]];
        break;
      }
      case 26: {
        BTimestampBuilder* subBuilder = [BTimestamp builder];
        if (self.hasDateAnswered) {
          [subBuilder mergeFrom:self.dateAnswered];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDateAnswered:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserID {
  return resultFeedPanelMember.hasUserID;
}
- (NSString*) userID {
  return resultFeedPanelMember.userID;
}
- (BFeedPanelMemberBuilder*) setUserID:(NSString*) value {
  resultFeedPanelMember.hasUserID = YES;
  resultFeedPanelMember.userID = value;
  return self;
}
- (BFeedPanelMemberBuilder*) clearUserID {
  resultFeedPanelMember.hasUserID = NO;
  resultFeedPanelMember.userID = @"";
  return self;
}
- (BOOL) hasBountyAmount {
  return resultFeedPanelMember.hasBountyAmount;
}
- (NSString*) bountyAmount {
  return resultFeedPanelMember.bountyAmount;
}
- (BFeedPanelMemberBuilder*) setBountyAmount:(NSString*) value {
  resultFeedPanelMember.hasBountyAmount = YES;
  resultFeedPanelMember.bountyAmount = value;
  return self;
}
- (BFeedPanelMemberBuilder*) clearBountyAmount {
  resultFeedPanelMember.hasBountyAmount = NO;
  resultFeedPanelMember.bountyAmount = @"";
  return self;
}
- (BOOL) hasDateAnswered {
  return resultFeedPanelMember.hasDateAnswered;
}
- (BTimestamp*) dateAnswered {
  return resultFeedPanelMember.dateAnswered;
}
- (BFeedPanelMemberBuilder*) setDateAnswered:(BTimestamp*) value {
  resultFeedPanelMember.hasDateAnswered = YES;
  resultFeedPanelMember.dateAnswered = value;
  return self;
}
- (BFeedPanelMemberBuilder*) setDateAnsweredBuilder:(BTimestampBuilder*) builderForValue {
  return [self setDateAnswered:[builderForValue build]];
}
- (BFeedPanelMemberBuilder*) mergeDateAnswered:(BTimestamp*) value {
  if (resultFeedPanelMember.hasDateAnswered &&
      resultFeedPanelMember.dateAnswered != [BTimestamp defaultInstance]) {
    resultFeedPanelMember.dateAnswered =
      [[[BTimestamp builderWithPrototype:resultFeedPanelMember.dateAnswered] mergeFrom:value] buildPartial];
  } else {
    resultFeedPanelMember.dateAnswered = value;
  }
  resultFeedPanelMember.hasDateAnswered = YES;
  return self;
}
- (BFeedPanelMemberBuilder*) clearDateAnswered {
  resultFeedPanelMember.hasDateAnswered = NO;
  resultFeedPanelMember.dateAnswered = [BTimestamp defaultInstance];
  return self;
}
@end

@interface BFeedPost ()
@property (strong) NSString* postID;
@property (strong) NSString* parentID;
@property BFeedPostType postType;
@property BFeedPostScope postScope;
@property (strong) NSString* userID;
@property BOOL anonymousPost;
@property (strong) BTimestamp* timestamp;
@property (strong) BTimespan* timespanActive;
@property (strong) NSString* headlineText;
@property (strong) NSString* bodyText;
@property (strong) NSMutableArray * postTagsArray;
@property (strong) NSMutableArray * repliesDeprecatedArray;
@property BOOL mayAddReply;
@property BOOL mayChooseMulitpleReplies;
@property SInt32 surveyAnswerSequence;
@property BOOL areMoreReplies;
@property SInt32 totalVoteCount;
@property (strong) NSString* amountPerReply;
@property (strong) NSString* amountTotal;
@property (strong) NSMutableArray * panelUserIDsDeprecatedArray;
@property (strong) NSMutableArray * panelArray;
@end

@implementation BFeedPost

- (BOOL) hasPostID {
  return !!hasPostID_;
}
- (void) setHasPostID:(BOOL) _value_ {
  hasPostID_ = !!_value_;
}
@synthesize postID;
- (BOOL) hasParentID {
  return !!hasParentID_;
}
- (void) setHasParentID:(BOOL) _value_ {
  hasParentID_ = !!_value_;
}
@synthesize parentID;
- (BOOL) hasPostType {
  return !!hasPostType_;
}
- (void) setHasPostType:(BOOL) _value_ {
  hasPostType_ = !!_value_;
}
@synthesize postType;
- (BOOL) hasPostScope {
  return !!hasPostScope_;
}
- (void) setHasPostScope:(BOOL) _value_ {
  hasPostScope_ = !!_value_;
}
@synthesize postScope;
- (BOOL) hasUserID {
  return !!hasUserID_;
}
- (void) setHasUserID:(BOOL) _value_ {
  hasUserID_ = !!_value_;
}
@synthesize userID;
- (BOOL) hasAnonymousPost {
  return !!hasAnonymousPost_;
}
- (void) setHasAnonymousPost:(BOOL) _value_ {
  hasAnonymousPost_ = !!_value_;
}
- (BOOL) anonymousPost {
  return !!anonymousPost_;
}
- (void) setAnonymousPost:(BOOL) _value_ {
  anonymousPost_ = !!_value_;
}
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasTimespanActive {
  return !!hasTimespanActive_;
}
- (void) setHasTimespanActive:(BOOL) _value_ {
  hasTimespanActive_ = !!_value_;
}
@synthesize timespanActive;
- (BOOL) hasHeadlineText {
  return !!hasHeadlineText_;
}
- (void) setHasHeadlineText:(BOOL) _value_ {
  hasHeadlineText_ = !!_value_;
}
@synthesize headlineText;
- (BOOL) hasBodyText {
  return !!hasBodyText_;
}
- (void) setHasBodyText:(BOOL) _value_ {
  hasBodyText_ = !!_value_;
}
@synthesize bodyText;
@synthesize postTagsArray;
@dynamic postTags;
@synthesize repliesDeprecatedArray;
@dynamic repliesDeprecated;
- (BOOL) hasMayAddReply {
  return !!hasMayAddReply_;
}
- (void) setHasMayAddReply:(BOOL) _value_ {
  hasMayAddReply_ = !!_value_;
}
- (BOOL) mayAddReply {
  return !!mayAddReply_;
}
- (void) setMayAddReply:(BOOL) _value_ {
  mayAddReply_ = !!_value_;
}
- (BOOL) hasMayChooseMulitpleReplies {
  return !!hasMayChooseMulitpleReplies_;
}
- (void) setHasMayChooseMulitpleReplies:(BOOL) _value_ {
  hasMayChooseMulitpleReplies_ = !!_value_;
}
- (BOOL) mayChooseMulitpleReplies {
  return !!mayChooseMulitpleReplies_;
}
- (void) setMayChooseMulitpleReplies:(BOOL) _value_ {
  mayChooseMulitpleReplies_ = !!_value_;
}
- (BOOL) hasSurveyAnswerSequence {
  return !!hasSurveyAnswerSequence_;
}
- (void) setHasSurveyAnswerSequence:(BOOL) _value_ {
  hasSurveyAnswerSequence_ = !!_value_;
}
@synthesize surveyAnswerSequence;
- (BOOL) hasAreMoreReplies {
  return !!hasAreMoreReplies_;
}
- (void) setHasAreMoreReplies:(BOOL) _value_ {
  hasAreMoreReplies_ = !!_value_;
}
- (BOOL) areMoreReplies {
  return !!areMoreReplies_;
}
- (void) setAreMoreReplies:(BOOL) _value_ {
  areMoreReplies_ = !!_value_;
}
- (BOOL) hasTotalVoteCount {
  return !!hasTotalVoteCount_;
}
- (void) setHasTotalVoteCount:(BOOL) _value_ {
  hasTotalVoteCount_ = !!_value_;
}
@synthesize totalVoteCount;
- (BOOL) hasAmountPerReply {
  return !!hasAmountPerReply_;
}
- (void) setHasAmountPerReply:(BOOL) _value_ {
  hasAmountPerReply_ = !!_value_;
}
@synthesize amountPerReply;
- (BOOL) hasAmountTotal {
  return !!hasAmountTotal_;
}
- (void) setHasAmountTotal:(BOOL) _value_ {
  hasAmountTotal_ = !!_value_;
}
@synthesize amountTotal;
@synthesize panelUserIDsDeprecatedArray;
@dynamic panelUserIDsDeprecated;
@synthesize panelArray;
@dynamic panel;
- (instancetype) init {
  if ((self = [super init])) {
    self.postID = @"";
    self.parentID = @"";
    self.postType = BFeedPostTypeFPUnknown;
    self.postScope = BFeedPostScopeFPScopeUnknown;
    self.userID = @"";
    self.anonymousPost = NO;
    self.timestamp = [BTimestamp defaultInstance];
    self.timespanActive = [BTimespan defaultInstance];
    self.headlineText = @"";
    self.bodyText = @"";
    self.mayAddReply = NO;
    self.mayChooseMulitpleReplies = NO;
    self.surveyAnswerSequence = 0;
    self.areMoreReplies = NO;
    self.totalVoteCount = 0;
    self.amountPerReply = @"";
    self.amountTotal = @"";
  }
  return self;
}
static BFeedPost* defaultBFeedPostInstance = nil;
+ (void) initialize {
  if (self == [BFeedPost class]) {
    defaultBFeedPostInstance = [[BFeedPost alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBFeedPostInstance;
}
- (instancetype) defaultInstance {
  return defaultBFeedPostInstance;
}
- (NSArray *)postTags {
  return postTagsArray;
}
- (BEntityTag*)postTagsAtIndex:(NSUInteger)index {
  return [postTagsArray objectAtIndex:index];
}
- (NSArray *)repliesDeprecated {
  return repliesDeprecatedArray;
}
- (BFeedPost*)repliesDeprecatedAtIndex:(NSUInteger)index {
  return [repliesDeprecatedArray objectAtIndex:index];
}
- (NSArray *)panelUserIDsDeprecated {
  return panelUserIDsDeprecatedArray;
}
- (NSString*)panelUserIDsDeprecatedAtIndex:(NSUInteger)index {
  return [panelUserIDsDeprecatedArray objectAtIndex:index];
}
- (NSArray *)panel {
  return panelArray;
}
- (BFeedPanelMember*)panelAtIndex:(NSUInteger)index {
  return [panelArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPostID) {
    [output writeString:1 value:self.postID];
  }
  if (self.hasParentID) {
    [output writeString:2 value:self.parentID];
  }
  if (self.hasPostType) {
    [output writeEnum:3 value:self.postType];
  }
  if (self.hasPostScope) {
    [output writeEnum:4 value:self.postScope];
  }
  if (self.hasUserID) {
    [output writeString:5 value:self.userID];
  }
  if (self.hasAnonymousPost) {
    [output writeBool:6 value:self.anonymousPost];
  }
  if (self.hasTimestamp) {
    [output writeMessage:7 value:self.timestamp];
  }
  if (self.hasTimespanActive) {
    [output writeMessage:8 value:self.timespanActive];
  }
  if (self.hasHeadlineText) {
    [output writeString:9 value:self.headlineText];
  }
  if (self.hasBodyText) {
    [output writeString:10 value:self.bodyText];
  }
  [self.postTagsArray enumerateObjectsUsingBlock:^(BEntityTag *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:12 value:element];
  }];
  [self.repliesDeprecatedArray enumerateObjectsUsingBlock:^(BFeedPost *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:13 value:element];
  }];
  if (self.hasMayAddReply) {
    [output writeBool:14 value:self.mayAddReply];
  }
  if (self.hasMayChooseMulitpleReplies) {
    [output writeBool:15 value:self.mayChooseMulitpleReplies];
  }
  if (self.hasSurveyAnswerSequence) {
    [output writeInt32:16 value:self.surveyAnswerSequence];
  }
  if (self.hasAreMoreReplies) {
    [output writeBool:17 value:self.areMoreReplies];
  }
  if (self.hasTotalVoteCount) {
    [output writeInt32:18 value:self.totalVoteCount];
  }
  if (self.hasAmountPerReply) {
    [output writeString:19 value:self.amountPerReply];
  }
  if (self.hasAmountTotal) {
    [output writeString:20 value:self.amountTotal];
  }
  [self.panelUserIDsDeprecatedArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:21 value:element];
  }];
  [self.panelArray enumerateObjectsUsingBlock:^(BFeedPanelMember *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:22 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPostID) {
    size_ += computeStringSize(1, self.postID);
  }
  if (self.hasParentID) {
    size_ += computeStringSize(2, self.parentID);
  }
  if (self.hasPostType) {
    size_ += computeEnumSize(3, self.postType);
  }
  if (self.hasPostScope) {
    size_ += computeEnumSize(4, self.postScope);
  }
  if (self.hasUserID) {
    size_ += computeStringSize(5, self.userID);
  }
  if (self.hasAnonymousPost) {
    size_ += computeBoolSize(6, self.anonymousPost);
  }
  if (self.hasTimestamp) {
    size_ += computeMessageSize(7, self.timestamp);
  }
  if (self.hasTimespanActive) {
    size_ += computeMessageSize(8, self.timespanActive);
  }
  if (self.hasHeadlineText) {
    size_ += computeStringSize(9, self.headlineText);
  }
  if (self.hasBodyText) {
    size_ += computeStringSize(10, self.bodyText);
  }
  [self.postTagsArray enumerateObjectsUsingBlock:^(BEntityTag *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(12, element);
  }];
  [self.repliesDeprecatedArray enumerateObjectsUsingBlock:^(BFeedPost *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(13, element);
  }];
  if (self.hasMayAddReply) {
    size_ += computeBoolSize(14, self.mayAddReply);
  }
  if (self.hasMayChooseMulitpleReplies) {
    size_ += computeBoolSize(15, self.mayChooseMulitpleReplies);
  }
  if (self.hasSurveyAnswerSequence) {
    size_ += computeInt32Size(16, self.surveyAnswerSequence);
  }
  if (self.hasAreMoreReplies) {
    size_ += computeBoolSize(17, self.areMoreReplies);
  }
  if (self.hasTotalVoteCount) {
    size_ += computeInt32Size(18, self.totalVoteCount);
  }
  if (self.hasAmountPerReply) {
    size_ += computeStringSize(19, self.amountPerReply);
  }
  if (self.hasAmountTotal) {
    size_ += computeStringSize(20, self.amountTotal);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.panelUserIDsDeprecatedArray.count;
    [self.panelUserIDsDeprecatedArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  [self.panelArray enumerateObjectsUsingBlock:^(BFeedPanelMember *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(22, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BFeedPost*) parseFromData:(NSData*) data {
  return (BFeedPost*)[[[BFeedPost builder] mergeFromData:data] build];
}
+ (BFeedPost*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFeedPost*)[[[BFeedPost builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BFeedPost*) parseFromInputStream:(NSInputStream*) input {
  return (BFeedPost*)[[[BFeedPost builder] mergeFromInputStream:input] build];
}
+ (BFeedPost*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFeedPost*)[[[BFeedPost builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BFeedPost*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BFeedPost*)[[[BFeedPost builder] mergeFromCodedInputStream:input] build];
}
+ (BFeedPost*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFeedPost*)[[[BFeedPost builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BFeedPostBuilder*) builder {
  return [[BFeedPostBuilder alloc] init];
}
+ (BFeedPostBuilder*) builderWithPrototype:(BFeedPost*) prototype {
  return [[BFeedPost builder] mergeFrom:prototype];
}
- (BFeedPostBuilder*) builder {
  return [BFeedPost builder];
}
- (BFeedPostBuilder*) toBuilder {
  return [BFeedPost builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPostID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"postID", self.postID];
  }
  if (self.hasParentID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parentID", self.parentID];
  }
  if (self.hasPostType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"postType", NSStringFromBFeedPostType(self.postType)];
  }
  if (self.hasPostScope) {
    [output appendFormat:@"%@%@: %@\n", indent, @"postScope", NSStringFromBFeedPostScope(self.postScope)];
  }
  if (self.hasUserID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userID", self.userID];
  }
  if (self.hasAnonymousPost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"anonymousPost", [NSNumber numberWithBool:self.anonymousPost]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@ {\n", indent, @"timestamp"];
    [self.timestamp writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTimespanActive) {
    [output appendFormat:@"%@%@ {\n", indent, @"timespanActive"];
    [self.timespanActive writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasHeadlineText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"headlineText", self.headlineText];
  }
  if (self.hasBodyText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bodyText", self.bodyText];
  }
  [self.postTagsArray enumerateObjectsUsingBlock:^(BEntityTag *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"postTags"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.repliesDeprecatedArray enumerateObjectsUsingBlock:^(BFeedPost *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repliesDeprecated"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasMayAddReply) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mayAddReply", [NSNumber numberWithBool:self.mayAddReply]];
  }
  if (self.hasMayChooseMulitpleReplies) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mayChooseMulitpleReplies", [NSNumber numberWithBool:self.mayChooseMulitpleReplies]];
  }
  if (self.hasSurveyAnswerSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"surveyAnswerSequence", [NSNumber numberWithInteger:self.surveyAnswerSequence]];
  }
  if (self.hasAreMoreReplies) {
    [output appendFormat:@"%@%@: %@\n", indent, @"areMoreReplies", [NSNumber numberWithBool:self.areMoreReplies]];
  }
  if (self.hasTotalVoteCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalVoteCount", [NSNumber numberWithInteger:self.totalVoteCount]];
  }
  if (self.hasAmountPerReply) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amountPerReply", self.amountPerReply];
  }
  if (self.hasAmountTotal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amountTotal", self.amountTotal];
  }
  [self.panelUserIDsDeprecatedArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"panelUserIDsDeprecated", obj];
  }];
  [self.panelArray enumerateObjectsUsingBlock:^(BFeedPanelMember *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"panel"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPostID) {
    [dictionary setObject: self.postID forKey: @"postID"];
  }
  if (self.hasParentID) {
    [dictionary setObject: self.parentID forKey: @"parentID"];
  }
  if (self.hasPostType) {
    [dictionary setObject: @(self.postType) forKey: @"postType"];
  }
  if (self.hasPostScope) {
    [dictionary setObject: @(self.postScope) forKey: @"postScope"];
  }
  if (self.hasUserID) {
    [dictionary setObject: self.userID forKey: @"userID"];
  }
  if (self.hasAnonymousPost) {
    [dictionary setObject: [NSNumber numberWithBool:self.anonymousPost] forKey: @"anonymousPost"];
  }
  if (self.hasTimestamp) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.timestamp storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"timestamp"];
  }
  if (self.hasTimespanActive) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.timespanActive storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"timespanActive"];
  }
  if (self.hasHeadlineText) {
    [dictionary setObject: self.headlineText forKey: @"headlineText"];
  }
  if (self.hasBodyText) {
    [dictionary setObject: self.bodyText forKey: @"bodyText"];
  }
  for (BEntityTag* element in self.postTagsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"postTags"];
  }
  for (BFeedPost* element in self.repliesDeprecatedArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repliesDeprecated"];
  }
  if (self.hasMayAddReply) {
    [dictionary setObject: [NSNumber numberWithBool:self.mayAddReply] forKey: @"mayAddReply"];
  }
  if (self.hasMayChooseMulitpleReplies) {
    [dictionary setObject: [NSNumber numberWithBool:self.mayChooseMulitpleReplies] forKey: @"mayChooseMulitpleReplies"];
  }
  if (self.hasSurveyAnswerSequence) {
    [dictionary setObject: [NSNumber numberWithInteger:self.surveyAnswerSequence] forKey: @"surveyAnswerSequence"];
  }
  if (self.hasAreMoreReplies) {
    [dictionary setObject: [NSNumber numberWithBool:self.areMoreReplies] forKey: @"areMoreReplies"];
  }
  if (self.hasTotalVoteCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.totalVoteCount] forKey: @"totalVoteCount"];
  }
  if (self.hasAmountPerReply) {
    [dictionary setObject: self.amountPerReply forKey: @"amountPerReply"];
  }
  if (self.hasAmountTotal) {
    [dictionary setObject: self.amountTotal forKey: @"amountTotal"];
  }
  [dictionary setObject:self.panelUserIDsDeprecated forKey: @"panelUserIDsDeprecated"];
  for (BFeedPanelMember* element in self.panelArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"panel"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BFeedPost class]]) {
    return NO;
  }
  BFeedPost *otherMessage = other;
  return
      self.hasPostID == otherMessage.hasPostID &&
      (!self.hasPostID || [self.postID isEqual:otherMessage.postID]) &&
      self.hasParentID == otherMessage.hasParentID &&
      (!self.hasParentID || [self.parentID isEqual:otherMessage.parentID]) &&
      self.hasPostType == otherMessage.hasPostType &&
      (!self.hasPostType || self.postType == otherMessage.postType) &&
      self.hasPostScope == otherMessage.hasPostScope &&
      (!self.hasPostScope || self.postScope == otherMessage.postScope) &&
      self.hasUserID == otherMessage.hasUserID &&
      (!self.hasUserID || [self.userID isEqual:otherMessage.userID]) &&
      self.hasAnonymousPost == otherMessage.hasAnonymousPost &&
      (!self.hasAnonymousPost || self.anonymousPost == otherMessage.anonymousPost) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || [self.timestamp isEqual:otherMessage.timestamp]) &&
      self.hasTimespanActive == otherMessage.hasTimespanActive &&
      (!self.hasTimespanActive || [self.timespanActive isEqual:otherMessage.timespanActive]) &&
      self.hasHeadlineText == otherMessage.hasHeadlineText &&
      (!self.hasHeadlineText || [self.headlineText isEqual:otherMessage.headlineText]) &&
      self.hasBodyText == otherMessage.hasBodyText &&
      (!self.hasBodyText || [self.bodyText isEqual:otherMessage.bodyText]) &&
      [self.postTagsArray isEqualToArray:otherMessage.postTagsArray] &&
      [self.repliesDeprecatedArray isEqualToArray:otherMessage.repliesDeprecatedArray] &&
      self.hasMayAddReply == otherMessage.hasMayAddReply &&
      (!self.hasMayAddReply || self.mayAddReply == otherMessage.mayAddReply) &&
      self.hasMayChooseMulitpleReplies == otherMessage.hasMayChooseMulitpleReplies &&
      (!self.hasMayChooseMulitpleReplies || self.mayChooseMulitpleReplies == otherMessage.mayChooseMulitpleReplies) &&
      self.hasSurveyAnswerSequence == otherMessage.hasSurveyAnswerSequence &&
      (!self.hasSurveyAnswerSequence || self.surveyAnswerSequence == otherMessage.surveyAnswerSequence) &&
      self.hasAreMoreReplies == otherMessage.hasAreMoreReplies &&
      (!self.hasAreMoreReplies || self.areMoreReplies == otherMessage.areMoreReplies) &&
      self.hasTotalVoteCount == otherMessage.hasTotalVoteCount &&
      (!self.hasTotalVoteCount || self.totalVoteCount == otherMessage.totalVoteCount) &&
      self.hasAmountPerReply == otherMessage.hasAmountPerReply &&
      (!self.hasAmountPerReply || [self.amountPerReply isEqual:otherMessage.amountPerReply]) &&
      self.hasAmountTotal == otherMessage.hasAmountTotal &&
      (!self.hasAmountTotal || [self.amountTotal isEqual:otherMessage.amountTotal]) &&
      [self.panelUserIDsDeprecatedArray isEqualToArray:otherMessage.panelUserIDsDeprecatedArray] &&
      [self.panelArray isEqualToArray:otherMessage.panelArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPostID) {
    hashCode = hashCode * 31 + [self.postID hash];
  }
  if (self.hasParentID) {
    hashCode = hashCode * 31 + [self.parentID hash];
  }
  if (self.hasPostType) {
    hashCode = hashCode * 31 + self.postType;
  }
  if (self.hasPostScope) {
    hashCode = hashCode * 31 + self.postScope;
  }
  if (self.hasUserID) {
    hashCode = hashCode * 31 + [self.userID hash];
  }
  if (self.hasAnonymousPost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.anonymousPost] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [self.timestamp hash];
  }
  if (self.hasTimespanActive) {
    hashCode = hashCode * 31 + [self.timespanActive hash];
  }
  if (self.hasHeadlineText) {
    hashCode = hashCode * 31 + [self.headlineText hash];
  }
  if (self.hasBodyText) {
    hashCode = hashCode * 31 + [self.bodyText hash];
  }
  [self.postTagsArray enumerateObjectsUsingBlock:^(BEntityTag *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repliesDeprecatedArray enumerateObjectsUsingBlock:^(BFeedPost *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasMayAddReply) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.mayAddReply] hash];
  }
  if (self.hasMayChooseMulitpleReplies) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.mayChooseMulitpleReplies] hash];
  }
  if (self.hasSurveyAnswerSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.surveyAnswerSequence] hash];
  }
  if (self.hasAreMoreReplies) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.areMoreReplies] hash];
  }
  if (self.hasTotalVoteCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalVoteCount] hash];
  }
  if (self.hasAmountPerReply) {
    hashCode = hashCode * 31 + [self.amountPerReply hash];
  }
  if (self.hasAmountTotal) {
    hashCode = hashCode * 31 + [self.amountTotal hash];
  }
  [self.panelUserIDsDeprecatedArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.panelArray enumerateObjectsUsingBlock:^(BFeedPanelMember *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BFeedPostBuilder()
@property (strong) BFeedPost* resultFeedPost;
@end

@implementation BFeedPostBuilder
@synthesize resultFeedPost;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFeedPost = [[BFeedPost alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFeedPost;
}
- (BFeedPostBuilder*) clear {
  self.resultFeedPost = [[BFeedPost alloc] init];
  return self;
}
- (BFeedPostBuilder*) clone {
  return [BFeedPost builderWithPrototype:resultFeedPost];
}
- (BFeedPost*) defaultInstance {
  return [BFeedPost defaultInstance];
}
- (BFeedPost*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BFeedPost*) buildPartial {
  BFeedPost* returnMe = resultFeedPost;
  self.resultFeedPost = nil;
  return returnMe;
}
- (BFeedPostBuilder*) mergeFrom:(BFeedPost*) other {
  if (other == [BFeedPost defaultInstance]) {
    return self;
  }
  if (other.hasPostID) {
    [self setPostID:other.postID];
  }
  if (other.hasParentID) {
    [self setParentID:other.parentID];
  }
  if (other.hasPostType) {
    [self setPostType:other.postType];
  }
  if (other.hasPostScope) {
    [self setPostScope:other.postScope];
  }
  if (other.hasUserID) {
    [self setUserID:other.userID];
  }
  if (other.hasAnonymousPost) {
    [self setAnonymousPost:other.anonymousPost];
  }
  if (other.hasTimestamp) {
    [self mergeTimestamp:other.timestamp];
  }
  if (other.hasTimespanActive) {
    [self mergeTimespanActive:other.timespanActive];
  }
  if (other.hasHeadlineText) {
    [self setHeadlineText:other.headlineText];
  }
  if (other.hasBodyText) {
    [self setBodyText:other.bodyText];
  }
  if (other.postTagsArray.count > 0) {
    if (resultFeedPost.postTagsArray == nil) {
      resultFeedPost.postTagsArray = [[NSMutableArray alloc] initWithArray:other.postTagsArray];
    } else {
      [resultFeedPost.postTagsArray addObjectsFromArray:other.postTagsArray];
    }
  }
  if (other.repliesDeprecatedArray.count > 0) {
    if (resultFeedPost.repliesDeprecatedArray == nil) {
      resultFeedPost.repliesDeprecatedArray = [[NSMutableArray alloc] initWithArray:other.repliesDeprecatedArray];
    } else {
      [resultFeedPost.repliesDeprecatedArray addObjectsFromArray:other.repliesDeprecatedArray];
    }
  }
  if (other.hasMayAddReply) {
    [self setMayAddReply:other.mayAddReply];
  }
  if (other.hasMayChooseMulitpleReplies) {
    [self setMayChooseMulitpleReplies:other.mayChooseMulitpleReplies];
  }
  if (other.hasSurveyAnswerSequence) {
    [self setSurveyAnswerSequence:other.surveyAnswerSequence];
  }
  if (other.hasAreMoreReplies) {
    [self setAreMoreReplies:other.areMoreReplies];
  }
  if (other.hasTotalVoteCount) {
    [self setTotalVoteCount:other.totalVoteCount];
  }
  if (other.hasAmountPerReply) {
    [self setAmountPerReply:other.amountPerReply];
  }
  if (other.hasAmountTotal) {
    [self setAmountTotal:other.amountTotal];
  }
  if (other.panelUserIDsDeprecatedArray.count > 0) {
    if (resultFeedPost.panelUserIDsDeprecatedArray == nil) {
      resultFeedPost.panelUserIDsDeprecatedArray = [[NSMutableArray alloc] initWithArray:other.panelUserIDsDeprecatedArray];
    } else {
      [resultFeedPost.panelUserIDsDeprecatedArray addObjectsFromArray:other.panelUserIDsDeprecatedArray];
    }
  }
  if (other.panelArray.count > 0) {
    if (resultFeedPost.panelArray == nil) {
      resultFeedPost.panelArray = [[NSMutableArray alloc] initWithArray:other.panelArray];
    } else {
      [resultFeedPost.panelArray addObjectsFromArray:other.panelArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BFeedPostBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BFeedPostBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPostID:[input readString]];
        break;
      }
      case 18: {
        [self setParentID:[input readString]];
        break;
      }
      case 24: {
        BFeedPostType value = (BFeedPostType)[input readEnum];
        if (BFeedPostTypeIsValidValue(value)) {
          [self setPostType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        BFeedPostScope value = (BFeedPostScope)[input readEnum];
        if (BFeedPostScopeIsValidValue(value)) {
          [self setPostScope:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        [self setUserID:[input readString]];
        break;
      }
      case 48: {
        [self setAnonymousPost:[input readBool]];
        break;
      }
      case 58: {
        BTimestampBuilder* subBuilder = [BTimestamp builder];
        if (self.hasTimestamp) {
          [subBuilder mergeFrom:self.timestamp];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTimestamp:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        BTimespanBuilder* subBuilder = [BTimespan builder];
        if (self.hasTimespanActive) {
          [subBuilder mergeFrom:self.timespanActive];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTimespanActive:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        [self setHeadlineText:[input readString]];
        break;
      }
      case 82: {
        [self setBodyText:[input readString]];
        break;
      }
      case 98: {
        BEntityTagBuilder* subBuilder = [BEntityTag builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPostTags:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        BFeedPostBuilder* subBuilder = [BFeedPost builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepliesDeprecated:[subBuilder buildPartial]];
        break;
      }
      case 112: {
        [self setMayAddReply:[input readBool]];
        break;
      }
      case 120: {
        [self setMayChooseMulitpleReplies:[input readBool]];
        break;
      }
      case 128: {
        [self setSurveyAnswerSequence:[input readInt32]];
        break;
      }
      case 136: {
        [self setAreMoreReplies:[input readBool]];
        break;
      }
      case 144: {
        [self setTotalVoteCount:[input readInt32]];
        break;
      }
      case 154: {
        [self setAmountPerReply:[input readString]];
        break;
      }
      case 162: {
        [self setAmountTotal:[input readString]];
        break;
      }
      case 170: {
        [self addPanelUserIDsDeprecated:[input readString]];
        break;
      }
      case 178: {
        BFeedPanelMemberBuilder* subBuilder = [BFeedPanelMember builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPanel:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPostID {
  return resultFeedPost.hasPostID;
}
- (NSString*) postID {
  return resultFeedPost.postID;
}
- (BFeedPostBuilder*) setPostID:(NSString*) value {
  resultFeedPost.hasPostID = YES;
  resultFeedPost.postID = value;
  return self;
}
- (BFeedPostBuilder*) clearPostID {
  resultFeedPost.hasPostID = NO;
  resultFeedPost.postID = @"";
  return self;
}
- (BOOL) hasParentID {
  return resultFeedPost.hasParentID;
}
- (NSString*) parentID {
  return resultFeedPost.parentID;
}
- (BFeedPostBuilder*) setParentID:(NSString*) value {
  resultFeedPost.hasParentID = YES;
  resultFeedPost.parentID = value;
  return self;
}
- (BFeedPostBuilder*) clearParentID {
  resultFeedPost.hasParentID = NO;
  resultFeedPost.parentID = @"";
  return self;
}
- (BOOL) hasPostType {
  return resultFeedPost.hasPostType;
}
- (BFeedPostType) postType {
  return resultFeedPost.postType;
}
- (BFeedPostBuilder*) setPostType:(BFeedPostType) value {
  resultFeedPost.hasPostType = YES;
  resultFeedPost.postType = value;
  return self;
}
- (BFeedPostBuilder*) clearPostType {
  resultFeedPost.hasPostType = NO;
  resultFeedPost.postType = BFeedPostTypeFPUnknown;
  return self;
}
- (BOOL) hasPostScope {
  return resultFeedPost.hasPostScope;
}
- (BFeedPostScope) postScope {
  return resultFeedPost.postScope;
}
- (BFeedPostBuilder*) setPostScope:(BFeedPostScope) value {
  resultFeedPost.hasPostScope = YES;
  resultFeedPost.postScope = value;
  return self;
}
- (BFeedPostBuilder*) clearPostScope {
  resultFeedPost.hasPostScope = NO;
  resultFeedPost.postScope = BFeedPostScopeFPScopeUnknown;
  return self;
}
- (BOOL) hasUserID {
  return resultFeedPost.hasUserID;
}
- (NSString*) userID {
  return resultFeedPost.userID;
}
- (BFeedPostBuilder*) setUserID:(NSString*) value {
  resultFeedPost.hasUserID = YES;
  resultFeedPost.userID = value;
  return self;
}
- (BFeedPostBuilder*) clearUserID {
  resultFeedPost.hasUserID = NO;
  resultFeedPost.userID = @"";
  return self;
}
- (BOOL) hasAnonymousPost {
  return resultFeedPost.hasAnonymousPost;
}
- (BOOL) anonymousPost {
  return resultFeedPost.anonymousPost;
}
- (BFeedPostBuilder*) setAnonymousPost:(BOOL) value {
  resultFeedPost.hasAnonymousPost = YES;
  resultFeedPost.anonymousPost = value;
  return self;
}
- (BFeedPostBuilder*) clearAnonymousPost {
  resultFeedPost.hasAnonymousPost = NO;
  resultFeedPost.anonymousPost = NO;
  return self;
}
- (BOOL) hasTimestamp {
  return resultFeedPost.hasTimestamp;
}
- (BTimestamp*) timestamp {
  return resultFeedPost.timestamp;
}
- (BFeedPostBuilder*) setTimestamp:(BTimestamp*) value {
  resultFeedPost.hasTimestamp = YES;
  resultFeedPost.timestamp = value;
  return self;
}
- (BFeedPostBuilder*) setTimestampBuilder:(BTimestampBuilder*) builderForValue {
  return [self setTimestamp:[builderForValue build]];
}
- (BFeedPostBuilder*) mergeTimestamp:(BTimestamp*) value {
  if (resultFeedPost.hasTimestamp &&
      resultFeedPost.timestamp != [BTimestamp defaultInstance]) {
    resultFeedPost.timestamp =
      [[[BTimestamp builderWithPrototype:resultFeedPost.timestamp] mergeFrom:value] buildPartial];
  } else {
    resultFeedPost.timestamp = value;
  }
  resultFeedPost.hasTimestamp = YES;
  return self;
}
- (BFeedPostBuilder*) clearTimestamp {
  resultFeedPost.hasTimestamp = NO;
  resultFeedPost.timestamp = [BTimestamp defaultInstance];
  return self;
}
- (BOOL) hasTimespanActive {
  return resultFeedPost.hasTimespanActive;
}
- (BTimespan*) timespanActive {
  return resultFeedPost.timespanActive;
}
- (BFeedPostBuilder*) setTimespanActive:(BTimespan*) value {
  resultFeedPost.hasTimespanActive = YES;
  resultFeedPost.timespanActive = value;
  return self;
}
- (BFeedPostBuilder*) setTimespanActiveBuilder:(BTimespanBuilder*) builderForValue {
  return [self setTimespanActive:[builderForValue build]];
}
- (BFeedPostBuilder*) mergeTimespanActive:(BTimespan*) value {
  if (resultFeedPost.hasTimespanActive &&
      resultFeedPost.timespanActive != [BTimespan defaultInstance]) {
    resultFeedPost.timespanActive =
      [[[BTimespan builderWithPrototype:resultFeedPost.timespanActive] mergeFrom:value] buildPartial];
  } else {
    resultFeedPost.timespanActive = value;
  }
  resultFeedPost.hasTimespanActive = YES;
  return self;
}
- (BFeedPostBuilder*) clearTimespanActive {
  resultFeedPost.hasTimespanActive = NO;
  resultFeedPost.timespanActive = [BTimespan defaultInstance];
  return self;
}
- (BOOL) hasHeadlineText {
  return resultFeedPost.hasHeadlineText;
}
- (NSString*) headlineText {
  return resultFeedPost.headlineText;
}
- (BFeedPostBuilder*) setHeadlineText:(NSString*) value {
  resultFeedPost.hasHeadlineText = YES;
  resultFeedPost.headlineText = value;
  return self;
}
- (BFeedPostBuilder*) clearHeadlineText {
  resultFeedPost.hasHeadlineText = NO;
  resultFeedPost.headlineText = @"";
  return self;
}
- (BOOL) hasBodyText {
  return resultFeedPost.hasBodyText;
}
- (NSString*) bodyText {
  return resultFeedPost.bodyText;
}
- (BFeedPostBuilder*) setBodyText:(NSString*) value {
  resultFeedPost.hasBodyText = YES;
  resultFeedPost.bodyText = value;
  return self;
}
- (BFeedPostBuilder*) clearBodyText {
  resultFeedPost.hasBodyText = NO;
  resultFeedPost.bodyText = @"";
  return self;
}
- (NSMutableArray *)postTags {
  return resultFeedPost.postTagsArray;
}
- (BEntityTag*)postTagsAtIndex:(NSUInteger)index {
  return [resultFeedPost postTagsAtIndex:index];
}
- (BFeedPostBuilder *)addPostTags:(BEntityTag*)value {
  if (resultFeedPost.postTagsArray == nil) {
    resultFeedPost.postTagsArray = [[NSMutableArray alloc]init];
  }
  [resultFeedPost.postTagsArray addObject:value];
  return self;
}
- (BFeedPostBuilder *)setPostTagsArray:(NSArray *)array {
  resultFeedPost.postTagsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BFeedPostBuilder *)clearPostTags {
  resultFeedPost.postTagsArray = nil;
  return self;
}
- (NSMutableArray *)repliesDeprecated {
  return resultFeedPost.repliesDeprecatedArray;
}
- (BFeedPost*)repliesDeprecatedAtIndex:(NSUInteger)index {
  return [resultFeedPost repliesDeprecatedAtIndex:index];
}
- (BFeedPostBuilder *)addRepliesDeprecated:(BFeedPost*)value {
  if (resultFeedPost.repliesDeprecatedArray == nil) {
    resultFeedPost.repliesDeprecatedArray = [[NSMutableArray alloc]init];
  }
  [resultFeedPost.repliesDeprecatedArray addObject:value];
  return self;
}
- (BFeedPostBuilder *)setRepliesDeprecatedArray:(NSArray *)array {
  resultFeedPost.repliesDeprecatedArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BFeedPostBuilder *)clearRepliesDeprecated {
  resultFeedPost.repliesDeprecatedArray = nil;
  return self;
}
- (BOOL) hasMayAddReply {
  return resultFeedPost.hasMayAddReply;
}
- (BOOL) mayAddReply {
  return resultFeedPost.mayAddReply;
}
- (BFeedPostBuilder*) setMayAddReply:(BOOL) value {
  resultFeedPost.hasMayAddReply = YES;
  resultFeedPost.mayAddReply = value;
  return self;
}
- (BFeedPostBuilder*) clearMayAddReply {
  resultFeedPost.hasMayAddReply = NO;
  resultFeedPost.mayAddReply = NO;
  return self;
}
- (BOOL) hasMayChooseMulitpleReplies {
  return resultFeedPost.hasMayChooseMulitpleReplies;
}
- (BOOL) mayChooseMulitpleReplies {
  return resultFeedPost.mayChooseMulitpleReplies;
}
- (BFeedPostBuilder*) setMayChooseMulitpleReplies:(BOOL) value {
  resultFeedPost.hasMayChooseMulitpleReplies = YES;
  resultFeedPost.mayChooseMulitpleReplies = value;
  return self;
}
- (BFeedPostBuilder*) clearMayChooseMulitpleReplies {
  resultFeedPost.hasMayChooseMulitpleReplies = NO;
  resultFeedPost.mayChooseMulitpleReplies = NO;
  return self;
}
- (BOOL) hasSurveyAnswerSequence {
  return resultFeedPost.hasSurveyAnswerSequence;
}
- (SInt32) surveyAnswerSequence {
  return resultFeedPost.surveyAnswerSequence;
}
- (BFeedPostBuilder*) setSurveyAnswerSequence:(SInt32) value {
  resultFeedPost.hasSurveyAnswerSequence = YES;
  resultFeedPost.surveyAnswerSequence = value;
  return self;
}
- (BFeedPostBuilder*) clearSurveyAnswerSequence {
  resultFeedPost.hasSurveyAnswerSequence = NO;
  resultFeedPost.surveyAnswerSequence = 0;
  return self;
}
- (BOOL) hasAreMoreReplies {
  return resultFeedPost.hasAreMoreReplies;
}
- (BOOL) areMoreReplies {
  return resultFeedPost.areMoreReplies;
}
- (BFeedPostBuilder*) setAreMoreReplies:(BOOL) value {
  resultFeedPost.hasAreMoreReplies = YES;
  resultFeedPost.areMoreReplies = value;
  return self;
}
- (BFeedPostBuilder*) clearAreMoreReplies {
  resultFeedPost.hasAreMoreReplies = NO;
  resultFeedPost.areMoreReplies = NO;
  return self;
}
- (BOOL) hasTotalVoteCount {
  return resultFeedPost.hasTotalVoteCount;
}
- (SInt32) totalVoteCount {
  return resultFeedPost.totalVoteCount;
}
- (BFeedPostBuilder*) setTotalVoteCount:(SInt32) value {
  resultFeedPost.hasTotalVoteCount = YES;
  resultFeedPost.totalVoteCount = value;
  return self;
}
- (BFeedPostBuilder*) clearTotalVoteCount {
  resultFeedPost.hasTotalVoteCount = NO;
  resultFeedPost.totalVoteCount = 0;
  return self;
}
- (BOOL) hasAmountPerReply {
  return resultFeedPost.hasAmountPerReply;
}
- (NSString*) amountPerReply {
  return resultFeedPost.amountPerReply;
}
- (BFeedPostBuilder*) setAmountPerReply:(NSString*) value {
  resultFeedPost.hasAmountPerReply = YES;
  resultFeedPost.amountPerReply = value;
  return self;
}
- (BFeedPostBuilder*) clearAmountPerReply {
  resultFeedPost.hasAmountPerReply = NO;
  resultFeedPost.amountPerReply = @"";
  return self;
}
- (BOOL) hasAmountTotal {
  return resultFeedPost.hasAmountTotal;
}
- (NSString*) amountTotal {
  return resultFeedPost.amountTotal;
}
- (BFeedPostBuilder*) setAmountTotal:(NSString*) value {
  resultFeedPost.hasAmountTotal = YES;
  resultFeedPost.amountTotal = value;
  return self;
}
- (BFeedPostBuilder*) clearAmountTotal {
  resultFeedPost.hasAmountTotal = NO;
  resultFeedPost.amountTotal = @"";
  return self;
}
- (NSMutableArray *)panelUserIDsDeprecated {
  return resultFeedPost.panelUserIDsDeprecatedArray;
}
- (NSString*)panelUserIDsDeprecatedAtIndex:(NSUInteger)index {
  return [resultFeedPost panelUserIDsDeprecatedAtIndex:index];
}
- (BFeedPostBuilder *)addPanelUserIDsDeprecated:(NSString*)value {
  if (resultFeedPost.panelUserIDsDeprecatedArray == nil) {
    resultFeedPost.panelUserIDsDeprecatedArray = [[NSMutableArray alloc]init];
  }
  [resultFeedPost.panelUserIDsDeprecatedArray addObject:value];
  return self;
}
- (BFeedPostBuilder *)setPanelUserIDsDeprecatedArray:(NSArray *)array {
  resultFeedPost.panelUserIDsDeprecatedArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (BFeedPostBuilder *)clearPanelUserIDsDeprecated {
  resultFeedPost.panelUserIDsDeprecatedArray = nil;
  return self;
}
- (NSMutableArray *)panel {
  return resultFeedPost.panelArray;
}
- (BFeedPanelMember*)panelAtIndex:(NSUInteger)index {
  return [resultFeedPost panelAtIndex:index];
}
- (BFeedPostBuilder *)addPanel:(BFeedPanelMember*)value {
  if (resultFeedPost.panelArray == nil) {
    resultFeedPost.panelArray = [[NSMutableArray alloc]init];
  }
  [resultFeedPost.panelArray addObject:value];
  return self;
}
- (BFeedPostBuilder *)setPanelArray:(NSArray *)array {
  resultFeedPost.panelArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BFeedPostBuilder *)clearPanel {
  resultFeedPost.panelArray = nil;
  return self;
}
@end

@interface BFeedPostUpdateRequest ()
@property BUpdateVerb updateVerb;
@property (strong) BFeedPost* feedPostDeprecated;
@property (strong) NSMutableArray * feedPostsArray;
@end

@implementation BFeedPostUpdateRequest

- (BOOL) hasUpdateVerb {
  return !!hasUpdateVerb_;
}
- (void) setHasUpdateVerb:(BOOL) _value_ {
  hasUpdateVerb_ = !!_value_;
}
@synthesize updateVerb;
- (BOOL) hasFeedPostDeprecated {
  return !!hasFeedPostDeprecated_;
}
- (void) setHasFeedPostDeprecated:(BOOL) _value_ {
  hasFeedPostDeprecated_ = !!_value_;
}
@synthesize feedPostDeprecated;
@synthesize feedPostsArray;
@dynamic feedPosts;
- (instancetype) init {
  if ((self = [super init])) {
    self.updateVerb = BUpdateVerbUVCreate;
    self.feedPostDeprecated = [BFeedPost defaultInstance];
  }
  return self;
}
static BFeedPostUpdateRequest* defaultBFeedPostUpdateRequestInstance = nil;
+ (void) initialize {
  if (self == [BFeedPostUpdateRequest class]) {
    defaultBFeedPostUpdateRequestInstance = [[BFeedPostUpdateRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBFeedPostUpdateRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBFeedPostUpdateRequestInstance;
}
- (NSArray *)feedPosts {
  return feedPostsArray;
}
- (BFeedPost*)feedPostsAtIndex:(NSUInteger)index {
  return [feedPostsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUpdateVerb) {
    [output writeEnum:1 value:self.updateVerb];
  }
  if (self.hasFeedPostDeprecated) {
    [output writeMessage:2 value:self.feedPostDeprecated];
  }
  [self.feedPostsArray enumerateObjectsUsingBlock:^(BFeedPost *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUpdateVerb) {
    size_ += computeEnumSize(1, self.updateVerb);
  }
  if (self.hasFeedPostDeprecated) {
    size_ += computeMessageSize(2, self.feedPostDeprecated);
  }
  [self.feedPostsArray enumerateObjectsUsingBlock:^(BFeedPost *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BFeedPostUpdateRequest*) parseFromData:(NSData*) data {
  return (BFeedPostUpdateRequest*)[[[BFeedPostUpdateRequest builder] mergeFromData:data] build];
}
+ (BFeedPostUpdateRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFeedPostUpdateRequest*)[[[BFeedPostUpdateRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BFeedPostUpdateRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BFeedPostUpdateRequest*)[[[BFeedPostUpdateRequest builder] mergeFromInputStream:input] build];
}
+ (BFeedPostUpdateRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFeedPostUpdateRequest*)[[[BFeedPostUpdateRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BFeedPostUpdateRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BFeedPostUpdateRequest*)[[[BFeedPostUpdateRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BFeedPostUpdateRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFeedPostUpdateRequest*)[[[BFeedPostUpdateRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BFeedPostUpdateRequestBuilder*) builder {
  return [[BFeedPostUpdateRequestBuilder alloc] init];
}
+ (BFeedPostUpdateRequestBuilder*) builderWithPrototype:(BFeedPostUpdateRequest*) prototype {
  return [[BFeedPostUpdateRequest builder] mergeFrom:prototype];
}
- (BFeedPostUpdateRequestBuilder*) builder {
  return [BFeedPostUpdateRequest builder];
}
- (BFeedPostUpdateRequestBuilder*) toBuilder {
  return [BFeedPostUpdateRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUpdateVerb) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updateVerb", NSStringFromBUpdateVerb(self.updateVerb)];
  }
  if (self.hasFeedPostDeprecated) {
    [output appendFormat:@"%@%@ {\n", indent, @"feedPostDeprecated"];
    [self.feedPostDeprecated writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.feedPostsArray enumerateObjectsUsingBlock:^(BFeedPost *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"feedPosts"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUpdateVerb) {
    [dictionary setObject: @(self.updateVerb) forKey: @"updateVerb"];
  }
  if (self.hasFeedPostDeprecated) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.feedPostDeprecated storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"feedPostDeprecated"];
  }
  for (BFeedPost* element in self.feedPostsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"feedPosts"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BFeedPostUpdateRequest class]]) {
    return NO;
  }
  BFeedPostUpdateRequest *otherMessage = other;
  return
      self.hasUpdateVerb == otherMessage.hasUpdateVerb &&
      (!self.hasUpdateVerb || self.updateVerb == otherMessage.updateVerb) &&
      self.hasFeedPostDeprecated == otherMessage.hasFeedPostDeprecated &&
      (!self.hasFeedPostDeprecated || [self.feedPostDeprecated isEqual:otherMessage.feedPostDeprecated]) &&
      [self.feedPostsArray isEqualToArray:otherMessage.feedPostsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUpdateVerb) {
    hashCode = hashCode * 31 + self.updateVerb;
  }
  if (self.hasFeedPostDeprecated) {
    hashCode = hashCode * 31 + [self.feedPostDeprecated hash];
  }
  [self.feedPostsArray enumerateObjectsUsingBlock:^(BFeedPost *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BFeedPostUpdateRequestBuilder()
@property (strong) BFeedPostUpdateRequest* resultFeedPostUpdateRequest;
@end

@implementation BFeedPostUpdateRequestBuilder
@synthesize resultFeedPostUpdateRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFeedPostUpdateRequest = [[BFeedPostUpdateRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFeedPostUpdateRequest;
}
- (BFeedPostUpdateRequestBuilder*) clear {
  self.resultFeedPostUpdateRequest = [[BFeedPostUpdateRequest alloc] init];
  return self;
}
- (BFeedPostUpdateRequestBuilder*) clone {
  return [BFeedPostUpdateRequest builderWithPrototype:resultFeedPostUpdateRequest];
}
- (BFeedPostUpdateRequest*) defaultInstance {
  return [BFeedPostUpdateRequest defaultInstance];
}
- (BFeedPostUpdateRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BFeedPostUpdateRequest*) buildPartial {
  BFeedPostUpdateRequest* returnMe = resultFeedPostUpdateRequest;
  self.resultFeedPostUpdateRequest = nil;
  return returnMe;
}
- (BFeedPostUpdateRequestBuilder*) mergeFrom:(BFeedPostUpdateRequest*) other {
  if (other == [BFeedPostUpdateRequest defaultInstance]) {
    return self;
  }
  if (other.hasUpdateVerb) {
    [self setUpdateVerb:other.updateVerb];
  }
  if (other.hasFeedPostDeprecated) {
    [self mergeFeedPostDeprecated:other.feedPostDeprecated];
  }
  if (other.feedPostsArray.count > 0) {
    if (resultFeedPostUpdateRequest.feedPostsArray == nil) {
      resultFeedPostUpdateRequest.feedPostsArray = [[NSMutableArray alloc] initWithArray:other.feedPostsArray];
    } else {
      [resultFeedPostUpdateRequest.feedPostsArray addObjectsFromArray:other.feedPostsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BFeedPostUpdateRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BFeedPostUpdateRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        BUpdateVerb value = (BUpdateVerb)[input readEnum];
        if (BUpdateVerbIsValidValue(value)) {
          [self setUpdateVerb:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        BFeedPostBuilder* subBuilder = [BFeedPost builder];
        if (self.hasFeedPostDeprecated) {
          [subBuilder mergeFrom:self.feedPostDeprecated];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFeedPostDeprecated:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        BFeedPostBuilder* subBuilder = [BFeedPost builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFeedPosts:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUpdateVerb {
  return resultFeedPostUpdateRequest.hasUpdateVerb;
}
- (BUpdateVerb) updateVerb {
  return resultFeedPostUpdateRequest.updateVerb;
}
- (BFeedPostUpdateRequestBuilder*) setUpdateVerb:(BUpdateVerb) value {
  resultFeedPostUpdateRequest.hasUpdateVerb = YES;
  resultFeedPostUpdateRequest.updateVerb = value;
  return self;
}
- (BFeedPostUpdateRequestBuilder*) clearUpdateVerb {
  resultFeedPostUpdateRequest.hasUpdateVerb = NO;
  resultFeedPostUpdateRequest.updateVerb = BUpdateVerbUVCreate;
  return self;
}
- (BOOL) hasFeedPostDeprecated {
  return resultFeedPostUpdateRequest.hasFeedPostDeprecated;
}
- (BFeedPost*) feedPostDeprecated {
  return resultFeedPostUpdateRequest.feedPostDeprecated;
}
- (BFeedPostUpdateRequestBuilder*) setFeedPostDeprecated:(BFeedPost*) value {
  resultFeedPostUpdateRequest.hasFeedPostDeprecated = YES;
  resultFeedPostUpdateRequest.feedPostDeprecated = value;
  return self;
}
- (BFeedPostUpdateRequestBuilder*) setFeedPostDeprecatedBuilder:(BFeedPostBuilder*) builderForValue {
  return [self setFeedPostDeprecated:[builderForValue build]];
}
- (BFeedPostUpdateRequestBuilder*) mergeFeedPostDeprecated:(BFeedPost*) value {
  if (resultFeedPostUpdateRequest.hasFeedPostDeprecated &&
      resultFeedPostUpdateRequest.feedPostDeprecated != [BFeedPost defaultInstance]) {
    resultFeedPostUpdateRequest.feedPostDeprecated =
      [[[BFeedPost builderWithPrototype:resultFeedPostUpdateRequest.feedPostDeprecated] mergeFrom:value] buildPartial];
  } else {
    resultFeedPostUpdateRequest.feedPostDeprecated = value;
  }
  resultFeedPostUpdateRequest.hasFeedPostDeprecated = YES;
  return self;
}
- (BFeedPostUpdateRequestBuilder*) clearFeedPostDeprecated {
  resultFeedPostUpdateRequest.hasFeedPostDeprecated = NO;
  resultFeedPostUpdateRequest.feedPostDeprecated = [BFeedPost defaultInstance];
  return self;
}
- (NSMutableArray *)feedPosts {
  return resultFeedPostUpdateRequest.feedPostsArray;
}
- (BFeedPost*)feedPostsAtIndex:(NSUInteger)index {
  return [resultFeedPostUpdateRequest feedPostsAtIndex:index];
}
- (BFeedPostUpdateRequestBuilder *)addFeedPosts:(BFeedPost*)value {
  if (resultFeedPostUpdateRequest.feedPostsArray == nil) {
    resultFeedPostUpdateRequest.feedPostsArray = [[NSMutableArray alloc]init];
  }
  [resultFeedPostUpdateRequest.feedPostsArray addObject:value];
  return self;
}
- (BFeedPostUpdateRequestBuilder *)setFeedPostsArray:(NSArray *)array {
  resultFeedPostUpdateRequest.feedPostsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BFeedPostUpdateRequestBuilder *)clearFeedPosts {
  resultFeedPostUpdateRequest.feedPostsArray = nil;
  return self;
}
@end

@interface BFeedPostFetchRequest ()
@property (strong) BTimespan* timespan;
@property BFeedPostScope feedScope;
@property (strong) NSString* parentID;
@end

@implementation BFeedPostFetchRequest

- (BOOL) hasTimespan {
  return !!hasTimespan_;
}
- (void) setHasTimespan:(BOOL) _value_ {
  hasTimespan_ = !!_value_;
}
@synthesize timespan;
- (BOOL) hasFeedScope {
  return !!hasFeedScope_;
}
- (void) setHasFeedScope:(BOOL) _value_ {
  hasFeedScope_ = !!_value_;
}
@synthesize feedScope;
- (BOOL) hasParentID {
  return !!hasParentID_;
}
- (void) setHasParentID:(BOOL) _value_ {
  hasParentID_ = !!_value_;
}
@synthesize parentID;
- (instancetype) init {
  if ((self = [super init])) {
    self.timespan = [BTimespan defaultInstance];
    self.feedScope = BFeedPostScopeFPScopeUnknown;
    self.parentID = @"";
  }
  return self;
}
static BFeedPostFetchRequest* defaultBFeedPostFetchRequestInstance = nil;
+ (void) initialize {
  if (self == [BFeedPostFetchRequest class]) {
    defaultBFeedPostFetchRequestInstance = [[BFeedPostFetchRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBFeedPostFetchRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBFeedPostFetchRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTimespan) {
    [output writeMessage:1 value:self.timespan];
  }
  if (self.hasFeedScope) {
    [output writeEnum:2 value:self.feedScope];
  }
  if (self.hasParentID) {
    [output writeString:3 value:self.parentID];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTimespan) {
    size_ += computeMessageSize(1, self.timespan);
  }
  if (self.hasFeedScope) {
    size_ += computeEnumSize(2, self.feedScope);
  }
  if (self.hasParentID) {
    size_ += computeStringSize(3, self.parentID);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BFeedPostFetchRequest*) parseFromData:(NSData*) data {
  return (BFeedPostFetchRequest*)[[[BFeedPostFetchRequest builder] mergeFromData:data] build];
}
+ (BFeedPostFetchRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFeedPostFetchRequest*)[[[BFeedPostFetchRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BFeedPostFetchRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BFeedPostFetchRequest*)[[[BFeedPostFetchRequest builder] mergeFromInputStream:input] build];
}
+ (BFeedPostFetchRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFeedPostFetchRequest*)[[[BFeedPostFetchRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BFeedPostFetchRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BFeedPostFetchRequest*)[[[BFeedPostFetchRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BFeedPostFetchRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFeedPostFetchRequest*)[[[BFeedPostFetchRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BFeedPostFetchRequestBuilder*) builder {
  return [[BFeedPostFetchRequestBuilder alloc] init];
}
+ (BFeedPostFetchRequestBuilder*) builderWithPrototype:(BFeedPostFetchRequest*) prototype {
  return [[BFeedPostFetchRequest builder] mergeFrom:prototype];
}
- (BFeedPostFetchRequestBuilder*) builder {
  return [BFeedPostFetchRequest builder];
}
- (BFeedPostFetchRequestBuilder*) toBuilder {
  return [BFeedPostFetchRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTimespan) {
    [output appendFormat:@"%@%@ {\n", indent, @"timespan"];
    [self.timespan writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFeedScope) {
    [output appendFormat:@"%@%@: %@\n", indent, @"feedScope", NSStringFromBFeedPostScope(self.feedScope)];
  }
  if (self.hasParentID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parentID", self.parentID];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTimespan) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.timespan storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"timespan"];
  }
  if (self.hasFeedScope) {
    [dictionary setObject: @(self.feedScope) forKey: @"feedScope"];
  }
  if (self.hasParentID) {
    [dictionary setObject: self.parentID forKey: @"parentID"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BFeedPostFetchRequest class]]) {
    return NO;
  }
  BFeedPostFetchRequest *otherMessage = other;
  return
      self.hasTimespan == otherMessage.hasTimespan &&
      (!self.hasTimespan || [self.timespan isEqual:otherMessage.timespan]) &&
      self.hasFeedScope == otherMessage.hasFeedScope &&
      (!self.hasFeedScope || self.feedScope == otherMessage.feedScope) &&
      self.hasParentID == otherMessage.hasParentID &&
      (!self.hasParentID || [self.parentID isEqual:otherMessage.parentID]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTimespan) {
    hashCode = hashCode * 31 + [self.timespan hash];
  }
  if (self.hasFeedScope) {
    hashCode = hashCode * 31 + self.feedScope;
  }
  if (self.hasParentID) {
    hashCode = hashCode * 31 + [self.parentID hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BFeedPostFetchRequestBuilder()
@property (strong) BFeedPostFetchRequest* resultFeedPostFetchRequest;
@end

@implementation BFeedPostFetchRequestBuilder
@synthesize resultFeedPostFetchRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFeedPostFetchRequest = [[BFeedPostFetchRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFeedPostFetchRequest;
}
- (BFeedPostFetchRequestBuilder*) clear {
  self.resultFeedPostFetchRequest = [[BFeedPostFetchRequest alloc] init];
  return self;
}
- (BFeedPostFetchRequestBuilder*) clone {
  return [BFeedPostFetchRequest builderWithPrototype:resultFeedPostFetchRequest];
}
- (BFeedPostFetchRequest*) defaultInstance {
  return [BFeedPostFetchRequest defaultInstance];
}
- (BFeedPostFetchRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BFeedPostFetchRequest*) buildPartial {
  BFeedPostFetchRequest* returnMe = resultFeedPostFetchRequest;
  self.resultFeedPostFetchRequest = nil;
  return returnMe;
}
- (BFeedPostFetchRequestBuilder*) mergeFrom:(BFeedPostFetchRequest*) other {
  if (other == [BFeedPostFetchRequest defaultInstance]) {
    return self;
  }
  if (other.hasTimespan) {
    [self mergeTimespan:other.timespan];
  }
  if (other.hasFeedScope) {
    [self setFeedScope:other.feedScope];
  }
  if (other.hasParentID) {
    [self setParentID:other.parentID];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BFeedPostFetchRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BFeedPostFetchRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BTimespanBuilder* subBuilder = [BTimespan builder];
        if (self.hasTimespan) {
          [subBuilder mergeFrom:self.timespan];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTimespan:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        BFeedPostScope value = (BFeedPostScope)[input readEnum];
        if (BFeedPostScopeIsValidValue(value)) {
          [self setFeedScope:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setParentID:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTimespan {
  return resultFeedPostFetchRequest.hasTimespan;
}
- (BTimespan*) timespan {
  return resultFeedPostFetchRequest.timespan;
}
- (BFeedPostFetchRequestBuilder*) setTimespan:(BTimespan*) value {
  resultFeedPostFetchRequest.hasTimespan = YES;
  resultFeedPostFetchRequest.timespan = value;
  return self;
}
- (BFeedPostFetchRequestBuilder*) setTimespanBuilder:(BTimespanBuilder*) builderForValue {
  return [self setTimespan:[builderForValue build]];
}
- (BFeedPostFetchRequestBuilder*) mergeTimespan:(BTimespan*) value {
  if (resultFeedPostFetchRequest.hasTimespan &&
      resultFeedPostFetchRequest.timespan != [BTimespan defaultInstance]) {
    resultFeedPostFetchRequest.timespan =
      [[[BTimespan builderWithPrototype:resultFeedPostFetchRequest.timespan] mergeFrom:value] buildPartial];
  } else {
    resultFeedPostFetchRequest.timespan = value;
  }
  resultFeedPostFetchRequest.hasTimespan = YES;
  return self;
}
- (BFeedPostFetchRequestBuilder*) clearTimespan {
  resultFeedPostFetchRequest.hasTimespan = NO;
  resultFeedPostFetchRequest.timespan = [BTimespan defaultInstance];
  return self;
}
- (BOOL) hasFeedScope {
  return resultFeedPostFetchRequest.hasFeedScope;
}
- (BFeedPostScope) feedScope {
  return resultFeedPostFetchRequest.feedScope;
}
- (BFeedPostFetchRequestBuilder*) setFeedScope:(BFeedPostScope) value {
  resultFeedPostFetchRequest.hasFeedScope = YES;
  resultFeedPostFetchRequest.feedScope = value;
  return self;
}
- (BFeedPostFetchRequestBuilder*) clearFeedScope {
  resultFeedPostFetchRequest.hasFeedScope = NO;
  resultFeedPostFetchRequest.feedScope = BFeedPostScopeFPScopeUnknown;
  return self;
}
- (BOOL) hasParentID {
  return resultFeedPostFetchRequest.hasParentID;
}
- (NSString*) parentID {
  return resultFeedPostFetchRequest.parentID;
}
- (BFeedPostFetchRequestBuilder*) setParentID:(NSString*) value {
  resultFeedPostFetchRequest.hasParentID = YES;
  resultFeedPostFetchRequest.parentID = value;
  return self;
}
- (BFeedPostFetchRequestBuilder*) clearParentID {
  resultFeedPostFetchRequest.hasParentID = NO;
  resultFeedPostFetchRequest.parentID = @"";
  return self;
}
@end

@interface BFeedPostResponse ()
@property (strong) NSMutableArray * feedPostsArray;
@end

@implementation BFeedPostResponse

@synthesize feedPostsArray;
@dynamic feedPosts;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BFeedPostResponse* defaultBFeedPostResponseInstance = nil;
+ (void) initialize {
  if (self == [BFeedPostResponse class]) {
    defaultBFeedPostResponseInstance = [[BFeedPostResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBFeedPostResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultBFeedPostResponseInstance;
}
- (NSArray *)feedPosts {
  return feedPostsArray;
}
- (BFeedPost*)feedPostsAtIndex:(NSUInteger)index {
  return [feedPostsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.feedPostsArray enumerateObjectsUsingBlock:^(BFeedPost *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.feedPostsArray enumerateObjectsUsingBlock:^(BFeedPost *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BFeedPostResponse*) parseFromData:(NSData*) data {
  return (BFeedPostResponse*)[[[BFeedPostResponse builder] mergeFromData:data] build];
}
+ (BFeedPostResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFeedPostResponse*)[[[BFeedPostResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BFeedPostResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BFeedPostResponse*)[[[BFeedPostResponse builder] mergeFromInputStream:input] build];
}
+ (BFeedPostResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFeedPostResponse*)[[[BFeedPostResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BFeedPostResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BFeedPostResponse*)[[[BFeedPostResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BFeedPostResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFeedPostResponse*)[[[BFeedPostResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BFeedPostResponseBuilder*) builder {
  return [[BFeedPostResponseBuilder alloc] init];
}
+ (BFeedPostResponseBuilder*) builderWithPrototype:(BFeedPostResponse*) prototype {
  return [[BFeedPostResponse builder] mergeFrom:prototype];
}
- (BFeedPostResponseBuilder*) builder {
  return [BFeedPostResponse builder];
}
- (BFeedPostResponseBuilder*) toBuilder {
  return [BFeedPostResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.feedPostsArray enumerateObjectsUsingBlock:^(BFeedPost *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"feedPosts"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (BFeedPost* element in self.feedPostsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"feedPosts"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BFeedPostResponse class]]) {
    return NO;
  }
  BFeedPostResponse *otherMessage = other;
  return
      [self.feedPostsArray isEqualToArray:otherMessage.feedPostsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.feedPostsArray enumerateObjectsUsingBlock:^(BFeedPost *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BFeedPostResponseBuilder()
@property (strong) BFeedPostResponse* resultFeedPostResponse;
@end

@implementation BFeedPostResponseBuilder
@synthesize resultFeedPostResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFeedPostResponse = [[BFeedPostResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFeedPostResponse;
}
- (BFeedPostResponseBuilder*) clear {
  self.resultFeedPostResponse = [[BFeedPostResponse alloc] init];
  return self;
}
- (BFeedPostResponseBuilder*) clone {
  return [BFeedPostResponse builderWithPrototype:resultFeedPostResponse];
}
- (BFeedPostResponse*) defaultInstance {
  return [BFeedPostResponse defaultInstance];
}
- (BFeedPostResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BFeedPostResponse*) buildPartial {
  BFeedPostResponse* returnMe = resultFeedPostResponse;
  self.resultFeedPostResponse = nil;
  return returnMe;
}
- (BFeedPostResponseBuilder*) mergeFrom:(BFeedPostResponse*) other {
  if (other == [BFeedPostResponse defaultInstance]) {
    return self;
  }
  if (other.feedPostsArray.count > 0) {
    if (resultFeedPostResponse.feedPostsArray == nil) {
      resultFeedPostResponse.feedPostsArray = [[NSMutableArray alloc] initWithArray:other.feedPostsArray];
    } else {
      [resultFeedPostResponse.feedPostsArray addObjectsFromArray:other.feedPostsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BFeedPostResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BFeedPostResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BFeedPostBuilder* subBuilder = [BFeedPost builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFeedPosts:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)feedPosts {
  return resultFeedPostResponse.feedPostsArray;
}
- (BFeedPost*)feedPostsAtIndex:(NSUInteger)index {
  return [resultFeedPostResponse feedPostsAtIndex:index];
}
- (BFeedPostResponseBuilder *)addFeedPosts:(BFeedPost*)value {
  if (resultFeedPostResponse.feedPostsArray == nil) {
    resultFeedPostResponse.feedPostsArray = [[NSMutableArray alloc]init];
  }
  [resultFeedPostResponse.feedPostsArray addObject:value];
  return self;
}
- (BFeedPostResponseBuilder *)setFeedPostsArray:(NSArray *)array {
  resultFeedPostResponse.feedPostsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BFeedPostResponseBuilder *)clearFeedPosts {
  resultFeedPostResponse.feedPostsArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
