// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "UserProfiles.pb.h"
// @@protoc_insertion_point(imports)

@implementation BUserProfilesRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BUserProfilesRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    [BTypesRoot registerAllExtensions:registry];
    [BEntityTagsRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL BContactTypeIsValidValue(BContactType value) {
  switch (value) {
    case BContactTypeCTUnknown:
    case BContactTypeCTPhoneSMS:
    case BContactTypeCTEmail:
    case BContactTypeCTChat:
    case BContactTypeCTSocialService:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBContactType(BContactType value) {
  switch (value) {
    case BContactTypeCTUnknown:
      return @"BContactTypeCTUnknown";
    case BContactTypeCTPhoneSMS:
      return @"BContactTypeCTPhoneSMS";
    case BContactTypeCTEmail:
      return @"BContactTypeCTEmail";
    case BContactTypeCTChat:
      return @"BContactTypeCTChat";
    case BContactTypeCTSocialService:
      return @"BContactTypeCTSocialService";
    default:
      return nil;
  }
}

BOOL BUserStatusIsValidValue(BUserStatus value) {
  switch (value) {
    case BUserStatusUSUnknown:
    case BUserStatusUSBlocked:
    case BUserStatusUSInvited:
    case BUserStatusUSActive:
    case BUserStatusUSConfirming:
    case BUserStatusUSConfirmed:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBUserStatus(BUserStatus value) {
  switch (value) {
    case BUserStatusUSUnknown:
      return @"BUserStatusUSUnknown";
    case BUserStatusUSBlocked:
      return @"BUserStatusUSBlocked";
    case BUserStatusUSInvited:
      return @"BUserStatusUSInvited";
    case BUserStatusUSActive:
      return @"BUserStatusUSActive";
    case BUserStatusUSConfirming:
      return @"BUserStatusUSConfirming";
    case BUserStatusUSConfirmed:
      return @"BUserStatusUSConfirmed";
    default:
      return nil;
  }
}

BOOL BGenderIsValidValue(BGender value) {
  switch (value) {
    case BGenderGUnknown:
    case BGenderGFemale:
    case BGenderGMale:
    case BGenderGOther:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBGender(BGender value) {
  switch (value) {
    case BGenderGUnknown:
      return @"BGenderGUnknown";
    case BGenderGFemale:
      return @"BGenderGFemale";
    case BGenderGMale:
      return @"BGenderGMale";
    case BGenderGOther:
      return @"BGenderGOther";
    default:
      return nil;
  }
}

BOOL BImageContentIsValidValue(BImageContent value) {
  switch (value) {
    case BImageContentICUnknown:
    case BImageContentICUserProfile:
    case BImageContentICUserBackground:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBImageContent(BImageContent value) {
  switch (value) {
    case BImageContentICUnknown:
      return @"BImageContentICUnknown";
    case BImageContentICUserProfile:
      return @"BImageContentICUserProfile";
    case BImageContentICUserBackground:
      return @"BImageContentICUserBackground";
    default:
      return nil;
  }
}

BOOL BFriendStatusIsValidValue(BFriendStatus value) {
  switch (value) {
    case BFriendStatusFSUnknown:
    case BFriendStatusFSDidAsk:
    case BFriendStatusFSIgnored:
    case BFriendStatusFSAccepted:
    case BFriendStatusFSWasAsked:
    case BFriendStatusFSFriends:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBFriendStatus(BFriendStatus value) {
  switch (value) {
    case BFriendStatusFSUnknown:
      return @"BFriendStatusFSUnknown";
    case BFriendStatusFSDidAsk:
      return @"BFriendStatusFSDidAsk";
    case BFriendStatusFSIgnored:
      return @"BFriendStatusFSIgnored";
    case BFriendStatusFSAccepted:
      return @"BFriendStatusFSAccepted";
    case BFriendStatusFSWasAsked:
      return @"BFriendStatusFSWasAsked";
    case BFriendStatusFSFriends:
      return @"BFriendStatusFSFriends";
    default:
      return nil;
  }
}

@interface BSocialIdentity ()
@property (strong) NSString* socialService;
@property (strong) NSString* socialID;
@property (strong) NSString* userName;
@property (strong) NSString* displayName;
@property (strong) NSString* userURI;
@property (strong) NSString* authToken;
@property (strong) BTimestamp* authExpire;
@property (strong) NSString* authSecret;
@end

@implementation BSocialIdentity

- (BOOL) hasSocialService {
  return !!hasSocialService_;
}
- (void) setHasSocialService:(BOOL) _value_ {
  hasSocialService_ = !!_value_;
}
@synthesize socialService;
- (BOOL) hasSocialID {
  return !!hasSocialID_;
}
- (void) setHasSocialID:(BOOL) _value_ {
  hasSocialID_ = !!_value_;
}
@synthesize socialID;
- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) _value_ {
  hasUserName_ = !!_value_;
}
@synthesize userName;
- (BOOL) hasDisplayName {
  return !!hasDisplayName_;
}
- (void) setHasDisplayName:(BOOL) _value_ {
  hasDisplayName_ = !!_value_;
}
@synthesize displayName;
- (BOOL) hasUserURI {
  return !!hasUserURI_;
}
- (void) setHasUserURI:(BOOL) _value_ {
  hasUserURI_ = !!_value_;
}
@synthesize userURI;
- (BOOL) hasAuthToken {
  return !!hasAuthToken_;
}
- (void) setHasAuthToken:(BOOL) _value_ {
  hasAuthToken_ = !!_value_;
}
@synthesize authToken;
- (BOOL) hasAuthExpire {
  return !!hasAuthExpire_;
}
- (void) setHasAuthExpire:(BOOL) _value_ {
  hasAuthExpire_ = !!_value_;
}
@synthesize authExpire;
- (BOOL) hasAuthSecret {
  return !!hasAuthSecret_;
}
- (void) setHasAuthSecret:(BOOL) _value_ {
  hasAuthSecret_ = !!_value_;
}
@synthesize authSecret;
- (instancetype) init {
  if ((self = [super init])) {
    self.socialService = @"";
    self.socialID = @"";
    self.userName = @"";
    self.displayName = @"";
    self.userURI = @"";
    self.authToken = @"";
    self.authExpire = [BTimestamp defaultInstance];
    self.authSecret = @"";
  }
  return self;
}
static BSocialIdentity* defaultBSocialIdentityInstance = nil;
+ (void) initialize {
  if (self == [BSocialIdentity class]) {
    defaultBSocialIdentityInstance = [[BSocialIdentity alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBSocialIdentityInstance;
}
- (instancetype) defaultInstance {
  return defaultBSocialIdentityInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSocialService) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSocialService) {
    [output writeString:1 value:self.socialService];
  }
  if (self.hasSocialID) {
    [output writeString:2 value:self.socialID];
  }
  if (self.hasUserName) {
    [output writeString:3 value:self.userName];
  }
  if (self.hasDisplayName) {
    [output writeString:4 value:self.displayName];
  }
  if (self.hasUserURI) {
    [output writeString:5 value:self.userURI];
  }
  if (self.hasAuthToken) {
    [output writeString:6 value:self.authToken];
  }
  if (self.hasAuthExpire) {
    [output writeMessage:7 value:self.authExpire];
  }
  if (self.hasAuthSecret) {
    [output writeString:8 value:self.authSecret];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSocialService) {
    size_ += computeStringSize(1, self.socialService);
  }
  if (self.hasSocialID) {
    size_ += computeStringSize(2, self.socialID);
  }
  if (self.hasUserName) {
    size_ += computeStringSize(3, self.userName);
  }
  if (self.hasDisplayName) {
    size_ += computeStringSize(4, self.displayName);
  }
  if (self.hasUserURI) {
    size_ += computeStringSize(5, self.userURI);
  }
  if (self.hasAuthToken) {
    size_ += computeStringSize(6, self.authToken);
  }
  if (self.hasAuthExpire) {
    size_ += computeMessageSize(7, self.authExpire);
  }
  if (self.hasAuthSecret) {
    size_ += computeStringSize(8, self.authSecret);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BSocialIdentity*) parseFromData:(NSData*) data {
  return (BSocialIdentity*)[[[BSocialIdentity builder] mergeFromData:data] build];
}
+ (BSocialIdentity*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSocialIdentity*)[[[BSocialIdentity builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BSocialIdentity*) parseFromInputStream:(NSInputStream*) input {
  return (BSocialIdentity*)[[[BSocialIdentity builder] mergeFromInputStream:input] build];
}
+ (BSocialIdentity*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSocialIdentity*)[[[BSocialIdentity builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BSocialIdentity*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BSocialIdentity*)[[[BSocialIdentity builder] mergeFromCodedInputStream:input] build];
}
+ (BSocialIdentity*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSocialIdentity*)[[[BSocialIdentity builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BSocialIdentityBuilder*) builder {
  return [[BSocialIdentityBuilder alloc] init];
}
+ (BSocialIdentityBuilder*) builderWithPrototype:(BSocialIdentity*) prototype {
  return [[BSocialIdentity builder] mergeFrom:prototype];
}
- (BSocialIdentityBuilder*) builder {
  return [BSocialIdentity builder];
}
- (BSocialIdentityBuilder*) toBuilder {
  return [BSocialIdentity builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSocialService) {
    [output appendFormat:@"%@%@: %@\n", indent, @"socialService", self.socialService];
  }
  if (self.hasSocialID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"socialID", self.socialID];
  }
  if (self.hasUserName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userName", self.userName];
  }
  if (self.hasDisplayName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"displayName", self.displayName];
  }
  if (self.hasUserURI) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userURI", self.userURI];
  }
  if (self.hasAuthToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"authToken", self.authToken];
  }
  if (self.hasAuthExpire) {
    [output appendFormat:@"%@%@ {\n", indent, @"authExpire"];
    [self.authExpire writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAuthSecret) {
    [output appendFormat:@"%@%@: %@\n", indent, @"authSecret", self.authSecret];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSocialService) {
    [dictionary setObject: self.socialService forKey: @"socialService"];
  }
  if (self.hasSocialID) {
    [dictionary setObject: self.socialID forKey: @"socialID"];
  }
  if (self.hasUserName) {
    [dictionary setObject: self.userName forKey: @"userName"];
  }
  if (self.hasDisplayName) {
    [dictionary setObject: self.displayName forKey: @"displayName"];
  }
  if (self.hasUserURI) {
    [dictionary setObject: self.userURI forKey: @"userURI"];
  }
  if (self.hasAuthToken) {
    [dictionary setObject: self.authToken forKey: @"authToken"];
  }
  if (self.hasAuthExpire) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.authExpire storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"authExpire"];
  }
  if (self.hasAuthSecret) {
    [dictionary setObject: self.authSecret forKey: @"authSecret"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BSocialIdentity class]]) {
    return NO;
  }
  BSocialIdentity *otherMessage = other;
  return
      self.hasSocialService == otherMessage.hasSocialService &&
      (!self.hasSocialService || [self.socialService isEqual:otherMessage.socialService]) &&
      self.hasSocialID == otherMessage.hasSocialID &&
      (!self.hasSocialID || [self.socialID isEqual:otherMessage.socialID]) &&
      self.hasUserName == otherMessage.hasUserName &&
      (!self.hasUserName || [self.userName isEqual:otherMessage.userName]) &&
      self.hasDisplayName == otherMessage.hasDisplayName &&
      (!self.hasDisplayName || [self.displayName isEqual:otherMessage.displayName]) &&
      self.hasUserURI == otherMessage.hasUserURI &&
      (!self.hasUserURI || [self.userURI isEqual:otherMessage.userURI]) &&
      self.hasAuthToken == otherMessage.hasAuthToken &&
      (!self.hasAuthToken || [self.authToken isEqual:otherMessage.authToken]) &&
      self.hasAuthExpire == otherMessage.hasAuthExpire &&
      (!self.hasAuthExpire || [self.authExpire isEqual:otherMessage.authExpire]) &&
      self.hasAuthSecret == otherMessage.hasAuthSecret &&
      (!self.hasAuthSecret || [self.authSecret isEqual:otherMessage.authSecret]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSocialService) {
    hashCode = hashCode * 31 + [self.socialService hash];
  }
  if (self.hasSocialID) {
    hashCode = hashCode * 31 + [self.socialID hash];
  }
  if (self.hasUserName) {
    hashCode = hashCode * 31 + [self.userName hash];
  }
  if (self.hasDisplayName) {
    hashCode = hashCode * 31 + [self.displayName hash];
  }
  if (self.hasUserURI) {
    hashCode = hashCode * 31 + [self.userURI hash];
  }
  if (self.hasAuthToken) {
    hashCode = hashCode * 31 + [self.authToken hash];
  }
  if (self.hasAuthExpire) {
    hashCode = hashCode * 31 + [self.authExpire hash];
  }
  if (self.hasAuthSecret) {
    hashCode = hashCode * 31 + [self.authSecret hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BSocialIdentityBuilder()
@property (strong) BSocialIdentity* resultSocialIdentity;
@end

@implementation BSocialIdentityBuilder
@synthesize resultSocialIdentity;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSocialIdentity = [[BSocialIdentity alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSocialIdentity;
}
- (BSocialIdentityBuilder*) clear {
  self.resultSocialIdentity = [[BSocialIdentity alloc] init];
  return self;
}
- (BSocialIdentityBuilder*) clone {
  return [BSocialIdentity builderWithPrototype:resultSocialIdentity];
}
- (BSocialIdentity*) defaultInstance {
  return [BSocialIdentity defaultInstance];
}
- (BSocialIdentity*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BSocialIdentity*) buildPartial {
  BSocialIdentity* returnMe = resultSocialIdentity;
  self.resultSocialIdentity = nil;
  return returnMe;
}
- (BSocialIdentityBuilder*) mergeFrom:(BSocialIdentity*) other {
  if (other == [BSocialIdentity defaultInstance]) {
    return self;
  }
  if (other.hasSocialService) {
    [self setSocialService:other.socialService];
  }
  if (other.hasSocialID) {
    [self setSocialID:other.socialID];
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasDisplayName) {
    [self setDisplayName:other.displayName];
  }
  if (other.hasUserURI) {
    [self setUserURI:other.userURI];
  }
  if (other.hasAuthToken) {
    [self setAuthToken:other.authToken];
  }
  if (other.hasAuthExpire) {
    [self mergeAuthExpire:other.authExpire];
  }
  if (other.hasAuthSecret) {
    [self setAuthSecret:other.authSecret];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BSocialIdentityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BSocialIdentityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSocialService:[input readString]];
        break;
      }
      case 18: {
        [self setSocialID:[input readString]];
        break;
      }
      case 26: {
        [self setUserName:[input readString]];
        break;
      }
      case 34: {
        [self setDisplayName:[input readString]];
        break;
      }
      case 42: {
        [self setUserURI:[input readString]];
        break;
      }
      case 50: {
        [self setAuthToken:[input readString]];
        break;
      }
      case 58: {
        BTimestampBuilder* subBuilder = [BTimestamp builder];
        if (self.hasAuthExpire) {
          [subBuilder mergeFrom:self.authExpire];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAuthExpire:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        [self setAuthSecret:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSocialService {
  return resultSocialIdentity.hasSocialService;
}
- (NSString*) socialService {
  return resultSocialIdentity.socialService;
}
- (BSocialIdentityBuilder*) setSocialService:(NSString*) value {
  resultSocialIdentity.hasSocialService = YES;
  resultSocialIdentity.socialService = value;
  return self;
}
- (BSocialIdentityBuilder*) clearSocialService {
  resultSocialIdentity.hasSocialService = NO;
  resultSocialIdentity.socialService = @"";
  return self;
}
- (BOOL) hasSocialID {
  return resultSocialIdentity.hasSocialID;
}
- (NSString*) socialID {
  return resultSocialIdentity.socialID;
}
- (BSocialIdentityBuilder*) setSocialID:(NSString*) value {
  resultSocialIdentity.hasSocialID = YES;
  resultSocialIdentity.socialID = value;
  return self;
}
- (BSocialIdentityBuilder*) clearSocialID {
  resultSocialIdentity.hasSocialID = NO;
  resultSocialIdentity.socialID = @"";
  return self;
}
- (BOOL) hasUserName {
  return resultSocialIdentity.hasUserName;
}
- (NSString*) userName {
  return resultSocialIdentity.userName;
}
- (BSocialIdentityBuilder*) setUserName:(NSString*) value {
  resultSocialIdentity.hasUserName = YES;
  resultSocialIdentity.userName = value;
  return self;
}
- (BSocialIdentityBuilder*) clearUserName {
  resultSocialIdentity.hasUserName = NO;
  resultSocialIdentity.userName = @"";
  return self;
}
- (BOOL) hasDisplayName {
  return resultSocialIdentity.hasDisplayName;
}
- (NSString*) displayName {
  return resultSocialIdentity.displayName;
}
- (BSocialIdentityBuilder*) setDisplayName:(NSString*) value {
  resultSocialIdentity.hasDisplayName = YES;
  resultSocialIdentity.displayName = value;
  return self;
}
- (BSocialIdentityBuilder*) clearDisplayName {
  resultSocialIdentity.hasDisplayName = NO;
  resultSocialIdentity.displayName = @"";
  return self;
}
- (BOOL) hasUserURI {
  return resultSocialIdentity.hasUserURI;
}
- (NSString*) userURI {
  return resultSocialIdentity.userURI;
}
- (BSocialIdentityBuilder*) setUserURI:(NSString*) value {
  resultSocialIdentity.hasUserURI = YES;
  resultSocialIdentity.userURI = value;
  return self;
}
- (BSocialIdentityBuilder*) clearUserURI {
  resultSocialIdentity.hasUserURI = NO;
  resultSocialIdentity.userURI = @"";
  return self;
}
- (BOOL) hasAuthToken {
  return resultSocialIdentity.hasAuthToken;
}
- (NSString*) authToken {
  return resultSocialIdentity.authToken;
}
- (BSocialIdentityBuilder*) setAuthToken:(NSString*) value {
  resultSocialIdentity.hasAuthToken = YES;
  resultSocialIdentity.authToken = value;
  return self;
}
- (BSocialIdentityBuilder*) clearAuthToken {
  resultSocialIdentity.hasAuthToken = NO;
  resultSocialIdentity.authToken = @"";
  return self;
}
- (BOOL) hasAuthExpire {
  return resultSocialIdentity.hasAuthExpire;
}
- (BTimestamp*) authExpire {
  return resultSocialIdentity.authExpire;
}
- (BSocialIdentityBuilder*) setAuthExpire:(BTimestamp*) value {
  resultSocialIdentity.hasAuthExpire = YES;
  resultSocialIdentity.authExpire = value;
  return self;
}
- (BSocialIdentityBuilder*) setAuthExpireBuilder:(BTimestampBuilder*) builderForValue {
  return [self setAuthExpire:[builderForValue build]];
}
- (BSocialIdentityBuilder*) mergeAuthExpire:(BTimestamp*) value {
  if (resultSocialIdentity.hasAuthExpire &&
      resultSocialIdentity.authExpire != [BTimestamp defaultInstance]) {
    resultSocialIdentity.authExpire =
      [[[BTimestamp builderWithPrototype:resultSocialIdentity.authExpire] mergeFrom:value] buildPartial];
  } else {
    resultSocialIdentity.authExpire = value;
  }
  resultSocialIdentity.hasAuthExpire = YES;
  return self;
}
- (BSocialIdentityBuilder*) clearAuthExpire {
  resultSocialIdentity.hasAuthExpire = NO;
  resultSocialIdentity.authExpire = [BTimestamp defaultInstance];
  return self;
}
- (BOOL) hasAuthSecret {
  return resultSocialIdentity.hasAuthSecret;
}
- (NSString*) authSecret {
  return resultSocialIdentity.authSecret;
}
- (BSocialIdentityBuilder*) setAuthSecret:(NSString*) value {
  resultSocialIdentity.hasAuthSecret = YES;
  resultSocialIdentity.authSecret = value;
  return self;
}
- (BSocialIdentityBuilder*) clearAuthSecret {
  resultSocialIdentity.hasAuthSecret = NO;
  resultSocialIdentity.authSecret = @"";
  return self;
}
@end

@interface BContactInfo ()
@property BContactType contactType;
@property (strong) NSString* contact;
@property BOOL isVerified;
@end

@implementation BContactInfo

- (BOOL) hasContactType {
  return !!hasContactType_;
}
- (void) setHasContactType:(BOOL) _value_ {
  hasContactType_ = !!_value_;
}
@synthesize contactType;
- (BOOL) hasContact {
  return !!hasContact_;
}
- (void) setHasContact:(BOOL) _value_ {
  hasContact_ = !!_value_;
}
@synthesize contact;
- (BOOL) hasIsVerified {
  return !!hasIsVerified_;
}
- (void) setHasIsVerified:(BOOL) _value_ {
  hasIsVerified_ = !!_value_;
}
- (BOOL) isVerified {
  return !!isVerified_;
}
- (void) setIsVerified:(BOOL) _value_ {
  isVerified_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.contactType = BContactTypeCTUnknown;
    self.contact = @"";
    self.isVerified = NO;
  }
  return self;
}
static BContactInfo* defaultBContactInfoInstance = nil;
+ (void) initialize {
  if (self == [BContactInfo class]) {
    defaultBContactInfoInstance = [[BContactInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBContactInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultBContactInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasContactType) {
    return NO;
  }
  if (!self.hasContact) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasContactType) {
    [output writeEnum:1 value:self.contactType];
  }
  if (self.hasContact) {
    [output writeString:2 value:self.contact];
  }
  if (self.hasIsVerified) {
    [output writeBool:3 value:self.isVerified];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasContactType) {
    size_ += computeEnumSize(1, self.contactType);
  }
  if (self.hasContact) {
    size_ += computeStringSize(2, self.contact);
  }
  if (self.hasIsVerified) {
    size_ += computeBoolSize(3, self.isVerified);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BContactInfo*) parseFromData:(NSData*) data {
  return (BContactInfo*)[[[BContactInfo builder] mergeFromData:data] build];
}
+ (BContactInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BContactInfo*)[[[BContactInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BContactInfo*) parseFromInputStream:(NSInputStream*) input {
  return (BContactInfo*)[[[BContactInfo builder] mergeFromInputStream:input] build];
}
+ (BContactInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BContactInfo*)[[[BContactInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BContactInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BContactInfo*)[[[BContactInfo builder] mergeFromCodedInputStream:input] build];
}
+ (BContactInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BContactInfo*)[[[BContactInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BContactInfoBuilder*) builder {
  return [[BContactInfoBuilder alloc] init];
}
+ (BContactInfoBuilder*) builderWithPrototype:(BContactInfo*) prototype {
  return [[BContactInfo builder] mergeFrom:prototype];
}
- (BContactInfoBuilder*) builder {
  return [BContactInfo builder];
}
- (BContactInfoBuilder*) toBuilder {
  return [BContactInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasContactType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contactType", NSStringFromBContactType(self.contactType)];
  }
  if (self.hasContact) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contact", self.contact];
  }
  if (self.hasIsVerified) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isVerified", [NSNumber numberWithBool:self.isVerified]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasContactType) {
    [dictionary setObject: @(self.contactType) forKey: @"contactType"];
  }
  if (self.hasContact) {
    [dictionary setObject: self.contact forKey: @"contact"];
  }
  if (self.hasIsVerified) {
    [dictionary setObject: [NSNumber numberWithBool:self.isVerified] forKey: @"isVerified"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BContactInfo class]]) {
    return NO;
  }
  BContactInfo *otherMessage = other;
  return
      self.hasContactType == otherMessage.hasContactType &&
      (!self.hasContactType || self.contactType == otherMessage.contactType) &&
      self.hasContact == otherMessage.hasContact &&
      (!self.hasContact || [self.contact isEqual:otherMessage.contact]) &&
      self.hasIsVerified == otherMessage.hasIsVerified &&
      (!self.hasIsVerified || self.isVerified == otherMessage.isVerified) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasContactType) {
    hashCode = hashCode * 31 + self.contactType;
  }
  if (self.hasContact) {
    hashCode = hashCode * 31 + [self.contact hash];
  }
  if (self.hasIsVerified) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isVerified] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BContactInfoBuilder()
@property (strong) BContactInfo* resultContactInfo;
@end

@implementation BContactInfoBuilder
@synthesize resultContactInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultContactInfo = [[BContactInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultContactInfo;
}
- (BContactInfoBuilder*) clear {
  self.resultContactInfo = [[BContactInfo alloc] init];
  return self;
}
- (BContactInfoBuilder*) clone {
  return [BContactInfo builderWithPrototype:resultContactInfo];
}
- (BContactInfo*) defaultInstance {
  return [BContactInfo defaultInstance];
}
- (BContactInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BContactInfo*) buildPartial {
  BContactInfo* returnMe = resultContactInfo;
  self.resultContactInfo = nil;
  return returnMe;
}
- (BContactInfoBuilder*) mergeFrom:(BContactInfo*) other {
  if (other == [BContactInfo defaultInstance]) {
    return self;
  }
  if (other.hasContactType) {
    [self setContactType:other.contactType];
  }
  if (other.hasContact) {
    [self setContact:other.contact];
  }
  if (other.hasIsVerified) {
    [self setIsVerified:other.isVerified];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BContactInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BContactInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        BContactType value = (BContactType)[input readEnum];
        if (BContactTypeIsValidValue(value)) {
          [self setContactType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setContact:[input readString]];
        break;
      }
      case 24: {
        [self setIsVerified:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasContactType {
  return resultContactInfo.hasContactType;
}
- (BContactType) contactType {
  return resultContactInfo.contactType;
}
- (BContactInfoBuilder*) setContactType:(BContactType) value {
  resultContactInfo.hasContactType = YES;
  resultContactInfo.contactType = value;
  return self;
}
- (BContactInfoBuilder*) clearContactType {
  resultContactInfo.hasContactType = NO;
  resultContactInfo.contactType = BContactTypeCTUnknown;
  return self;
}
- (BOOL) hasContact {
  return resultContactInfo.hasContact;
}
- (NSString*) contact {
  return resultContactInfo.contact;
}
- (BContactInfoBuilder*) setContact:(NSString*) value {
  resultContactInfo.hasContact = YES;
  resultContactInfo.contact = value;
  return self;
}
- (BContactInfoBuilder*) clearContact {
  resultContactInfo.hasContact = NO;
  resultContactInfo.contact = @"";
  return self;
}
- (BOOL) hasIsVerified {
  return resultContactInfo.hasIsVerified;
}
- (BOOL) isVerified {
  return resultContactInfo.isVerified;
}
- (BContactInfoBuilder*) setIsVerified:(BOOL) value {
  resultContactInfo.hasIsVerified = YES;
  resultContactInfo.isVerified = value;
  return self;
}
- (BContactInfoBuilder*) clearIsVerified {
  resultContactInfo.hasIsVerified = NO;
  resultContactInfo.isVerified = NO;
  return self;
}
@end

@interface BEmployment ()
@property (strong) NSString* jobTitle;
@property (strong) NSString* companyName;
@property (strong) NSString* location;
@property (strong) NSString* industry;
@property (strong) BTimespan* timespan;
@property (strong) NSString* summary;
@property BOOL isHeadlineItem;
@end

@implementation BEmployment

- (BOOL) hasJobTitle {
  return !!hasJobTitle_;
}
- (void) setHasJobTitle:(BOOL) _value_ {
  hasJobTitle_ = !!_value_;
}
@synthesize jobTitle;
- (BOOL) hasCompanyName {
  return !!hasCompanyName_;
}
- (void) setHasCompanyName:(BOOL) _value_ {
  hasCompanyName_ = !!_value_;
}
@synthesize companyName;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (BOOL) hasIndustry {
  return !!hasIndustry_;
}
- (void) setHasIndustry:(BOOL) _value_ {
  hasIndustry_ = !!_value_;
}
@synthesize industry;
- (BOOL) hasTimespan {
  return !!hasTimespan_;
}
- (void) setHasTimespan:(BOOL) _value_ {
  hasTimespan_ = !!_value_;
}
@synthesize timespan;
- (BOOL) hasSummary {
  return !!hasSummary_;
}
- (void) setHasSummary:(BOOL) _value_ {
  hasSummary_ = !!_value_;
}
@synthesize summary;
- (BOOL) hasIsHeadlineItem {
  return !!hasIsHeadlineItem_;
}
- (void) setHasIsHeadlineItem:(BOOL) _value_ {
  hasIsHeadlineItem_ = !!_value_;
}
- (BOOL) isHeadlineItem {
  return !!isHeadlineItem_;
}
- (void) setIsHeadlineItem:(BOOL) _value_ {
  isHeadlineItem_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.jobTitle = @"";
    self.companyName = @"";
    self.location = @"";
    self.industry = @"";
    self.timespan = [BTimespan defaultInstance];
    self.summary = @"";
    self.isHeadlineItem = NO;
  }
  return self;
}
static BEmployment* defaultBEmploymentInstance = nil;
+ (void) initialize {
  if (self == [BEmployment class]) {
    defaultBEmploymentInstance = [[BEmployment alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBEmploymentInstance;
}
- (instancetype) defaultInstance {
  return defaultBEmploymentInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasJobTitle) {
    [output writeString:1 value:self.jobTitle];
  }
  if (self.hasCompanyName) {
    [output writeString:2 value:self.companyName];
  }
  if (self.hasLocation) {
    [output writeString:3 value:self.location];
  }
  if (self.hasIndustry) {
    [output writeString:4 value:self.industry];
  }
  if (self.hasTimespan) {
    [output writeMessage:5 value:self.timespan];
  }
  if (self.hasSummary) {
    [output writeString:6 value:self.summary];
  }
  if (self.hasIsHeadlineItem) {
    [output writeBool:7 value:self.isHeadlineItem];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasJobTitle) {
    size_ += computeStringSize(1, self.jobTitle);
  }
  if (self.hasCompanyName) {
    size_ += computeStringSize(2, self.companyName);
  }
  if (self.hasLocation) {
    size_ += computeStringSize(3, self.location);
  }
  if (self.hasIndustry) {
    size_ += computeStringSize(4, self.industry);
  }
  if (self.hasTimespan) {
    size_ += computeMessageSize(5, self.timespan);
  }
  if (self.hasSummary) {
    size_ += computeStringSize(6, self.summary);
  }
  if (self.hasIsHeadlineItem) {
    size_ += computeBoolSize(7, self.isHeadlineItem);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BEmployment*) parseFromData:(NSData*) data {
  return (BEmployment*)[[[BEmployment builder] mergeFromData:data] build];
}
+ (BEmployment*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BEmployment*)[[[BEmployment builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BEmployment*) parseFromInputStream:(NSInputStream*) input {
  return (BEmployment*)[[[BEmployment builder] mergeFromInputStream:input] build];
}
+ (BEmployment*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BEmployment*)[[[BEmployment builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BEmployment*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BEmployment*)[[[BEmployment builder] mergeFromCodedInputStream:input] build];
}
+ (BEmployment*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BEmployment*)[[[BEmployment builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BEmploymentBuilder*) builder {
  return [[BEmploymentBuilder alloc] init];
}
+ (BEmploymentBuilder*) builderWithPrototype:(BEmployment*) prototype {
  return [[BEmployment builder] mergeFrom:prototype];
}
- (BEmploymentBuilder*) builder {
  return [BEmployment builder];
}
- (BEmploymentBuilder*) toBuilder {
  return [BEmployment builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasJobTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"jobTitle", self.jobTitle];
  }
  if (self.hasCompanyName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"companyName", self.companyName];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  if (self.hasIndustry) {
    [output appendFormat:@"%@%@: %@\n", indent, @"industry", self.industry];
  }
  if (self.hasTimespan) {
    [output appendFormat:@"%@%@ {\n", indent, @"timespan"];
    [self.timespan writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSummary) {
    [output appendFormat:@"%@%@: %@\n", indent, @"summary", self.summary];
  }
  if (self.hasIsHeadlineItem) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isHeadlineItem", [NSNumber numberWithBool:self.isHeadlineItem]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasJobTitle) {
    [dictionary setObject: self.jobTitle forKey: @"jobTitle"];
  }
  if (self.hasCompanyName) {
    [dictionary setObject: self.companyName forKey: @"companyName"];
  }
  if (self.hasLocation) {
    [dictionary setObject: self.location forKey: @"location"];
  }
  if (self.hasIndustry) {
    [dictionary setObject: self.industry forKey: @"industry"];
  }
  if (self.hasTimespan) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.timespan storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"timespan"];
  }
  if (self.hasSummary) {
    [dictionary setObject: self.summary forKey: @"summary"];
  }
  if (self.hasIsHeadlineItem) {
    [dictionary setObject: [NSNumber numberWithBool:self.isHeadlineItem] forKey: @"isHeadlineItem"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BEmployment class]]) {
    return NO;
  }
  BEmployment *otherMessage = other;
  return
      self.hasJobTitle == otherMessage.hasJobTitle &&
      (!self.hasJobTitle || [self.jobTitle isEqual:otherMessage.jobTitle]) &&
      self.hasCompanyName == otherMessage.hasCompanyName &&
      (!self.hasCompanyName || [self.companyName isEqual:otherMessage.companyName]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasIndustry == otherMessage.hasIndustry &&
      (!self.hasIndustry || [self.industry isEqual:otherMessage.industry]) &&
      self.hasTimespan == otherMessage.hasTimespan &&
      (!self.hasTimespan || [self.timespan isEqual:otherMessage.timespan]) &&
      self.hasSummary == otherMessage.hasSummary &&
      (!self.hasSummary || [self.summary isEqual:otherMessage.summary]) &&
      self.hasIsHeadlineItem == otherMessage.hasIsHeadlineItem &&
      (!self.hasIsHeadlineItem || self.isHeadlineItem == otherMessage.isHeadlineItem) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasJobTitle) {
    hashCode = hashCode * 31 + [self.jobTitle hash];
  }
  if (self.hasCompanyName) {
    hashCode = hashCode * 31 + [self.companyName hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasIndustry) {
    hashCode = hashCode * 31 + [self.industry hash];
  }
  if (self.hasTimespan) {
    hashCode = hashCode * 31 + [self.timespan hash];
  }
  if (self.hasSummary) {
    hashCode = hashCode * 31 + [self.summary hash];
  }
  if (self.hasIsHeadlineItem) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isHeadlineItem] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BEmploymentBuilder()
@property (strong) BEmployment* resultEmployment;
@end

@implementation BEmploymentBuilder
@synthesize resultEmployment;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultEmployment = [[BEmployment alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultEmployment;
}
- (BEmploymentBuilder*) clear {
  self.resultEmployment = [[BEmployment alloc] init];
  return self;
}
- (BEmploymentBuilder*) clone {
  return [BEmployment builderWithPrototype:resultEmployment];
}
- (BEmployment*) defaultInstance {
  return [BEmployment defaultInstance];
}
- (BEmployment*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BEmployment*) buildPartial {
  BEmployment* returnMe = resultEmployment;
  self.resultEmployment = nil;
  return returnMe;
}
- (BEmploymentBuilder*) mergeFrom:(BEmployment*) other {
  if (other == [BEmployment defaultInstance]) {
    return self;
  }
  if (other.hasJobTitle) {
    [self setJobTitle:other.jobTitle];
  }
  if (other.hasCompanyName) {
    [self setCompanyName:other.companyName];
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasIndustry) {
    [self setIndustry:other.industry];
  }
  if (other.hasTimespan) {
    [self mergeTimespan:other.timespan];
  }
  if (other.hasSummary) {
    [self setSummary:other.summary];
  }
  if (other.hasIsHeadlineItem) {
    [self setIsHeadlineItem:other.isHeadlineItem];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BEmploymentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BEmploymentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setJobTitle:[input readString]];
        break;
      }
      case 18: {
        [self setCompanyName:[input readString]];
        break;
      }
      case 26: {
        [self setLocation:[input readString]];
        break;
      }
      case 34: {
        [self setIndustry:[input readString]];
        break;
      }
      case 42: {
        BTimespanBuilder* subBuilder = [BTimespan builder];
        if (self.hasTimespan) {
          [subBuilder mergeFrom:self.timespan];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTimespan:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self setSummary:[input readString]];
        break;
      }
      case 56: {
        [self setIsHeadlineItem:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasJobTitle {
  return resultEmployment.hasJobTitle;
}
- (NSString*) jobTitle {
  return resultEmployment.jobTitle;
}
- (BEmploymentBuilder*) setJobTitle:(NSString*) value {
  resultEmployment.hasJobTitle = YES;
  resultEmployment.jobTitle = value;
  return self;
}
- (BEmploymentBuilder*) clearJobTitle {
  resultEmployment.hasJobTitle = NO;
  resultEmployment.jobTitle = @"";
  return self;
}
- (BOOL) hasCompanyName {
  return resultEmployment.hasCompanyName;
}
- (NSString*) companyName {
  return resultEmployment.companyName;
}
- (BEmploymentBuilder*) setCompanyName:(NSString*) value {
  resultEmployment.hasCompanyName = YES;
  resultEmployment.companyName = value;
  return self;
}
- (BEmploymentBuilder*) clearCompanyName {
  resultEmployment.hasCompanyName = NO;
  resultEmployment.companyName = @"";
  return self;
}
- (BOOL) hasLocation {
  return resultEmployment.hasLocation;
}
- (NSString*) location {
  return resultEmployment.location;
}
- (BEmploymentBuilder*) setLocation:(NSString*) value {
  resultEmployment.hasLocation = YES;
  resultEmployment.location = value;
  return self;
}
- (BEmploymentBuilder*) clearLocation {
  resultEmployment.hasLocation = NO;
  resultEmployment.location = @"";
  return self;
}
- (BOOL) hasIndustry {
  return resultEmployment.hasIndustry;
}
- (NSString*) industry {
  return resultEmployment.industry;
}
- (BEmploymentBuilder*) setIndustry:(NSString*) value {
  resultEmployment.hasIndustry = YES;
  resultEmployment.industry = value;
  return self;
}
- (BEmploymentBuilder*) clearIndustry {
  resultEmployment.hasIndustry = NO;
  resultEmployment.industry = @"";
  return self;
}
- (BOOL) hasTimespan {
  return resultEmployment.hasTimespan;
}
- (BTimespan*) timespan {
  return resultEmployment.timespan;
}
- (BEmploymentBuilder*) setTimespan:(BTimespan*) value {
  resultEmployment.hasTimespan = YES;
  resultEmployment.timespan = value;
  return self;
}
- (BEmploymentBuilder*) setTimespanBuilder:(BTimespanBuilder*) builderForValue {
  return [self setTimespan:[builderForValue build]];
}
- (BEmploymentBuilder*) mergeTimespan:(BTimespan*) value {
  if (resultEmployment.hasTimespan &&
      resultEmployment.timespan != [BTimespan defaultInstance]) {
    resultEmployment.timespan =
      [[[BTimespan builderWithPrototype:resultEmployment.timespan] mergeFrom:value] buildPartial];
  } else {
    resultEmployment.timespan = value;
  }
  resultEmployment.hasTimespan = YES;
  return self;
}
- (BEmploymentBuilder*) clearTimespan {
  resultEmployment.hasTimespan = NO;
  resultEmployment.timespan = [BTimespan defaultInstance];
  return self;
}
- (BOOL) hasSummary {
  return resultEmployment.hasSummary;
}
- (NSString*) summary {
  return resultEmployment.summary;
}
- (BEmploymentBuilder*) setSummary:(NSString*) value {
  resultEmployment.hasSummary = YES;
  resultEmployment.summary = value;
  return self;
}
- (BEmploymentBuilder*) clearSummary {
  resultEmployment.hasSummary = NO;
  resultEmployment.summary = @"";
  return self;
}
- (BOOL) hasIsHeadlineItem {
  return resultEmployment.hasIsHeadlineItem;
}
- (BOOL) isHeadlineItem {
  return resultEmployment.isHeadlineItem;
}
- (BEmploymentBuilder*) setIsHeadlineItem:(BOOL) value {
  resultEmployment.hasIsHeadlineItem = YES;
  resultEmployment.isHeadlineItem = value;
  return self;
}
- (BEmploymentBuilder*) clearIsHeadlineItem {
  resultEmployment.hasIsHeadlineItem = NO;
  resultEmployment.isHeadlineItem = NO;
  return self;
}
@end

@interface BEducation ()
@property (strong) NSString* schoolName;
@property (strong) NSString* degree;
@property (strong) NSString* emphasis;
@property (strong) BTimespan* timespan;
@property (strong) NSString* summary;
@end

@implementation BEducation

- (BOOL) hasSchoolName {
  return !!hasSchoolName_;
}
- (void) setHasSchoolName:(BOOL) _value_ {
  hasSchoolName_ = !!_value_;
}
@synthesize schoolName;
- (BOOL) hasDegree {
  return !!hasDegree_;
}
- (void) setHasDegree:(BOOL) _value_ {
  hasDegree_ = !!_value_;
}
@synthesize degree;
- (BOOL) hasEmphasis {
  return !!hasEmphasis_;
}
- (void) setHasEmphasis:(BOOL) _value_ {
  hasEmphasis_ = !!_value_;
}
@synthesize emphasis;
- (BOOL) hasTimespan {
  return !!hasTimespan_;
}
- (void) setHasTimespan:(BOOL) _value_ {
  hasTimespan_ = !!_value_;
}
@synthesize timespan;
- (BOOL) hasSummary {
  return !!hasSummary_;
}
- (void) setHasSummary:(BOOL) _value_ {
  hasSummary_ = !!_value_;
}
@synthesize summary;
- (instancetype) init {
  if ((self = [super init])) {
    self.schoolName = @"";
    self.degree = @"";
    self.emphasis = @"";
    self.timespan = [BTimespan defaultInstance];
    self.summary = @"";
  }
  return self;
}
static BEducation* defaultBEducationInstance = nil;
+ (void) initialize {
  if (self == [BEducation class]) {
    defaultBEducationInstance = [[BEducation alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBEducationInstance;
}
- (instancetype) defaultInstance {
  return defaultBEducationInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSchoolName) {
    [output writeString:1 value:self.schoolName];
  }
  if (self.hasDegree) {
    [output writeString:2 value:self.degree];
  }
  if (self.hasEmphasis) {
    [output writeString:3 value:self.emphasis];
  }
  if (self.hasTimespan) {
    [output writeMessage:4 value:self.timespan];
  }
  if (self.hasSummary) {
    [output writeString:5 value:self.summary];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSchoolName) {
    size_ += computeStringSize(1, self.schoolName);
  }
  if (self.hasDegree) {
    size_ += computeStringSize(2, self.degree);
  }
  if (self.hasEmphasis) {
    size_ += computeStringSize(3, self.emphasis);
  }
  if (self.hasTimespan) {
    size_ += computeMessageSize(4, self.timespan);
  }
  if (self.hasSummary) {
    size_ += computeStringSize(5, self.summary);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BEducation*) parseFromData:(NSData*) data {
  return (BEducation*)[[[BEducation builder] mergeFromData:data] build];
}
+ (BEducation*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BEducation*)[[[BEducation builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BEducation*) parseFromInputStream:(NSInputStream*) input {
  return (BEducation*)[[[BEducation builder] mergeFromInputStream:input] build];
}
+ (BEducation*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BEducation*)[[[BEducation builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BEducation*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BEducation*)[[[BEducation builder] mergeFromCodedInputStream:input] build];
}
+ (BEducation*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BEducation*)[[[BEducation builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BEducationBuilder*) builder {
  return [[BEducationBuilder alloc] init];
}
+ (BEducationBuilder*) builderWithPrototype:(BEducation*) prototype {
  return [[BEducation builder] mergeFrom:prototype];
}
- (BEducationBuilder*) builder {
  return [BEducation builder];
}
- (BEducationBuilder*) toBuilder {
  return [BEducation builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSchoolName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"schoolName", self.schoolName];
  }
  if (self.hasDegree) {
    [output appendFormat:@"%@%@: %@\n", indent, @"degree", self.degree];
  }
  if (self.hasEmphasis) {
    [output appendFormat:@"%@%@: %@\n", indent, @"emphasis", self.emphasis];
  }
  if (self.hasTimespan) {
    [output appendFormat:@"%@%@ {\n", indent, @"timespan"];
    [self.timespan writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSummary) {
    [output appendFormat:@"%@%@: %@\n", indent, @"summary", self.summary];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSchoolName) {
    [dictionary setObject: self.schoolName forKey: @"schoolName"];
  }
  if (self.hasDegree) {
    [dictionary setObject: self.degree forKey: @"degree"];
  }
  if (self.hasEmphasis) {
    [dictionary setObject: self.emphasis forKey: @"emphasis"];
  }
  if (self.hasTimespan) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.timespan storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"timespan"];
  }
  if (self.hasSummary) {
    [dictionary setObject: self.summary forKey: @"summary"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BEducation class]]) {
    return NO;
  }
  BEducation *otherMessage = other;
  return
      self.hasSchoolName == otherMessage.hasSchoolName &&
      (!self.hasSchoolName || [self.schoolName isEqual:otherMessage.schoolName]) &&
      self.hasDegree == otherMessage.hasDegree &&
      (!self.hasDegree || [self.degree isEqual:otherMessage.degree]) &&
      self.hasEmphasis == otherMessage.hasEmphasis &&
      (!self.hasEmphasis || [self.emphasis isEqual:otherMessage.emphasis]) &&
      self.hasTimespan == otherMessage.hasTimespan &&
      (!self.hasTimespan || [self.timespan isEqual:otherMessage.timespan]) &&
      self.hasSummary == otherMessage.hasSummary &&
      (!self.hasSummary || [self.summary isEqual:otherMessage.summary]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSchoolName) {
    hashCode = hashCode * 31 + [self.schoolName hash];
  }
  if (self.hasDegree) {
    hashCode = hashCode * 31 + [self.degree hash];
  }
  if (self.hasEmphasis) {
    hashCode = hashCode * 31 + [self.emphasis hash];
  }
  if (self.hasTimespan) {
    hashCode = hashCode * 31 + [self.timespan hash];
  }
  if (self.hasSummary) {
    hashCode = hashCode * 31 + [self.summary hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BEducationBuilder()
@property (strong) BEducation* resultEducation;
@end

@implementation BEducationBuilder
@synthesize resultEducation;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultEducation = [[BEducation alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultEducation;
}
- (BEducationBuilder*) clear {
  self.resultEducation = [[BEducation alloc] init];
  return self;
}
- (BEducationBuilder*) clone {
  return [BEducation builderWithPrototype:resultEducation];
}
- (BEducation*) defaultInstance {
  return [BEducation defaultInstance];
}
- (BEducation*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BEducation*) buildPartial {
  BEducation* returnMe = resultEducation;
  self.resultEducation = nil;
  return returnMe;
}
- (BEducationBuilder*) mergeFrom:(BEducation*) other {
  if (other == [BEducation defaultInstance]) {
    return self;
  }
  if (other.hasSchoolName) {
    [self setSchoolName:other.schoolName];
  }
  if (other.hasDegree) {
    [self setDegree:other.degree];
  }
  if (other.hasEmphasis) {
    [self setEmphasis:other.emphasis];
  }
  if (other.hasTimespan) {
    [self mergeTimespan:other.timespan];
  }
  if (other.hasSummary) {
    [self setSummary:other.summary];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BEducationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BEducationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSchoolName:[input readString]];
        break;
      }
      case 18: {
        [self setDegree:[input readString]];
        break;
      }
      case 26: {
        [self setEmphasis:[input readString]];
        break;
      }
      case 34: {
        BTimespanBuilder* subBuilder = [BTimespan builder];
        if (self.hasTimespan) {
          [subBuilder mergeFrom:self.timespan];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTimespan:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setSummary:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSchoolName {
  return resultEducation.hasSchoolName;
}
- (NSString*) schoolName {
  return resultEducation.schoolName;
}
- (BEducationBuilder*) setSchoolName:(NSString*) value {
  resultEducation.hasSchoolName = YES;
  resultEducation.schoolName = value;
  return self;
}
- (BEducationBuilder*) clearSchoolName {
  resultEducation.hasSchoolName = NO;
  resultEducation.schoolName = @"";
  return self;
}
- (BOOL) hasDegree {
  return resultEducation.hasDegree;
}
- (NSString*) degree {
  return resultEducation.degree;
}
- (BEducationBuilder*) setDegree:(NSString*) value {
  resultEducation.hasDegree = YES;
  resultEducation.degree = value;
  return self;
}
- (BEducationBuilder*) clearDegree {
  resultEducation.hasDegree = NO;
  resultEducation.degree = @"";
  return self;
}
- (BOOL) hasEmphasis {
  return resultEducation.hasEmphasis;
}
- (NSString*) emphasis {
  return resultEducation.emphasis;
}
- (BEducationBuilder*) setEmphasis:(NSString*) value {
  resultEducation.hasEmphasis = YES;
  resultEducation.emphasis = value;
  return self;
}
- (BEducationBuilder*) clearEmphasis {
  resultEducation.hasEmphasis = NO;
  resultEducation.emphasis = @"";
  return self;
}
- (BOOL) hasTimespan {
  return resultEducation.hasTimespan;
}
- (BTimespan*) timespan {
  return resultEducation.timespan;
}
- (BEducationBuilder*) setTimespan:(BTimespan*) value {
  resultEducation.hasTimespan = YES;
  resultEducation.timespan = value;
  return self;
}
- (BEducationBuilder*) setTimespanBuilder:(BTimespanBuilder*) builderForValue {
  return [self setTimespan:[builderForValue build]];
}
- (BEducationBuilder*) mergeTimespan:(BTimespan*) value {
  if (resultEducation.hasTimespan &&
      resultEducation.timespan != [BTimespan defaultInstance]) {
    resultEducation.timespan =
      [[[BTimespan builderWithPrototype:resultEducation.timespan] mergeFrom:value] buildPartial];
  } else {
    resultEducation.timespan = value;
  }
  resultEducation.hasTimespan = YES;
  return self;
}
- (BEducationBuilder*) clearTimespan {
  resultEducation.hasTimespan = NO;
  resultEducation.timespan = [BTimespan defaultInstance];
  return self;
}
- (BOOL) hasSummary {
  return resultEducation.hasSummary;
}
- (NSString*) summary {
  return resultEducation.summary;
}
- (BEducationBuilder*) setSummary:(NSString*) value {
  resultEducation.hasSummary = YES;
  resultEducation.summary = value;
  return self;
}
- (BEducationBuilder*) clearSummary {
  resultEducation.hasSummary = NO;
  resultEducation.summary = @"";
  return self;
}
@end

@interface BImageData ()
@property BImageContent imageContent;
@property (strong) NSData* imageBytes;
@property (strong) NSString* contentType;
@property (strong) NSString* imageURL;
@property (strong) BTimestamp* dateAdded;
@property SInt64 crc32;
@property BOOL deleted;
@end

@implementation BImageData

- (BOOL) hasImageContent {
  return !!hasImageContent_;
}
- (void) setHasImageContent:(BOOL) _value_ {
  hasImageContent_ = !!_value_;
}
@synthesize imageContent;
- (BOOL) hasImageBytes {
  return !!hasImageBytes_;
}
- (void) setHasImageBytes:(BOOL) _value_ {
  hasImageBytes_ = !!_value_;
}
@synthesize imageBytes;
- (BOOL) hasContentType {
  return !!hasContentType_;
}
- (void) setHasContentType:(BOOL) _value_ {
  hasContentType_ = !!_value_;
}
@synthesize contentType;
- (BOOL) hasImageURL {
  return !!hasImageURL_;
}
- (void) setHasImageURL:(BOOL) _value_ {
  hasImageURL_ = !!_value_;
}
@synthesize imageURL;
- (BOOL) hasDateAdded {
  return !!hasDateAdded_;
}
- (void) setHasDateAdded:(BOOL) _value_ {
  hasDateAdded_ = !!_value_;
}
@synthesize dateAdded;
- (BOOL) hasCrc32 {
  return !!hasCrc32_;
}
- (void) setHasCrc32:(BOOL) _value_ {
  hasCrc32_ = !!_value_;
}
@synthesize crc32;
- (BOOL) hasDeleted {
  return !!hasDeleted_;
}
- (void) setHasDeleted:(BOOL) _value_ {
  hasDeleted_ = !!_value_;
}
- (BOOL) deleted {
  return !!deleted_;
}
- (void) setDeleted:(BOOL) _value_ {
  deleted_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.imageContent = BImageContentICUnknown;
    self.imageBytes = [NSData data];
    self.contentType = @"";
    self.imageURL = @"";
    self.dateAdded = [BTimestamp defaultInstance];
    self.crc32 = 0L;
    self.deleted = NO;
  }
  return self;
}
static BImageData* defaultBImageDataInstance = nil;
+ (void) initialize {
  if (self == [BImageData class]) {
    defaultBImageDataInstance = [[BImageData alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBImageDataInstance;
}
- (instancetype) defaultInstance {
  return defaultBImageDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasImageContent) {
    [output writeEnum:1 value:self.imageContent];
  }
  if (self.hasImageBytes) {
    [output writeData:2 value:self.imageBytes];
  }
  if (self.hasContentType) {
    [output writeString:3 value:self.contentType];
  }
  if (self.hasImageURL) {
    [output writeString:4 value:self.imageURL];
  }
  if (self.hasDateAdded) {
    [output writeMessage:5 value:self.dateAdded];
  }
  if (self.hasCrc32) {
    [output writeInt64:6 value:self.crc32];
  }
  if (self.hasDeleted) {
    [output writeBool:7 value:self.deleted];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasImageContent) {
    size_ += computeEnumSize(1, self.imageContent);
  }
  if (self.hasImageBytes) {
    size_ += computeDataSize(2, self.imageBytes);
  }
  if (self.hasContentType) {
    size_ += computeStringSize(3, self.contentType);
  }
  if (self.hasImageURL) {
    size_ += computeStringSize(4, self.imageURL);
  }
  if (self.hasDateAdded) {
    size_ += computeMessageSize(5, self.dateAdded);
  }
  if (self.hasCrc32) {
    size_ += computeInt64Size(6, self.crc32);
  }
  if (self.hasDeleted) {
    size_ += computeBoolSize(7, self.deleted);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BImageData*) parseFromData:(NSData*) data {
  return (BImageData*)[[[BImageData builder] mergeFromData:data] build];
}
+ (BImageData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BImageData*)[[[BImageData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BImageData*) parseFromInputStream:(NSInputStream*) input {
  return (BImageData*)[[[BImageData builder] mergeFromInputStream:input] build];
}
+ (BImageData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BImageData*)[[[BImageData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BImageData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BImageData*)[[[BImageData builder] mergeFromCodedInputStream:input] build];
}
+ (BImageData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BImageData*)[[[BImageData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BImageDataBuilder*) builder {
  return [[BImageDataBuilder alloc] init];
}
+ (BImageDataBuilder*) builderWithPrototype:(BImageData*) prototype {
  return [[BImageData builder] mergeFrom:prototype];
}
- (BImageDataBuilder*) builder {
  return [BImageData builder];
}
- (BImageDataBuilder*) toBuilder {
  return [BImageData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasImageContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageContent", NSStringFromBImageContent(self.imageContent)];
  }
  if (self.hasImageBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageBytes", self.imageBytes];
  }
  if (self.hasContentType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contentType", self.contentType];
  }
  if (self.hasImageURL) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageURL", self.imageURL];
  }
  if (self.hasDateAdded) {
    [output appendFormat:@"%@%@ {\n", indent, @"dateAdded"];
    [self.dateAdded writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCrc32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"crc32", [NSNumber numberWithLongLong:self.crc32]];
  }
  if (self.hasDeleted) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deleted", [NSNumber numberWithBool:self.deleted]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasImageContent) {
    [dictionary setObject: @(self.imageContent) forKey: @"imageContent"];
  }
  if (self.hasImageBytes) {
    [dictionary setObject: self.imageBytes forKey: @"imageBytes"];
  }
  if (self.hasContentType) {
    [dictionary setObject: self.contentType forKey: @"contentType"];
  }
  if (self.hasImageURL) {
    [dictionary setObject: self.imageURL forKey: @"imageURL"];
  }
  if (self.hasDateAdded) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.dateAdded storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"dateAdded"];
  }
  if (self.hasCrc32) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.crc32] forKey: @"crc32"];
  }
  if (self.hasDeleted) {
    [dictionary setObject: [NSNumber numberWithBool:self.deleted] forKey: @"deleted"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BImageData class]]) {
    return NO;
  }
  BImageData *otherMessage = other;
  return
      self.hasImageContent == otherMessage.hasImageContent &&
      (!self.hasImageContent || self.imageContent == otherMessage.imageContent) &&
      self.hasImageBytes == otherMessage.hasImageBytes &&
      (!self.hasImageBytes || [self.imageBytes isEqual:otherMessage.imageBytes]) &&
      self.hasContentType == otherMessage.hasContentType &&
      (!self.hasContentType || [self.contentType isEqual:otherMessage.contentType]) &&
      self.hasImageURL == otherMessage.hasImageURL &&
      (!self.hasImageURL || [self.imageURL isEqual:otherMessage.imageURL]) &&
      self.hasDateAdded == otherMessage.hasDateAdded &&
      (!self.hasDateAdded || [self.dateAdded isEqual:otherMessage.dateAdded]) &&
      self.hasCrc32 == otherMessage.hasCrc32 &&
      (!self.hasCrc32 || self.crc32 == otherMessage.crc32) &&
      self.hasDeleted == otherMessage.hasDeleted &&
      (!self.hasDeleted || self.deleted == otherMessage.deleted) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasImageContent) {
    hashCode = hashCode * 31 + self.imageContent;
  }
  if (self.hasImageBytes) {
    hashCode = hashCode * 31 + [self.imageBytes hash];
  }
  if (self.hasContentType) {
    hashCode = hashCode * 31 + [self.contentType hash];
  }
  if (self.hasImageURL) {
    hashCode = hashCode * 31 + [self.imageURL hash];
  }
  if (self.hasDateAdded) {
    hashCode = hashCode * 31 + [self.dateAdded hash];
  }
  if (self.hasCrc32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.crc32] hash];
  }
  if (self.hasDeleted) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.deleted] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BImageDataBuilder()
@property (strong) BImageData* resultImageData;
@end

@implementation BImageDataBuilder
@synthesize resultImageData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImageData = [[BImageData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImageData;
}
- (BImageDataBuilder*) clear {
  self.resultImageData = [[BImageData alloc] init];
  return self;
}
- (BImageDataBuilder*) clone {
  return [BImageData builderWithPrototype:resultImageData];
}
- (BImageData*) defaultInstance {
  return [BImageData defaultInstance];
}
- (BImageData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BImageData*) buildPartial {
  BImageData* returnMe = resultImageData;
  self.resultImageData = nil;
  return returnMe;
}
- (BImageDataBuilder*) mergeFrom:(BImageData*) other {
  if (other == [BImageData defaultInstance]) {
    return self;
  }
  if (other.hasImageContent) {
    [self setImageContent:other.imageContent];
  }
  if (other.hasImageBytes) {
    [self setImageBytes:other.imageBytes];
  }
  if (other.hasContentType) {
    [self setContentType:other.contentType];
  }
  if (other.hasImageURL) {
    [self setImageURL:other.imageURL];
  }
  if (other.hasDateAdded) {
    [self mergeDateAdded:other.dateAdded];
  }
  if (other.hasCrc32) {
    [self setCrc32:other.crc32];
  }
  if (other.hasDeleted) {
    [self setDeleted:other.deleted];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BImageDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BImageDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        BImageContent value = (BImageContent)[input readEnum];
        if (BImageContentIsValidValue(value)) {
          [self setImageContent:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setImageBytes:[input readData]];
        break;
      }
      case 26: {
        [self setContentType:[input readString]];
        break;
      }
      case 34: {
        [self setImageURL:[input readString]];
        break;
      }
      case 42: {
        BTimestampBuilder* subBuilder = [BTimestamp builder];
        if (self.hasDateAdded) {
          [subBuilder mergeFrom:self.dateAdded];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDateAdded:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setCrc32:[input readInt64]];
        break;
      }
      case 56: {
        [self setDeleted:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasImageContent {
  return resultImageData.hasImageContent;
}
- (BImageContent) imageContent {
  return resultImageData.imageContent;
}
- (BImageDataBuilder*) setImageContent:(BImageContent) value {
  resultImageData.hasImageContent = YES;
  resultImageData.imageContent = value;
  return self;
}
- (BImageDataBuilder*) clearImageContent {
  resultImageData.hasImageContent = NO;
  resultImageData.imageContent = BImageContentICUnknown;
  return self;
}
- (BOOL) hasImageBytes {
  return resultImageData.hasImageBytes;
}
- (NSData*) imageBytes {
  return resultImageData.imageBytes;
}
- (BImageDataBuilder*) setImageBytes:(NSData*) value {
  resultImageData.hasImageBytes = YES;
  resultImageData.imageBytes = value;
  return self;
}
- (BImageDataBuilder*) clearImageBytes {
  resultImageData.hasImageBytes = NO;
  resultImageData.imageBytes = [NSData data];
  return self;
}
- (BOOL) hasContentType {
  return resultImageData.hasContentType;
}
- (NSString*) contentType {
  return resultImageData.contentType;
}
- (BImageDataBuilder*) setContentType:(NSString*) value {
  resultImageData.hasContentType = YES;
  resultImageData.contentType = value;
  return self;
}
- (BImageDataBuilder*) clearContentType {
  resultImageData.hasContentType = NO;
  resultImageData.contentType = @"";
  return self;
}
- (BOOL) hasImageURL {
  return resultImageData.hasImageURL;
}
- (NSString*) imageURL {
  return resultImageData.imageURL;
}
- (BImageDataBuilder*) setImageURL:(NSString*) value {
  resultImageData.hasImageURL = YES;
  resultImageData.imageURL = value;
  return self;
}
- (BImageDataBuilder*) clearImageURL {
  resultImageData.hasImageURL = NO;
  resultImageData.imageURL = @"";
  return self;
}
- (BOOL) hasDateAdded {
  return resultImageData.hasDateAdded;
}
- (BTimestamp*) dateAdded {
  return resultImageData.dateAdded;
}
- (BImageDataBuilder*) setDateAdded:(BTimestamp*) value {
  resultImageData.hasDateAdded = YES;
  resultImageData.dateAdded = value;
  return self;
}
- (BImageDataBuilder*) setDateAddedBuilder:(BTimestampBuilder*) builderForValue {
  return [self setDateAdded:[builderForValue build]];
}
- (BImageDataBuilder*) mergeDateAdded:(BTimestamp*) value {
  if (resultImageData.hasDateAdded &&
      resultImageData.dateAdded != [BTimestamp defaultInstance]) {
    resultImageData.dateAdded =
      [[[BTimestamp builderWithPrototype:resultImageData.dateAdded] mergeFrom:value] buildPartial];
  } else {
    resultImageData.dateAdded = value;
  }
  resultImageData.hasDateAdded = YES;
  return self;
}
- (BImageDataBuilder*) clearDateAdded {
  resultImageData.hasDateAdded = NO;
  resultImageData.dateAdded = [BTimestamp defaultInstance];
  return self;
}
- (BOOL) hasCrc32 {
  return resultImageData.hasCrc32;
}
- (SInt64) crc32 {
  return resultImageData.crc32;
}
- (BImageDataBuilder*) setCrc32:(SInt64) value {
  resultImageData.hasCrc32 = YES;
  resultImageData.crc32 = value;
  return self;
}
- (BImageDataBuilder*) clearCrc32 {
  resultImageData.hasCrc32 = NO;
  resultImageData.crc32 = 0L;
  return self;
}
- (BOOL) hasDeleted {
  return resultImageData.hasDeleted;
}
- (BOOL) deleted {
  return resultImageData.deleted;
}
- (BImageDataBuilder*) setDeleted:(BOOL) value {
  resultImageData.hasDeleted = YES;
  resultImageData.deleted = value;
  return self;
}
- (BImageDataBuilder*) clearDeleted {
  resultImageData.hasDeleted = NO;
  resultImageData.deleted = NO;
  return self;
}
@end

@interface BUserReview ()
@property (strong) NSString* userID;
@property (strong) NSString* reviewerID;
@property (strong) BTimestamp* timestamp;
@property (strong) NSString* conversationID;
@property Float64 responsive;
@property Float64 outgoing;
@property Float64 recommended;
@property (strong) NSString* reviewText;
@property (strong) NSMutableArray * tagsArray;
@end

@implementation BUserReview

- (BOOL) hasUserID {
  return !!hasUserID_;
}
- (void) setHasUserID:(BOOL) _value_ {
  hasUserID_ = !!_value_;
}
@synthesize userID;
- (BOOL) hasReviewerID {
  return !!hasReviewerID_;
}
- (void) setHasReviewerID:(BOOL) _value_ {
  hasReviewerID_ = !!_value_;
}
@synthesize reviewerID;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasConversationID {
  return !!hasConversationID_;
}
- (void) setHasConversationID:(BOOL) _value_ {
  hasConversationID_ = !!_value_;
}
@synthesize conversationID;
- (BOOL) hasResponsive {
  return !!hasResponsive_;
}
- (void) setHasResponsive:(BOOL) _value_ {
  hasResponsive_ = !!_value_;
}
@synthesize responsive;
- (BOOL) hasOutgoing {
  return !!hasOutgoing_;
}
- (void) setHasOutgoing:(BOOL) _value_ {
  hasOutgoing_ = !!_value_;
}
@synthesize outgoing;
- (BOOL) hasRecommended {
  return !!hasRecommended_;
}
- (void) setHasRecommended:(BOOL) _value_ {
  hasRecommended_ = !!_value_;
}
@synthesize recommended;
- (BOOL) hasReviewText {
  return !!hasReviewText_;
}
- (void) setHasReviewText:(BOOL) _value_ {
  hasReviewText_ = !!_value_;
}
@synthesize reviewText;
@synthesize tagsArray;
@dynamic tags;
- (instancetype) init {
  if ((self = [super init])) {
    self.userID = @"";
    self.reviewerID = @"";
    self.timestamp = [BTimestamp defaultInstance];
    self.conversationID = @"";
    self.responsive = 0;
    self.outgoing = 0;
    self.recommended = 0;
    self.reviewText = @"";
  }
  return self;
}
static BUserReview* defaultBUserReviewInstance = nil;
+ (void) initialize {
  if (self == [BUserReview class]) {
    defaultBUserReviewInstance = [[BUserReview alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBUserReviewInstance;
}
- (instancetype) defaultInstance {
  return defaultBUserReviewInstance;
}
- (NSArray *)tags {
  return tagsArray;
}
- (NSString*)tagsAtIndex:(NSUInteger)index {
  return [tagsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserID) {
    [output writeString:1 value:self.userID];
  }
  if (self.hasReviewerID) {
    [output writeString:2 value:self.reviewerID];
  }
  if (self.hasTimestamp) {
    [output writeMessage:3 value:self.timestamp];
  }
  if (self.hasConversationID) {
    [output writeString:4 value:self.conversationID];
  }
  if (self.hasResponsive) {
    [output writeDouble:5 value:self.responsive];
  }
  if (self.hasOutgoing) {
    [output writeDouble:6 value:self.outgoing];
  }
  if (self.hasRecommended) {
    [output writeDouble:7 value:self.recommended];
  }
  if (self.hasReviewText) {
    [output writeString:8 value:self.reviewText];
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:9 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserID) {
    size_ += computeStringSize(1, self.userID);
  }
  if (self.hasReviewerID) {
    size_ += computeStringSize(2, self.reviewerID);
  }
  if (self.hasTimestamp) {
    size_ += computeMessageSize(3, self.timestamp);
  }
  if (self.hasConversationID) {
    size_ += computeStringSize(4, self.conversationID);
  }
  if (self.hasResponsive) {
    size_ += computeDoubleSize(5, self.responsive);
  }
  if (self.hasOutgoing) {
    size_ += computeDoubleSize(6, self.outgoing);
  }
  if (self.hasRecommended) {
    size_ += computeDoubleSize(7, self.recommended);
  }
  if (self.hasReviewText) {
    size_ += computeStringSize(8, self.reviewText);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.tagsArray.count;
    [self.tagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BUserReview*) parseFromData:(NSData*) data {
  return (BUserReview*)[[[BUserReview builder] mergeFromData:data] build];
}
+ (BUserReview*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserReview*)[[[BUserReview builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BUserReview*) parseFromInputStream:(NSInputStream*) input {
  return (BUserReview*)[[[BUserReview builder] mergeFromInputStream:input] build];
}
+ (BUserReview*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserReview*)[[[BUserReview builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserReview*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BUserReview*)[[[BUserReview builder] mergeFromCodedInputStream:input] build];
}
+ (BUserReview*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserReview*)[[[BUserReview builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserReviewBuilder*) builder {
  return [[BUserReviewBuilder alloc] init];
}
+ (BUserReviewBuilder*) builderWithPrototype:(BUserReview*) prototype {
  return [[BUserReview builder] mergeFrom:prototype];
}
- (BUserReviewBuilder*) builder {
  return [BUserReview builder];
}
- (BUserReviewBuilder*) toBuilder {
  return [BUserReview builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userID", self.userID];
  }
  if (self.hasReviewerID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reviewerID", self.reviewerID];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@ {\n", indent, @"timestamp"];
    [self.timestamp writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasConversationID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"conversationID", self.conversationID];
  }
  if (self.hasResponsive) {
    [output appendFormat:@"%@%@: %@\n", indent, @"responsive", [NSNumber numberWithDouble:self.responsive]];
  }
  if (self.hasOutgoing) {
    [output appendFormat:@"%@%@: %@\n", indent, @"outgoing", [NSNumber numberWithDouble:self.outgoing]];
  }
  if (self.hasRecommended) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recommended", [NSNumber numberWithDouble:self.recommended]];
  }
  if (self.hasReviewText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reviewText", self.reviewText];
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tags", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserID) {
    [dictionary setObject: self.userID forKey: @"userID"];
  }
  if (self.hasReviewerID) {
    [dictionary setObject: self.reviewerID forKey: @"reviewerID"];
  }
  if (self.hasTimestamp) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.timestamp storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"timestamp"];
  }
  if (self.hasConversationID) {
    [dictionary setObject: self.conversationID forKey: @"conversationID"];
  }
  if (self.hasResponsive) {
    [dictionary setObject: [NSNumber numberWithDouble:self.responsive] forKey: @"responsive"];
  }
  if (self.hasOutgoing) {
    [dictionary setObject: [NSNumber numberWithDouble:self.outgoing] forKey: @"outgoing"];
  }
  if (self.hasRecommended) {
    [dictionary setObject: [NSNumber numberWithDouble:self.recommended] forKey: @"recommended"];
  }
  if (self.hasReviewText) {
    [dictionary setObject: self.reviewText forKey: @"reviewText"];
  }
  [dictionary setObject:self.tags forKey: @"tags"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BUserReview class]]) {
    return NO;
  }
  BUserReview *otherMessage = other;
  return
      self.hasUserID == otherMessage.hasUserID &&
      (!self.hasUserID || [self.userID isEqual:otherMessage.userID]) &&
      self.hasReviewerID == otherMessage.hasReviewerID &&
      (!self.hasReviewerID || [self.reviewerID isEqual:otherMessage.reviewerID]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || [self.timestamp isEqual:otherMessage.timestamp]) &&
      self.hasConversationID == otherMessage.hasConversationID &&
      (!self.hasConversationID || [self.conversationID isEqual:otherMessage.conversationID]) &&
      self.hasResponsive == otherMessage.hasResponsive &&
      (!self.hasResponsive || self.responsive == otherMessage.responsive) &&
      self.hasOutgoing == otherMessage.hasOutgoing &&
      (!self.hasOutgoing || self.outgoing == otherMessage.outgoing) &&
      self.hasRecommended == otherMessage.hasRecommended &&
      (!self.hasRecommended || self.recommended == otherMessage.recommended) &&
      self.hasReviewText == otherMessage.hasReviewText &&
      (!self.hasReviewText || [self.reviewText isEqual:otherMessage.reviewText]) &&
      [self.tagsArray isEqualToArray:otherMessage.tagsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserID) {
    hashCode = hashCode * 31 + [self.userID hash];
  }
  if (self.hasReviewerID) {
    hashCode = hashCode * 31 + [self.reviewerID hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [self.timestamp hash];
  }
  if (self.hasConversationID) {
    hashCode = hashCode * 31 + [self.conversationID hash];
  }
  if (self.hasResponsive) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.responsive] hash];
  }
  if (self.hasOutgoing) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.outgoing] hash];
  }
  if (self.hasRecommended) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.recommended] hash];
  }
  if (self.hasReviewText) {
    hashCode = hashCode * 31 + [self.reviewText hash];
  }
  [self.tagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BUserReviewBuilder()
@property (strong) BUserReview* resultUserReview;
@end

@implementation BUserReviewBuilder
@synthesize resultUserReview;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserReview = [[BUserReview alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserReview;
}
- (BUserReviewBuilder*) clear {
  self.resultUserReview = [[BUserReview alloc] init];
  return self;
}
- (BUserReviewBuilder*) clone {
  return [BUserReview builderWithPrototype:resultUserReview];
}
- (BUserReview*) defaultInstance {
  return [BUserReview defaultInstance];
}
- (BUserReview*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BUserReview*) buildPartial {
  BUserReview* returnMe = resultUserReview;
  self.resultUserReview = nil;
  return returnMe;
}
- (BUserReviewBuilder*) mergeFrom:(BUserReview*) other {
  if (other == [BUserReview defaultInstance]) {
    return self;
  }
  if (other.hasUserID) {
    [self setUserID:other.userID];
  }
  if (other.hasReviewerID) {
    [self setReviewerID:other.reviewerID];
  }
  if (other.hasTimestamp) {
    [self mergeTimestamp:other.timestamp];
  }
  if (other.hasConversationID) {
    [self setConversationID:other.conversationID];
  }
  if (other.hasResponsive) {
    [self setResponsive:other.responsive];
  }
  if (other.hasOutgoing) {
    [self setOutgoing:other.outgoing];
  }
  if (other.hasRecommended) {
    [self setRecommended:other.recommended];
  }
  if (other.hasReviewText) {
    [self setReviewText:other.reviewText];
  }
  if (other.tagsArray.count > 0) {
    if (resultUserReview.tagsArray == nil) {
      resultUserReview.tagsArray = [[NSMutableArray alloc] initWithArray:other.tagsArray];
    } else {
      [resultUserReview.tagsArray addObjectsFromArray:other.tagsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BUserReviewBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BUserReviewBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserID:[input readString]];
        break;
      }
      case 18: {
        [self setReviewerID:[input readString]];
        break;
      }
      case 26: {
        BTimestampBuilder* subBuilder = [BTimestamp builder];
        if (self.hasTimestamp) {
          [subBuilder mergeFrom:self.timestamp];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTimestamp:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setConversationID:[input readString]];
        break;
      }
      case 41: {
        [self setResponsive:[input readDouble]];
        break;
      }
      case 49: {
        [self setOutgoing:[input readDouble]];
        break;
      }
      case 57: {
        [self setRecommended:[input readDouble]];
        break;
      }
      case 66: {
        [self setReviewText:[input readString]];
        break;
      }
      case 74: {
        [self addTags:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserID {
  return resultUserReview.hasUserID;
}
- (NSString*) userID {
  return resultUserReview.userID;
}
- (BUserReviewBuilder*) setUserID:(NSString*) value {
  resultUserReview.hasUserID = YES;
  resultUserReview.userID = value;
  return self;
}
- (BUserReviewBuilder*) clearUserID {
  resultUserReview.hasUserID = NO;
  resultUserReview.userID = @"";
  return self;
}
- (BOOL) hasReviewerID {
  return resultUserReview.hasReviewerID;
}
- (NSString*) reviewerID {
  return resultUserReview.reviewerID;
}
- (BUserReviewBuilder*) setReviewerID:(NSString*) value {
  resultUserReview.hasReviewerID = YES;
  resultUserReview.reviewerID = value;
  return self;
}
- (BUserReviewBuilder*) clearReviewerID {
  resultUserReview.hasReviewerID = NO;
  resultUserReview.reviewerID = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultUserReview.hasTimestamp;
}
- (BTimestamp*) timestamp {
  return resultUserReview.timestamp;
}
- (BUserReviewBuilder*) setTimestamp:(BTimestamp*) value {
  resultUserReview.hasTimestamp = YES;
  resultUserReview.timestamp = value;
  return self;
}
- (BUserReviewBuilder*) setTimestampBuilder:(BTimestampBuilder*) builderForValue {
  return [self setTimestamp:[builderForValue build]];
}
- (BUserReviewBuilder*) mergeTimestamp:(BTimestamp*) value {
  if (resultUserReview.hasTimestamp &&
      resultUserReview.timestamp != [BTimestamp defaultInstance]) {
    resultUserReview.timestamp =
      [[[BTimestamp builderWithPrototype:resultUserReview.timestamp] mergeFrom:value] buildPartial];
  } else {
    resultUserReview.timestamp = value;
  }
  resultUserReview.hasTimestamp = YES;
  return self;
}
- (BUserReviewBuilder*) clearTimestamp {
  resultUserReview.hasTimestamp = NO;
  resultUserReview.timestamp = [BTimestamp defaultInstance];
  return self;
}
- (BOOL) hasConversationID {
  return resultUserReview.hasConversationID;
}
- (NSString*) conversationID {
  return resultUserReview.conversationID;
}
- (BUserReviewBuilder*) setConversationID:(NSString*) value {
  resultUserReview.hasConversationID = YES;
  resultUserReview.conversationID = value;
  return self;
}
- (BUserReviewBuilder*) clearConversationID {
  resultUserReview.hasConversationID = NO;
  resultUserReview.conversationID = @"";
  return self;
}
- (BOOL) hasResponsive {
  return resultUserReview.hasResponsive;
}
- (Float64) responsive {
  return resultUserReview.responsive;
}
- (BUserReviewBuilder*) setResponsive:(Float64) value {
  resultUserReview.hasResponsive = YES;
  resultUserReview.responsive = value;
  return self;
}
- (BUserReviewBuilder*) clearResponsive {
  resultUserReview.hasResponsive = NO;
  resultUserReview.responsive = 0;
  return self;
}
- (BOOL) hasOutgoing {
  return resultUserReview.hasOutgoing;
}
- (Float64) outgoing {
  return resultUserReview.outgoing;
}
- (BUserReviewBuilder*) setOutgoing:(Float64) value {
  resultUserReview.hasOutgoing = YES;
  resultUserReview.outgoing = value;
  return self;
}
- (BUserReviewBuilder*) clearOutgoing {
  resultUserReview.hasOutgoing = NO;
  resultUserReview.outgoing = 0;
  return self;
}
- (BOOL) hasRecommended {
  return resultUserReview.hasRecommended;
}
- (Float64) recommended {
  return resultUserReview.recommended;
}
- (BUserReviewBuilder*) setRecommended:(Float64) value {
  resultUserReview.hasRecommended = YES;
  resultUserReview.recommended = value;
  return self;
}
- (BUserReviewBuilder*) clearRecommended {
  resultUserReview.hasRecommended = NO;
  resultUserReview.recommended = 0;
  return self;
}
- (BOOL) hasReviewText {
  return resultUserReview.hasReviewText;
}
- (NSString*) reviewText {
  return resultUserReview.reviewText;
}
- (BUserReviewBuilder*) setReviewText:(NSString*) value {
  resultUserReview.hasReviewText = YES;
  resultUserReview.reviewText = value;
  return self;
}
- (BUserReviewBuilder*) clearReviewText {
  resultUserReview.hasReviewText = NO;
  resultUserReview.reviewText = @"";
  return self;
}
- (NSMutableArray *)tags {
  return resultUserReview.tagsArray;
}
- (NSString*)tagsAtIndex:(NSUInteger)index {
  return [resultUserReview tagsAtIndex:index];
}
- (BUserReviewBuilder *)addTags:(NSString*)value {
  if (resultUserReview.tagsArray == nil) {
    resultUserReview.tagsArray = [[NSMutableArray alloc]init];
  }
  [resultUserReview.tagsArray addObject:value];
  return self;
}
- (BUserReviewBuilder *)setTagsArray:(NSArray *)array {
  resultUserReview.tagsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (BUserReviewBuilder *)clearTags {
  resultUserReview.tagsArray = nil;
  return self;
}
@end

@interface BUserProfile ()
@property (strong) NSString* userID;
@property BUserStatus userStatus;
@property (strong) BTimestamp* creationDate;
@property (strong) BTimestamp* lastSeen;
@property (strong) NSString* name;
@property BGender gender;
@property (strong) BTimestamp* birthday;
@property (strong) NSMutableArray * imagesArray;
@property (strong) NSMutableArray * socialIdentitiesArray;
@property (strong) NSMutableArray * contactInfoArray;
@property (strong) BEmployment* headlineEmployment;
@property (strong) NSMutableArray * employmentArray;
@property (strong) NSMutableArray * educationArray;
@property (strong) NSMutableArray * entityTagsArray;
@property (strong) NSMutableArray * interestTagsArray;
@property (strong) NSString* backgroundSummary;
@property SInt32 ratingCount;
@property Float64 ratingResponsive;
@property Float64 ratingOutgoing;
@property Float64 ratingRecommended;
@property Float64 responseSeconds;
@property (strong) NSMutableArray * reviewsArray;
@property BOOL isExpert;
@property (strong) NSString* stripeAccount;
@property BOOL serviceIsFreeForUser;
@property (strong) NSString* chatFee;
@property (strong) NSString* callFee;
@property SInt64 userInfo;
@property (strong) NSString* editProfileID;
@property BOOL isAdmin;
@end

@implementation BUserProfile

- (BOOL) hasUserID {
  return !!hasUserID_;
}
- (void) setHasUserID:(BOOL) _value_ {
  hasUserID_ = !!_value_;
}
@synthesize userID;
- (BOOL) hasUserStatus {
  return !!hasUserStatus_;
}
- (void) setHasUserStatus:(BOOL) _value_ {
  hasUserStatus_ = !!_value_;
}
@synthesize userStatus;
- (BOOL) hasCreationDate {
  return !!hasCreationDate_;
}
- (void) setHasCreationDate:(BOOL) _value_ {
  hasCreationDate_ = !!_value_;
}
@synthesize creationDate;
- (BOOL) hasLastSeen {
  return !!hasLastSeen_;
}
- (void) setHasLastSeen:(BOOL) _value_ {
  hasLastSeen_ = !!_value_;
}
@synthesize lastSeen;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
@synthesize gender;
- (BOOL) hasBirthday {
  return !!hasBirthday_;
}
- (void) setHasBirthday:(BOOL) _value_ {
  hasBirthday_ = !!_value_;
}
@synthesize birthday;
@synthesize imagesArray;
@dynamic images;
@synthesize socialIdentitiesArray;
@dynamic socialIdentities;
@synthesize contactInfoArray;
@dynamic contactInfo;
- (BOOL) hasHeadlineEmployment {
  return !!hasHeadlineEmployment_;
}
- (void) setHasHeadlineEmployment:(BOOL) _value_ {
  hasHeadlineEmployment_ = !!_value_;
}
@synthesize headlineEmployment;
@synthesize employmentArray;
@dynamic employment;
@synthesize educationArray;
@dynamic education;
@synthesize entityTagsArray;
@dynamic entityTags;
@synthesize interestTagsArray;
@dynamic interestTags;
- (BOOL) hasBackgroundSummary {
  return !!hasBackgroundSummary_;
}
- (void) setHasBackgroundSummary:(BOOL) _value_ {
  hasBackgroundSummary_ = !!_value_;
}
@synthesize backgroundSummary;
- (BOOL) hasRatingCount {
  return !!hasRatingCount_;
}
- (void) setHasRatingCount:(BOOL) _value_ {
  hasRatingCount_ = !!_value_;
}
@synthesize ratingCount;
- (BOOL) hasRatingResponsive {
  return !!hasRatingResponsive_;
}
- (void) setHasRatingResponsive:(BOOL) _value_ {
  hasRatingResponsive_ = !!_value_;
}
@synthesize ratingResponsive;
- (BOOL) hasRatingOutgoing {
  return !!hasRatingOutgoing_;
}
- (void) setHasRatingOutgoing:(BOOL) _value_ {
  hasRatingOutgoing_ = !!_value_;
}
@synthesize ratingOutgoing;
- (BOOL) hasRatingRecommended {
  return !!hasRatingRecommended_;
}
- (void) setHasRatingRecommended:(BOOL) _value_ {
  hasRatingRecommended_ = !!_value_;
}
@synthesize ratingRecommended;
- (BOOL) hasResponseSeconds {
  return !!hasResponseSeconds_;
}
- (void) setHasResponseSeconds:(BOOL) _value_ {
  hasResponseSeconds_ = !!_value_;
}
@synthesize responseSeconds;
@synthesize reviewsArray;
@dynamic reviews;
- (BOOL) hasIsExpert {
  return !!hasIsExpert_;
}
- (void) setHasIsExpert:(BOOL) _value_ {
  hasIsExpert_ = !!_value_;
}
- (BOOL) isExpert {
  return !!isExpert_;
}
- (void) setIsExpert:(BOOL) _value_ {
  isExpert_ = !!_value_;
}
- (BOOL) hasStripeAccount {
  return !!hasStripeAccount_;
}
- (void) setHasStripeAccount:(BOOL) _value_ {
  hasStripeAccount_ = !!_value_;
}
@synthesize stripeAccount;
- (BOOL) hasServiceIsFreeForUser {
  return !!hasServiceIsFreeForUser_;
}
- (void) setHasServiceIsFreeForUser:(BOOL) _value_ {
  hasServiceIsFreeForUser_ = !!_value_;
}
- (BOOL) serviceIsFreeForUser {
  return !!serviceIsFreeForUser_;
}
- (void) setServiceIsFreeForUser:(BOOL) _value_ {
  serviceIsFreeForUser_ = !!_value_;
}
- (BOOL) hasChatFee {
  return !!hasChatFee_;
}
- (void) setHasChatFee:(BOOL) _value_ {
  hasChatFee_ = !!_value_;
}
@synthesize chatFee;
- (BOOL) hasCallFee {
  return !!hasCallFee_;
}
- (void) setHasCallFee:(BOOL) _value_ {
  hasCallFee_ = !!_value_;
}
@synthesize callFee;
- (BOOL) hasUserInfo {
  return !!hasUserInfo_;
}
- (void) setHasUserInfo:(BOOL) _value_ {
  hasUserInfo_ = !!_value_;
}
@synthesize userInfo;
- (BOOL) hasEditProfileID {
  return !!hasEditProfileID_;
}
- (void) setHasEditProfileID:(BOOL) _value_ {
  hasEditProfileID_ = !!_value_;
}
@synthesize editProfileID;
- (BOOL) hasIsAdmin {
  return !!hasIsAdmin_;
}
- (void) setHasIsAdmin:(BOOL) _value_ {
  hasIsAdmin_ = !!_value_;
}
- (BOOL) isAdmin {
  return !!isAdmin_;
}
- (void) setIsAdmin:(BOOL) _value_ {
  isAdmin_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.userID = @"";
    self.userStatus = BUserStatusUSUnknown;
    self.creationDate = [BTimestamp defaultInstance];
    self.lastSeen = [BTimestamp defaultInstance];
    self.name = @"";
    self.gender = BGenderGUnknown;
    self.birthday = [BTimestamp defaultInstance];
    self.headlineEmployment = [BEmployment defaultInstance];
    self.backgroundSummary = @"";
    self.ratingCount = 0;
    self.ratingResponsive = 0;
    self.ratingOutgoing = 0;
    self.ratingRecommended = 0;
    self.responseSeconds = 0;
    self.isExpert = NO;
    self.stripeAccount = @"";
    self.serviceIsFreeForUser = NO;
    self.chatFee = @"";
    self.callFee = @"";
    self.userInfo = 0L;
    self.editProfileID = @"";
    self.isAdmin = NO;
  }
  return self;
}
static BUserProfile* defaultBUserProfileInstance = nil;
+ (void) initialize {
  if (self == [BUserProfile class]) {
    defaultBUserProfileInstance = [[BUserProfile alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBUserProfileInstance;
}
- (instancetype) defaultInstance {
  return defaultBUserProfileInstance;
}
- (NSArray *)images {
  return imagesArray;
}
- (BImageData*)imagesAtIndex:(NSUInteger)index {
  return [imagesArray objectAtIndex:index];
}
- (NSArray *)socialIdentities {
  return socialIdentitiesArray;
}
- (BSocialIdentity*)socialIdentitiesAtIndex:(NSUInteger)index {
  return [socialIdentitiesArray objectAtIndex:index];
}
- (NSArray *)contactInfo {
  return contactInfoArray;
}
- (BContactInfo*)contactInfoAtIndex:(NSUInteger)index {
  return [contactInfoArray objectAtIndex:index];
}
- (NSArray *)employment {
  return employmentArray;
}
- (BEmployment*)employmentAtIndex:(NSUInteger)index {
  return [employmentArray objectAtIndex:index];
}
- (NSArray *)education {
  return educationArray;
}
- (BEducation*)educationAtIndex:(NSUInteger)index {
  return [educationArray objectAtIndex:index];
}
- (NSArray *)entityTags {
  return entityTagsArray;
}
- (BEntityTag*)entityTagsAtIndex:(NSUInteger)index {
  return [entityTagsArray objectAtIndex:index];
}
- (NSArray *)interestTags {
  return interestTagsArray;
}
- (NSString*)interestTagsAtIndex:(NSUInteger)index {
  return [interestTagsArray objectAtIndex:index];
}
- (NSArray *)reviews {
  return reviewsArray;
}
- (BUserReview*)reviewsAtIndex:(NSUInteger)index {
  return [reviewsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitsocialIdentities = YES;
   [self.socialIdentities enumerateObjectsUsingBlock:^(BSocialIdentity *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsocialIdentities = NO;
      *stop = YES;
    }
  }];
  if (!isInitsocialIdentities) return isInitsocialIdentities;
  __block BOOL isInitcontactInfo = YES;
   [self.contactInfo enumerateObjectsUsingBlock:^(BContactInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcontactInfo = NO;
      *stop = YES;
    }
  }];
  if (!isInitcontactInfo) return isInitcontactInfo;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserID) {
    [output writeString:1 value:self.userID];
  }
  if (self.hasUserStatus) {
    [output writeEnum:2 value:self.userStatus];
  }
  if (self.hasCreationDate) {
    [output writeMessage:3 value:self.creationDate];
  }
  if (self.hasLastSeen) {
    [output writeMessage:4 value:self.lastSeen];
  }
  if (self.hasName) {
    [output writeString:5 value:self.name];
  }
  if (self.hasGender) {
    [output writeEnum:6 value:self.gender];
  }
  if (self.hasBirthday) {
    [output writeMessage:7 value:self.birthday];
  }
  [self.imagesArray enumerateObjectsUsingBlock:^(BImageData *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  [self.socialIdentitiesArray enumerateObjectsUsingBlock:^(BSocialIdentity *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  [self.contactInfoArray enumerateObjectsUsingBlock:^(BContactInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  if (self.hasHeadlineEmployment) {
    [output writeMessage:11 value:self.headlineEmployment];
  }
  [self.employmentArray enumerateObjectsUsingBlock:^(BEmployment *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:12 value:element];
  }];
  [self.educationArray enumerateObjectsUsingBlock:^(BEducation *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:13 value:element];
  }];
  [self.entityTagsArray enumerateObjectsUsingBlock:^(BEntityTag *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:14 value:element];
  }];
  [self.interestTagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:15 value:element];
  }];
  if (self.hasBackgroundSummary) {
    [output writeString:16 value:self.backgroundSummary];
  }
  if (self.hasRatingCount) {
    [output writeInt32:17 value:self.ratingCount];
  }
  if (self.hasRatingResponsive) {
    [output writeDouble:18 value:self.ratingResponsive];
  }
  if (self.hasRatingOutgoing) {
    [output writeDouble:19 value:self.ratingOutgoing];
  }
  if (self.hasRatingRecommended) {
    [output writeDouble:20 value:self.ratingRecommended];
  }
  if (self.hasResponseSeconds) {
    [output writeDouble:21 value:self.responseSeconds];
  }
  [self.reviewsArray enumerateObjectsUsingBlock:^(BUserReview *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:22 value:element];
  }];
  if (self.hasIsExpert) {
    [output writeBool:23 value:self.isExpert];
  }
  if (self.hasStripeAccount) {
    [output writeString:24 value:self.stripeAccount];
  }
  if (self.hasServiceIsFreeForUser) {
    [output writeBool:25 value:self.serviceIsFreeForUser];
  }
  if (self.hasChatFee) {
    [output writeString:26 value:self.chatFee];
  }
  if (self.hasUserInfo) {
    [output writeInt64:27 value:self.userInfo];
  }
  if (self.hasEditProfileID) {
    [output writeString:28 value:self.editProfileID];
  }
  if (self.hasIsAdmin) {
    [output writeBool:29 value:self.isAdmin];
  }
  if (self.hasCallFee) {
    [output writeString:30 value:self.callFee];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserID) {
    size_ += computeStringSize(1, self.userID);
  }
  if (self.hasUserStatus) {
    size_ += computeEnumSize(2, self.userStatus);
  }
  if (self.hasCreationDate) {
    size_ += computeMessageSize(3, self.creationDate);
  }
  if (self.hasLastSeen) {
    size_ += computeMessageSize(4, self.lastSeen);
  }
  if (self.hasName) {
    size_ += computeStringSize(5, self.name);
  }
  if (self.hasGender) {
    size_ += computeEnumSize(6, self.gender);
  }
  if (self.hasBirthday) {
    size_ += computeMessageSize(7, self.birthday);
  }
  [self.imagesArray enumerateObjectsUsingBlock:^(BImageData *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  [self.socialIdentitiesArray enumerateObjectsUsingBlock:^(BSocialIdentity *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  [self.contactInfoArray enumerateObjectsUsingBlock:^(BContactInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  if (self.hasHeadlineEmployment) {
    size_ += computeMessageSize(11, self.headlineEmployment);
  }
  [self.employmentArray enumerateObjectsUsingBlock:^(BEmployment *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(12, element);
  }];
  [self.educationArray enumerateObjectsUsingBlock:^(BEducation *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(13, element);
  }];
  [self.entityTagsArray enumerateObjectsUsingBlock:^(BEntityTag *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(14, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.interestTagsArray.count;
    [self.interestTagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasBackgroundSummary) {
    size_ += computeStringSize(16, self.backgroundSummary);
  }
  if (self.hasRatingCount) {
    size_ += computeInt32Size(17, self.ratingCount);
  }
  if (self.hasRatingResponsive) {
    size_ += computeDoubleSize(18, self.ratingResponsive);
  }
  if (self.hasRatingOutgoing) {
    size_ += computeDoubleSize(19, self.ratingOutgoing);
  }
  if (self.hasRatingRecommended) {
    size_ += computeDoubleSize(20, self.ratingRecommended);
  }
  if (self.hasResponseSeconds) {
    size_ += computeDoubleSize(21, self.responseSeconds);
  }
  [self.reviewsArray enumerateObjectsUsingBlock:^(BUserReview *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(22, element);
  }];
  if (self.hasIsExpert) {
    size_ += computeBoolSize(23, self.isExpert);
  }
  if (self.hasStripeAccount) {
    size_ += computeStringSize(24, self.stripeAccount);
  }
  if (self.hasServiceIsFreeForUser) {
    size_ += computeBoolSize(25, self.serviceIsFreeForUser);
  }
  if (self.hasChatFee) {
    size_ += computeStringSize(26, self.chatFee);
  }
  if (self.hasUserInfo) {
    size_ += computeInt64Size(27, self.userInfo);
  }
  if (self.hasEditProfileID) {
    size_ += computeStringSize(28, self.editProfileID);
  }
  if (self.hasIsAdmin) {
    size_ += computeBoolSize(29, self.isAdmin);
  }
  if (self.hasCallFee) {
    size_ += computeStringSize(30, self.callFee);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BUserProfile*) parseFromData:(NSData*) data {
  return (BUserProfile*)[[[BUserProfile builder] mergeFromData:data] build];
}
+ (BUserProfile*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserProfile*)[[[BUserProfile builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BUserProfile*) parseFromInputStream:(NSInputStream*) input {
  return (BUserProfile*)[[[BUserProfile builder] mergeFromInputStream:input] build];
}
+ (BUserProfile*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserProfile*)[[[BUserProfile builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserProfile*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BUserProfile*)[[[BUserProfile builder] mergeFromCodedInputStream:input] build];
}
+ (BUserProfile*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserProfile*)[[[BUserProfile builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserProfileBuilder*) builder {
  return [[BUserProfileBuilder alloc] init];
}
+ (BUserProfileBuilder*) builderWithPrototype:(BUserProfile*) prototype {
  return [[BUserProfile builder] mergeFrom:prototype];
}
- (BUserProfileBuilder*) builder {
  return [BUserProfile builder];
}
- (BUserProfileBuilder*) toBuilder {
  return [BUserProfile builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userID", self.userID];
  }
  if (self.hasUserStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userStatus", NSStringFromBUserStatus(self.userStatus)];
  }
  if (self.hasCreationDate) {
    [output appendFormat:@"%@%@ {\n", indent, @"creationDate"];
    [self.creationDate writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLastSeen) {
    [output appendFormat:@"%@%@ {\n", indent, @"lastSeen"];
    [self.lastSeen writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", NSStringFromBGender(self.gender)];
  }
  if (self.hasBirthday) {
    [output appendFormat:@"%@%@ {\n", indent, @"birthday"];
    [self.birthday writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.imagesArray enumerateObjectsUsingBlock:^(BImageData *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"images"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.socialIdentitiesArray enumerateObjectsUsingBlock:^(BSocialIdentity *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"socialIdentities"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.contactInfoArray enumerateObjectsUsingBlock:^(BContactInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"contactInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasHeadlineEmployment) {
    [output appendFormat:@"%@%@ {\n", indent, @"headlineEmployment"];
    [self.headlineEmployment writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.employmentArray enumerateObjectsUsingBlock:^(BEmployment *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"employment"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.educationArray enumerateObjectsUsingBlock:^(BEducation *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"education"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.entityTagsArray enumerateObjectsUsingBlock:^(BEntityTag *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"entityTags"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.interestTagsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"interestTags", obj];
  }];
  if (self.hasBackgroundSummary) {
    [output appendFormat:@"%@%@: %@\n", indent, @"backgroundSummary", self.backgroundSummary];
  }
  if (self.hasRatingCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ratingCount", [NSNumber numberWithInteger:self.ratingCount]];
  }
  if (self.hasRatingResponsive) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ratingResponsive", [NSNumber numberWithDouble:self.ratingResponsive]];
  }
  if (self.hasRatingOutgoing) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ratingOutgoing", [NSNumber numberWithDouble:self.ratingOutgoing]];
  }
  if (self.hasRatingRecommended) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ratingRecommended", [NSNumber numberWithDouble:self.ratingRecommended]];
  }
  if (self.hasResponseSeconds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"responseSeconds", [NSNumber numberWithDouble:self.responseSeconds]];
  }
  [self.reviewsArray enumerateObjectsUsingBlock:^(BUserReview *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"reviews"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasIsExpert) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isExpert", [NSNumber numberWithBool:self.isExpert]];
  }
  if (self.hasStripeAccount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stripeAccount", self.stripeAccount];
  }
  if (self.hasServiceIsFreeForUser) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serviceIsFreeForUser", [NSNumber numberWithBool:self.serviceIsFreeForUser]];
  }
  if (self.hasChatFee) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chatFee", self.chatFee];
  }
  if (self.hasUserInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userInfo", [NSNumber numberWithLongLong:self.userInfo]];
  }
  if (self.hasEditProfileID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"editProfileID", self.editProfileID];
  }
  if (self.hasIsAdmin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAdmin", [NSNumber numberWithBool:self.isAdmin]];
  }
  if (self.hasCallFee) {
    [output appendFormat:@"%@%@: %@\n", indent, @"callFee", self.callFee];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserID) {
    [dictionary setObject: self.userID forKey: @"userID"];
  }
  if (self.hasUserStatus) {
    [dictionary setObject: @(self.userStatus) forKey: @"userStatus"];
  }
  if (self.hasCreationDate) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.creationDate storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"creationDate"];
  }
  if (self.hasLastSeen) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.lastSeen storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"lastSeen"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasGender) {
    [dictionary setObject: @(self.gender) forKey: @"gender"];
  }
  if (self.hasBirthday) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.birthday storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"birthday"];
  }
  for (BImageData* element in self.imagesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"images"];
  }
  for (BSocialIdentity* element in self.socialIdentitiesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"socialIdentities"];
  }
  for (BContactInfo* element in self.contactInfoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"contactInfo"];
  }
  if (self.hasHeadlineEmployment) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.headlineEmployment storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"headlineEmployment"];
  }
  for (BEmployment* element in self.employmentArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"employment"];
  }
  for (BEducation* element in self.educationArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"education"];
  }
  for (BEntityTag* element in self.entityTagsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"entityTags"];
  }
  [dictionary setObject:self.interestTags forKey: @"interestTags"];
  if (self.hasBackgroundSummary) {
    [dictionary setObject: self.backgroundSummary forKey: @"backgroundSummary"];
  }
  if (self.hasRatingCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.ratingCount] forKey: @"ratingCount"];
  }
  if (self.hasRatingResponsive) {
    [dictionary setObject: [NSNumber numberWithDouble:self.ratingResponsive] forKey: @"ratingResponsive"];
  }
  if (self.hasRatingOutgoing) {
    [dictionary setObject: [NSNumber numberWithDouble:self.ratingOutgoing] forKey: @"ratingOutgoing"];
  }
  if (self.hasRatingRecommended) {
    [dictionary setObject: [NSNumber numberWithDouble:self.ratingRecommended] forKey: @"ratingRecommended"];
  }
  if (self.hasResponseSeconds) {
    [dictionary setObject: [NSNumber numberWithDouble:self.responseSeconds] forKey: @"responseSeconds"];
  }
  for (BUserReview* element in self.reviewsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"reviews"];
  }
  if (self.hasIsExpert) {
    [dictionary setObject: [NSNumber numberWithBool:self.isExpert] forKey: @"isExpert"];
  }
  if (self.hasStripeAccount) {
    [dictionary setObject: self.stripeAccount forKey: @"stripeAccount"];
  }
  if (self.hasServiceIsFreeForUser) {
    [dictionary setObject: [NSNumber numberWithBool:self.serviceIsFreeForUser] forKey: @"serviceIsFreeForUser"];
  }
  if (self.hasChatFee) {
    [dictionary setObject: self.chatFee forKey: @"chatFee"];
  }
  if (self.hasUserInfo) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userInfo] forKey: @"userInfo"];
  }
  if (self.hasEditProfileID) {
    [dictionary setObject: self.editProfileID forKey: @"editProfileID"];
  }
  if (self.hasIsAdmin) {
    [dictionary setObject: [NSNumber numberWithBool:self.isAdmin] forKey: @"isAdmin"];
  }
  if (self.hasCallFee) {
    [dictionary setObject: self.callFee forKey: @"callFee"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BUserProfile class]]) {
    return NO;
  }
  BUserProfile *otherMessage = other;
  return
      self.hasUserID == otherMessage.hasUserID &&
      (!self.hasUserID || [self.userID isEqual:otherMessage.userID]) &&
      self.hasUserStatus == otherMessage.hasUserStatus &&
      (!self.hasUserStatus || self.userStatus == otherMessage.userStatus) &&
      self.hasCreationDate == otherMessage.hasCreationDate &&
      (!self.hasCreationDate || [self.creationDate isEqual:otherMessage.creationDate]) &&
      self.hasLastSeen == otherMessage.hasLastSeen &&
      (!self.hasLastSeen || [self.lastSeen isEqual:otherMessage.lastSeen]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      self.hasBirthday == otherMessage.hasBirthday &&
      (!self.hasBirthday || [self.birthday isEqual:otherMessage.birthday]) &&
      [self.imagesArray isEqualToArray:otherMessage.imagesArray] &&
      [self.socialIdentitiesArray isEqualToArray:otherMessage.socialIdentitiesArray] &&
      [self.contactInfoArray isEqualToArray:otherMessage.contactInfoArray] &&
      self.hasHeadlineEmployment == otherMessage.hasHeadlineEmployment &&
      (!self.hasHeadlineEmployment || [self.headlineEmployment isEqual:otherMessage.headlineEmployment]) &&
      [self.employmentArray isEqualToArray:otherMessage.employmentArray] &&
      [self.educationArray isEqualToArray:otherMessage.educationArray] &&
      [self.entityTagsArray isEqualToArray:otherMessage.entityTagsArray] &&
      [self.interestTagsArray isEqualToArray:otherMessage.interestTagsArray] &&
      self.hasBackgroundSummary == otherMessage.hasBackgroundSummary &&
      (!self.hasBackgroundSummary || [self.backgroundSummary isEqual:otherMessage.backgroundSummary]) &&
      self.hasRatingCount == otherMessage.hasRatingCount &&
      (!self.hasRatingCount || self.ratingCount == otherMessage.ratingCount) &&
      self.hasRatingResponsive == otherMessage.hasRatingResponsive &&
      (!self.hasRatingResponsive || self.ratingResponsive == otherMessage.ratingResponsive) &&
      self.hasRatingOutgoing == otherMessage.hasRatingOutgoing &&
      (!self.hasRatingOutgoing || self.ratingOutgoing == otherMessage.ratingOutgoing) &&
      self.hasRatingRecommended == otherMessage.hasRatingRecommended &&
      (!self.hasRatingRecommended || self.ratingRecommended == otherMessage.ratingRecommended) &&
      self.hasResponseSeconds == otherMessage.hasResponseSeconds &&
      (!self.hasResponseSeconds || self.responseSeconds == otherMessage.responseSeconds) &&
      [self.reviewsArray isEqualToArray:otherMessage.reviewsArray] &&
      self.hasIsExpert == otherMessage.hasIsExpert &&
      (!self.hasIsExpert || self.isExpert == otherMessage.isExpert) &&
      self.hasStripeAccount == otherMessage.hasStripeAccount &&
      (!self.hasStripeAccount || [self.stripeAccount isEqual:otherMessage.stripeAccount]) &&
      self.hasServiceIsFreeForUser == otherMessage.hasServiceIsFreeForUser &&
      (!self.hasServiceIsFreeForUser || self.serviceIsFreeForUser == otherMessage.serviceIsFreeForUser) &&
      self.hasChatFee == otherMessage.hasChatFee &&
      (!self.hasChatFee || [self.chatFee isEqual:otherMessage.chatFee]) &&
      self.hasUserInfo == otherMessage.hasUserInfo &&
      (!self.hasUserInfo || self.userInfo == otherMessage.userInfo) &&
      self.hasEditProfileID == otherMessage.hasEditProfileID &&
      (!self.hasEditProfileID || [self.editProfileID isEqual:otherMessage.editProfileID]) &&
      self.hasIsAdmin == otherMessage.hasIsAdmin &&
      (!self.hasIsAdmin || self.isAdmin == otherMessage.isAdmin) &&
      self.hasCallFee == otherMessage.hasCallFee &&
      (!self.hasCallFee || [self.callFee isEqual:otherMessage.callFee]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserID) {
    hashCode = hashCode * 31 + [self.userID hash];
  }
  if (self.hasUserStatus) {
    hashCode = hashCode * 31 + self.userStatus;
  }
  if (self.hasCreationDate) {
    hashCode = hashCode * 31 + [self.creationDate hash];
  }
  if (self.hasLastSeen) {
    hashCode = hashCode * 31 + [self.lastSeen hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + self.gender;
  }
  if (self.hasBirthday) {
    hashCode = hashCode * 31 + [self.birthday hash];
  }
  [self.imagesArray enumerateObjectsUsingBlock:^(BImageData *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.socialIdentitiesArray enumerateObjectsUsingBlock:^(BSocialIdentity *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.contactInfoArray enumerateObjectsUsingBlock:^(BContactInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasHeadlineEmployment) {
    hashCode = hashCode * 31 + [self.headlineEmployment hash];
  }
  [self.employmentArray enumerateObjectsUsingBlock:^(BEmployment *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.educationArray enumerateObjectsUsingBlock:^(BEducation *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.entityTagsArray enumerateObjectsUsingBlock:^(BEntityTag *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.interestTagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasBackgroundSummary) {
    hashCode = hashCode * 31 + [self.backgroundSummary hash];
  }
  if (self.hasRatingCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.ratingCount] hash];
  }
  if (self.hasRatingResponsive) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.ratingResponsive] hash];
  }
  if (self.hasRatingOutgoing) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.ratingOutgoing] hash];
  }
  if (self.hasRatingRecommended) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.ratingRecommended] hash];
  }
  if (self.hasResponseSeconds) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.responseSeconds] hash];
  }
  [self.reviewsArray enumerateObjectsUsingBlock:^(BUserReview *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasIsExpert) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isExpert] hash];
  }
  if (self.hasStripeAccount) {
    hashCode = hashCode * 31 + [self.stripeAccount hash];
  }
  if (self.hasServiceIsFreeForUser) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.serviceIsFreeForUser] hash];
  }
  if (self.hasChatFee) {
    hashCode = hashCode * 31 + [self.chatFee hash];
  }
  if (self.hasUserInfo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userInfo] hash];
  }
  if (self.hasEditProfileID) {
    hashCode = hashCode * 31 + [self.editProfileID hash];
  }
  if (self.hasIsAdmin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isAdmin] hash];
  }
  if (self.hasCallFee) {
    hashCode = hashCode * 31 + [self.callFee hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BUserProfileBuilder()
@property (strong) BUserProfile* resultUserProfile;
@end

@implementation BUserProfileBuilder
@synthesize resultUserProfile;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserProfile = [[BUserProfile alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserProfile;
}
- (BUserProfileBuilder*) clear {
  self.resultUserProfile = [[BUserProfile alloc] init];
  return self;
}
- (BUserProfileBuilder*) clone {
  return [BUserProfile builderWithPrototype:resultUserProfile];
}
- (BUserProfile*) defaultInstance {
  return [BUserProfile defaultInstance];
}
- (BUserProfile*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BUserProfile*) buildPartial {
  BUserProfile* returnMe = resultUserProfile;
  self.resultUserProfile = nil;
  return returnMe;
}
- (BUserProfileBuilder*) mergeFrom:(BUserProfile*) other {
  if (other == [BUserProfile defaultInstance]) {
    return self;
  }
  if (other.hasUserID) {
    [self setUserID:other.userID];
  }
  if (other.hasUserStatus) {
    [self setUserStatus:other.userStatus];
  }
  if (other.hasCreationDate) {
    [self mergeCreationDate:other.creationDate];
  }
  if (other.hasLastSeen) {
    [self mergeLastSeen:other.lastSeen];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasBirthday) {
    [self mergeBirthday:other.birthday];
  }
  if (other.imagesArray.count > 0) {
    if (resultUserProfile.imagesArray == nil) {
      resultUserProfile.imagesArray = [[NSMutableArray alloc] initWithArray:other.imagesArray];
    } else {
      [resultUserProfile.imagesArray addObjectsFromArray:other.imagesArray];
    }
  }
  if (other.socialIdentitiesArray.count > 0) {
    if (resultUserProfile.socialIdentitiesArray == nil) {
      resultUserProfile.socialIdentitiesArray = [[NSMutableArray alloc] initWithArray:other.socialIdentitiesArray];
    } else {
      [resultUserProfile.socialIdentitiesArray addObjectsFromArray:other.socialIdentitiesArray];
    }
  }
  if (other.contactInfoArray.count > 0) {
    if (resultUserProfile.contactInfoArray == nil) {
      resultUserProfile.contactInfoArray = [[NSMutableArray alloc] initWithArray:other.contactInfoArray];
    } else {
      [resultUserProfile.contactInfoArray addObjectsFromArray:other.contactInfoArray];
    }
  }
  if (other.hasHeadlineEmployment) {
    [self mergeHeadlineEmployment:other.headlineEmployment];
  }
  if (other.employmentArray.count > 0) {
    if (resultUserProfile.employmentArray == nil) {
      resultUserProfile.employmentArray = [[NSMutableArray alloc] initWithArray:other.employmentArray];
    } else {
      [resultUserProfile.employmentArray addObjectsFromArray:other.employmentArray];
    }
  }
  if (other.educationArray.count > 0) {
    if (resultUserProfile.educationArray == nil) {
      resultUserProfile.educationArray = [[NSMutableArray alloc] initWithArray:other.educationArray];
    } else {
      [resultUserProfile.educationArray addObjectsFromArray:other.educationArray];
    }
  }
  if (other.entityTagsArray.count > 0) {
    if (resultUserProfile.entityTagsArray == nil) {
      resultUserProfile.entityTagsArray = [[NSMutableArray alloc] initWithArray:other.entityTagsArray];
    } else {
      [resultUserProfile.entityTagsArray addObjectsFromArray:other.entityTagsArray];
    }
  }
  if (other.interestTagsArray.count > 0) {
    if (resultUserProfile.interestTagsArray == nil) {
      resultUserProfile.interestTagsArray = [[NSMutableArray alloc] initWithArray:other.interestTagsArray];
    } else {
      [resultUserProfile.interestTagsArray addObjectsFromArray:other.interestTagsArray];
    }
  }
  if (other.hasBackgroundSummary) {
    [self setBackgroundSummary:other.backgroundSummary];
  }
  if (other.hasRatingCount) {
    [self setRatingCount:other.ratingCount];
  }
  if (other.hasRatingResponsive) {
    [self setRatingResponsive:other.ratingResponsive];
  }
  if (other.hasRatingOutgoing) {
    [self setRatingOutgoing:other.ratingOutgoing];
  }
  if (other.hasRatingRecommended) {
    [self setRatingRecommended:other.ratingRecommended];
  }
  if (other.hasResponseSeconds) {
    [self setResponseSeconds:other.responseSeconds];
  }
  if (other.reviewsArray.count > 0) {
    if (resultUserProfile.reviewsArray == nil) {
      resultUserProfile.reviewsArray = [[NSMutableArray alloc] initWithArray:other.reviewsArray];
    } else {
      [resultUserProfile.reviewsArray addObjectsFromArray:other.reviewsArray];
    }
  }
  if (other.hasIsExpert) {
    [self setIsExpert:other.isExpert];
  }
  if (other.hasStripeAccount) {
    [self setStripeAccount:other.stripeAccount];
  }
  if (other.hasServiceIsFreeForUser) {
    [self setServiceIsFreeForUser:other.serviceIsFreeForUser];
  }
  if (other.hasChatFee) {
    [self setChatFee:other.chatFee];
  }
  if (other.hasCallFee) {
    [self setCallFee:other.callFee];
  }
  if (other.hasUserInfo) {
    [self setUserInfo:other.userInfo];
  }
  if (other.hasEditProfileID) {
    [self setEditProfileID:other.editProfileID];
  }
  if (other.hasIsAdmin) {
    [self setIsAdmin:other.isAdmin];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BUserProfileBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BUserProfileBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserID:[input readString]];
        break;
      }
      case 16: {
        BUserStatus value = (BUserStatus)[input readEnum];
        if (BUserStatusIsValidValue(value)) {
          [self setUserStatus:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        BTimestampBuilder* subBuilder = [BTimestamp builder];
        if (self.hasCreationDate) {
          [subBuilder mergeFrom:self.creationDate];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreationDate:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        BTimestampBuilder* subBuilder = [BTimestamp builder];
        if (self.hasLastSeen) {
          [subBuilder mergeFrom:self.lastSeen];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLastSeen:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setName:[input readString]];
        break;
      }
      case 48: {
        BGender value = (BGender)[input readEnum];
        if (BGenderIsValidValue(value)) {
          [self setGender:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 58: {
        BTimestampBuilder* subBuilder = [BTimestamp builder];
        if (self.hasBirthday) {
          [subBuilder mergeFrom:self.birthday];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBirthday:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        BImageDataBuilder* subBuilder = [BImageData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addImages:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        BSocialIdentityBuilder* subBuilder = [BSocialIdentity builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSocialIdentities:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        BContactInfoBuilder* subBuilder = [BContactInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addContactInfo:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        BEmploymentBuilder* subBuilder = [BEmployment builder];
        if (self.hasHeadlineEmployment) {
          [subBuilder mergeFrom:self.headlineEmployment];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHeadlineEmployment:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        BEmploymentBuilder* subBuilder = [BEmployment builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEmployment:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        BEducationBuilder* subBuilder = [BEducation builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEducation:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        BEntityTagBuilder* subBuilder = [BEntityTag builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEntityTags:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        [self addInterestTags:[input readString]];
        break;
      }
      case 130: {
        [self setBackgroundSummary:[input readString]];
        break;
      }
      case 136: {
        [self setRatingCount:[input readInt32]];
        break;
      }
      case 145: {
        [self setRatingResponsive:[input readDouble]];
        break;
      }
      case 153: {
        [self setRatingOutgoing:[input readDouble]];
        break;
      }
      case 161: {
        [self setRatingRecommended:[input readDouble]];
        break;
      }
      case 169: {
        [self setResponseSeconds:[input readDouble]];
        break;
      }
      case 178: {
        BUserReviewBuilder* subBuilder = [BUserReview builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addReviews:[subBuilder buildPartial]];
        break;
      }
      case 184: {
        [self setIsExpert:[input readBool]];
        break;
      }
      case 194: {
        [self setStripeAccount:[input readString]];
        break;
      }
      case 200: {
        [self setServiceIsFreeForUser:[input readBool]];
        break;
      }
      case 210: {
        [self setChatFee:[input readString]];
        break;
      }
      case 216: {
        [self setUserInfo:[input readInt64]];
        break;
      }
      case 226: {
        [self setEditProfileID:[input readString]];
        break;
      }
      case 232: {
        [self setIsAdmin:[input readBool]];
        break;
      }
      case 242: {
        [self setCallFee:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserID {
  return resultUserProfile.hasUserID;
}
- (NSString*) userID {
  return resultUserProfile.userID;
}
- (BUserProfileBuilder*) setUserID:(NSString*) value {
  resultUserProfile.hasUserID = YES;
  resultUserProfile.userID = value;
  return self;
}
- (BUserProfileBuilder*) clearUserID {
  resultUserProfile.hasUserID = NO;
  resultUserProfile.userID = @"";
  return self;
}
- (BOOL) hasUserStatus {
  return resultUserProfile.hasUserStatus;
}
- (BUserStatus) userStatus {
  return resultUserProfile.userStatus;
}
- (BUserProfileBuilder*) setUserStatus:(BUserStatus) value {
  resultUserProfile.hasUserStatus = YES;
  resultUserProfile.userStatus = value;
  return self;
}
- (BUserProfileBuilder*) clearUserStatus {
  resultUserProfile.hasUserStatus = NO;
  resultUserProfile.userStatus = BUserStatusUSUnknown;
  return self;
}
- (BOOL) hasCreationDate {
  return resultUserProfile.hasCreationDate;
}
- (BTimestamp*) creationDate {
  return resultUserProfile.creationDate;
}
- (BUserProfileBuilder*) setCreationDate:(BTimestamp*) value {
  resultUserProfile.hasCreationDate = YES;
  resultUserProfile.creationDate = value;
  return self;
}
- (BUserProfileBuilder*) setCreationDateBuilder:(BTimestampBuilder*) builderForValue {
  return [self setCreationDate:[builderForValue build]];
}
- (BUserProfileBuilder*) mergeCreationDate:(BTimestamp*) value {
  if (resultUserProfile.hasCreationDate &&
      resultUserProfile.creationDate != [BTimestamp defaultInstance]) {
    resultUserProfile.creationDate =
      [[[BTimestamp builderWithPrototype:resultUserProfile.creationDate] mergeFrom:value] buildPartial];
  } else {
    resultUserProfile.creationDate = value;
  }
  resultUserProfile.hasCreationDate = YES;
  return self;
}
- (BUserProfileBuilder*) clearCreationDate {
  resultUserProfile.hasCreationDate = NO;
  resultUserProfile.creationDate = [BTimestamp defaultInstance];
  return self;
}
- (BOOL) hasLastSeen {
  return resultUserProfile.hasLastSeen;
}
- (BTimestamp*) lastSeen {
  return resultUserProfile.lastSeen;
}
- (BUserProfileBuilder*) setLastSeen:(BTimestamp*) value {
  resultUserProfile.hasLastSeen = YES;
  resultUserProfile.lastSeen = value;
  return self;
}
- (BUserProfileBuilder*) setLastSeenBuilder:(BTimestampBuilder*) builderForValue {
  return [self setLastSeen:[builderForValue build]];
}
- (BUserProfileBuilder*) mergeLastSeen:(BTimestamp*) value {
  if (resultUserProfile.hasLastSeen &&
      resultUserProfile.lastSeen != [BTimestamp defaultInstance]) {
    resultUserProfile.lastSeen =
      [[[BTimestamp builderWithPrototype:resultUserProfile.lastSeen] mergeFrom:value] buildPartial];
  } else {
    resultUserProfile.lastSeen = value;
  }
  resultUserProfile.hasLastSeen = YES;
  return self;
}
- (BUserProfileBuilder*) clearLastSeen {
  resultUserProfile.hasLastSeen = NO;
  resultUserProfile.lastSeen = [BTimestamp defaultInstance];
  return self;
}
- (BOOL) hasName {
  return resultUserProfile.hasName;
}
- (NSString*) name {
  return resultUserProfile.name;
}
- (BUserProfileBuilder*) setName:(NSString*) value {
  resultUserProfile.hasName = YES;
  resultUserProfile.name = value;
  return self;
}
- (BUserProfileBuilder*) clearName {
  resultUserProfile.hasName = NO;
  resultUserProfile.name = @"";
  return self;
}
- (BOOL) hasGender {
  return resultUserProfile.hasGender;
}
- (BGender) gender {
  return resultUserProfile.gender;
}
- (BUserProfileBuilder*) setGender:(BGender) value {
  resultUserProfile.hasGender = YES;
  resultUserProfile.gender = value;
  return self;
}
- (BUserProfileBuilder*) clearGender {
  resultUserProfile.hasGender = NO;
  resultUserProfile.gender = BGenderGUnknown;
  return self;
}
- (BOOL) hasBirthday {
  return resultUserProfile.hasBirthday;
}
- (BTimestamp*) birthday {
  return resultUserProfile.birthday;
}
- (BUserProfileBuilder*) setBirthday:(BTimestamp*) value {
  resultUserProfile.hasBirthday = YES;
  resultUserProfile.birthday = value;
  return self;
}
- (BUserProfileBuilder*) setBirthdayBuilder:(BTimestampBuilder*) builderForValue {
  return [self setBirthday:[builderForValue build]];
}
- (BUserProfileBuilder*) mergeBirthday:(BTimestamp*) value {
  if (resultUserProfile.hasBirthday &&
      resultUserProfile.birthday != [BTimestamp defaultInstance]) {
    resultUserProfile.birthday =
      [[[BTimestamp builderWithPrototype:resultUserProfile.birthday] mergeFrom:value] buildPartial];
  } else {
    resultUserProfile.birthday = value;
  }
  resultUserProfile.hasBirthday = YES;
  return self;
}
- (BUserProfileBuilder*) clearBirthday {
  resultUserProfile.hasBirthday = NO;
  resultUserProfile.birthday = [BTimestamp defaultInstance];
  return self;
}
- (NSMutableArray *)images {
  return resultUserProfile.imagesArray;
}
- (BImageData*)imagesAtIndex:(NSUInteger)index {
  return [resultUserProfile imagesAtIndex:index];
}
- (BUserProfileBuilder *)addImages:(BImageData*)value {
  if (resultUserProfile.imagesArray == nil) {
    resultUserProfile.imagesArray = [[NSMutableArray alloc]init];
  }
  [resultUserProfile.imagesArray addObject:value];
  return self;
}
- (BUserProfileBuilder *)setImagesArray:(NSArray *)array {
  resultUserProfile.imagesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BUserProfileBuilder *)clearImages {
  resultUserProfile.imagesArray = nil;
  return self;
}
- (NSMutableArray *)socialIdentities {
  return resultUserProfile.socialIdentitiesArray;
}
- (BSocialIdentity*)socialIdentitiesAtIndex:(NSUInteger)index {
  return [resultUserProfile socialIdentitiesAtIndex:index];
}
- (BUserProfileBuilder *)addSocialIdentities:(BSocialIdentity*)value {
  if (resultUserProfile.socialIdentitiesArray == nil) {
    resultUserProfile.socialIdentitiesArray = [[NSMutableArray alloc]init];
  }
  [resultUserProfile.socialIdentitiesArray addObject:value];
  return self;
}
- (BUserProfileBuilder *)setSocialIdentitiesArray:(NSArray *)array {
  resultUserProfile.socialIdentitiesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BUserProfileBuilder *)clearSocialIdentities {
  resultUserProfile.socialIdentitiesArray = nil;
  return self;
}
- (NSMutableArray *)contactInfo {
  return resultUserProfile.contactInfoArray;
}
- (BContactInfo*)contactInfoAtIndex:(NSUInteger)index {
  return [resultUserProfile contactInfoAtIndex:index];
}
- (BUserProfileBuilder *)addContactInfo:(BContactInfo*)value {
  if (resultUserProfile.contactInfoArray == nil) {
    resultUserProfile.contactInfoArray = [[NSMutableArray alloc]init];
  }
  [resultUserProfile.contactInfoArray addObject:value];
  return self;
}
- (BUserProfileBuilder *)setContactInfoArray:(NSArray *)array {
  resultUserProfile.contactInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BUserProfileBuilder *)clearContactInfo {
  resultUserProfile.contactInfoArray = nil;
  return self;
}
- (BOOL) hasHeadlineEmployment {
  return resultUserProfile.hasHeadlineEmployment;
}
- (BEmployment*) headlineEmployment {
  return resultUserProfile.headlineEmployment;
}
- (BUserProfileBuilder*) setHeadlineEmployment:(BEmployment*) value {
  resultUserProfile.hasHeadlineEmployment = YES;
  resultUserProfile.headlineEmployment = value;
  return self;
}
- (BUserProfileBuilder*) setHeadlineEmploymentBuilder:(BEmploymentBuilder*) builderForValue {
  return [self setHeadlineEmployment:[builderForValue build]];
}
- (BUserProfileBuilder*) mergeHeadlineEmployment:(BEmployment*) value {
  if (resultUserProfile.hasHeadlineEmployment &&
      resultUserProfile.headlineEmployment != [BEmployment defaultInstance]) {
    resultUserProfile.headlineEmployment =
      [[[BEmployment builderWithPrototype:resultUserProfile.headlineEmployment] mergeFrom:value] buildPartial];
  } else {
    resultUserProfile.headlineEmployment = value;
  }
  resultUserProfile.hasHeadlineEmployment = YES;
  return self;
}
- (BUserProfileBuilder*) clearHeadlineEmployment {
  resultUserProfile.hasHeadlineEmployment = NO;
  resultUserProfile.headlineEmployment = [BEmployment defaultInstance];
  return self;
}
- (NSMutableArray *)employment {
  return resultUserProfile.employmentArray;
}
- (BEmployment*)employmentAtIndex:(NSUInteger)index {
  return [resultUserProfile employmentAtIndex:index];
}
- (BUserProfileBuilder *)addEmployment:(BEmployment*)value {
  if (resultUserProfile.employmentArray == nil) {
    resultUserProfile.employmentArray = [[NSMutableArray alloc]init];
  }
  [resultUserProfile.employmentArray addObject:value];
  return self;
}
- (BUserProfileBuilder *)setEmploymentArray:(NSArray *)array {
  resultUserProfile.employmentArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BUserProfileBuilder *)clearEmployment {
  resultUserProfile.employmentArray = nil;
  return self;
}
- (NSMutableArray *)education {
  return resultUserProfile.educationArray;
}
- (BEducation*)educationAtIndex:(NSUInteger)index {
  return [resultUserProfile educationAtIndex:index];
}
- (BUserProfileBuilder *)addEducation:(BEducation*)value {
  if (resultUserProfile.educationArray == nil) {
    resultUserProfile.educationArray = [[NSMutableArray alloc]init];
  }
  [resultUserProfile.educationArray addObject:value];
  return self;
}
- (BUserProfileBuilder *)setEducationArray:(NSArray *)array {
  resultUserProfile.educationArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BUserProfileBuilder *)clearEducation {
  resultUserProfile.educationArray = nil;
  return self;
}
- (NSMutableArray *)entityTags {
  return resultUserProfile.entityTagsArray;
}
- (BEntityTag*)entityTagsAtIndex:(NSUInteger)index {
  return [resultUserProfile entityTagsAtIndex:index];
}
- (BUserProfileBuilder *)addEntityTags:(BEntityTag*)value {
  if (resultUserProfile.entityTagsArray == nil) {
    resultUserProfile.entityTagsArray = [[NSMutableArray alloc]init];
  }
  [resultUserProfile.entityTagsArray addObject:value];
  return self;
}
- (BUserProfileBuilder *)setEntityTagsArray:(NSArray *)array {
  resultUserProfile.entityTagsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BUserProfileBuilder *)clearEntityTags {
  resultUserProfile.entityTagsArray = nil;
  return self;
}
- (NSMutableArray *)interestTags {
  return resultUserProfile.interestTagsArray;
}
- (NSString*)interestTagsAtIndex:(NSUInteger)index {
  return [resultUserProfile interestTagsAtIndex:index];
}
- (BUserProfileBuilder *)addInterestTags:(NSString*)value {
  if (resultUserProfile.interestTagsArray == nil) {
    resultUserProfile.interestTagsArray = [[NSMutableArray alloc]init];
  }
  [resultUserProfile.interestTagsArray addObject:value];
  return self;
}
- (BUserProfileBuilder *)setInterestTagsArray:(NSArray *)array {
  resultUserProfile.interestTagsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (BUserProfileBuilder *)clearInterestTags {
  resultUserProfile.interestTagsArray = nil;
  return self;
}
- (BOOL) hasBackgroundSummary {
  return resultUserProfile.hasBackgroundSummary;
}
- (NSString*) backgroundSummary {
  return resultUserProfile.backgroundSummary;
}
- (BUserProfileBuilder*) setBackgroundSummary:(NSString*) value {
  resultUserProfile.hasBackgroundSummary = YES;
  resultUserProfile.backgroundSummary = value;
  return self;
}
- (BUserProfileBuilder*) clearBackgroundSummary {
  resultUserProfile.hasBackgroundSummary = NO;
  resultUserProfile.backgroundSummary = @"";
  return self;
}
- (BOOL) hasRatingCount {
  return resultUserProfile.hasRatingCount;
}
- (SInt32) ratingCount {
  return resultUserProfile.ratingCount;
}
- (BUserProfileBuilder*) setRatingCount:(SInt32) value {
  resultUserProfile.hasRatingCount = YES;
  resultUserProfile.ratingCount = value;
  return self;
}
- (BUserProfileBuilder*) clearRatingCount {
  resultUserProfile.hasRatingCount = NO;
  resultUserProfile.ratingCount = 0;
  return self;
}
- (BOOL) hasRatingResponsive {
  return resultUserProfile.hasRatingResponsive;
}
- (Float64) ratingResponsive {
  return resultUserProfile.ratingResponsive;
}
- (BUserProfileBuilder*) setRatingResponsive:(Float64) value {
  resultUserProfile.hasRatingResponsive = YES;
  resultUserProfile.ratingResponsive = value;
  return self;
}
- (BUserProfileBuilder*) clearRatingResponsive {
  resultUserProfile.hasRatingResponsive = NO;
  resultUserProfile.ratingResponsive = 0;
  return self;
}
- (BOOL) hasRatingOutgoing {
  return resultUserProfile.hasRatingOutgoing;
}
- (Float64) ratingOutgoing {
  return resultUserProfile.ratingOutgoing;
}
- (BUserProfileBuilder*) setRatingOutgoing:(Float64) value {
  resultUserProfile.hasRatingOutgoing = YES;
  resultUserProfile.ratingOutgoing = value;
  return self;
}
- (BUserProfileBuilder*) clearRatingOutgoing {
  resultUserProfile.hasRatingOutgoing = NO;
  resultUserProfile.ratingOutgoing = 0;
  return self;
}
- (BOOL) hasRatingRecommended {
  return resultUserProfile.hasRatingRecommended;
}
- (Float64) ratingRecommended {
  return resultUserProfile.ratingRecommended;
}
- (BUserProfileBuilder*) setRatingRecommended:(Float64) value {
  resultUserProfile.hasRatingRecommended = YES;
  resultUserProfile.ratingRecommended = value;
  return self;
}
- (BUserProfileBuilder*) clearRatingRecommended {
  resultUserProfile.hasRatingRecommended = NO;
  resultUserProfile.ratingRecommended = 0;
  return self;
}
- (BOOL) hasResponseSeconds {
  return resultUserProfile.hasResponseSeconds;
}
- (Float64) responseSeconds {
  return resultUserProfile.responseSeconds;
}
- (BUserProfileBuilder*) setResponseSeconds:(Float64) value {
  resultUserProfile.hasResponseSeconds = YES;
  resultUserProfile.responseSeconds = value;
  return self;
}
- (BUserProfileBuilder*) clearResponseSeconds {
  resultUserProfile.hasResponseSeconds = NO;
  resultUserProfile.responseSeconds = 0;
  return self;
}
- (NSMutableArray *)reviews {
  return resultUserProfile.reviewsArray;
}
- (BUserReview*)reviewsAtIndex:(NSUInteger)index {
  return [resultUserProfile reviewsAtIndex:index];
}
- (BUserProfileBuilder *)addReviews:(BUserReview*)value {
  if (resultUserProfile.reviewsArray == nil) {
    resultUserProfile.reviewsArray = [[NSMutableArray alloc]init];
  }
  [resultUserProfile.reviewsArray addObject:value];
  return self;
}
- (BUserProfileBuilder *)setReviewsArray:(NSArray *)array {
  resultUserProfile.reviewsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BUserProfileBuilder *)clearReviews {
  resultUserProfile.reviewsArray = nil;
  return self;
}
- (BOOL) hasIsExpert {
  return resultUserProfile.hasIsExpert;
}
- (BOOL) isExpert {
  return resultUserProfile.isExpert;
}
- (BUserProfileBuilder*) setIsExpert:(BOOL) value {
  resultUserProfile.hasIsExpert = YES;
  resultUserProfile.isExpert = value;
  return self;
}
- (BUserProfileBuilder*) clearIsExpert {
  resultUserProfile.hasIsExpert = NO;
  resultUserProfile.isExpert = NO;
  return self;
}
- (BOOL) hasStripeAccount {
  return resultUserProfile.hasStripeAccount;
}
- (NSString*) stripeAccount {
  return resultUserProfile.stripeAccount;
}
- (BUserProfileBuilder*) setStripeAccount:(NSString*) value {
  resultUserProfile.hasStripeAccount = YES;
  resultUserProfile.stripeAccount = value;
  return self;
}
- (BUserProfileBuilder*) clearStripeAccount {
  resultUserProfile.hasStripeAccount = NO;
  resultUserProfile.stripeAccount = @"";
  return self;
}
- (BOOL) hasServiceIsFreeForUser {
  return resultUserProfile.hasServiceIsFreeForUser;
}
- (BOOL) serviceIsFreeForUser {
  return resultUserProfile.serviceIsFreeForUser;
}
- (BUserProfileBuilder*) setServiceIsFreeForUser:(BOOL) value {
  resultUserProfile.hasServiceIsFreeForUser = YES;
  resultUserProfile.serviceIsFreeForUser = value;
  return self;
}
- (BUserProfileBuilder*) clearServiceIsFreeForUser {
  resultUserProfile.hasServiceIsFreeForUser = NO;
  resultUserProfile.serviceIsFreeForUser = NO;
  return self;
}
- (BOOL) hasChatFee {
  return resultUserProfile.hasChatFee;
}
- (NSString*) chatFee {
  return resultUserProfile.chatFee;
}
- (BUserProfileBuilder*) setChatFee:(NSString*) value {
  resultUserProfile.hasChatFee = YES;
  resultUserProfile.chatFee = value;
  return self;
}
- (BUserProfileBuilder*) clearChatFee {
  resultUserProfile.hasChatFee = NO;
  resultUserProfile.chatFee = @"";
  return self;
}
- (BOOL) hasCallFee {
  return resultUserProfile.hasCallFee;
}
- (NSString*) callFee {
  return resultUserProfile.callFee;
}
- (BUserProfileBuilder*) setCallFee:(NSString*) value {
  resultUserProfile.hasCallFee = YES;
  resultUserProfile.callFee = value;
  return self;
}
- (BUserProfileBuilder*) clearCallFee {
  resultUserProfile.hasCallFee = NO;
  resultUserProfile.callFee = @"";
  return self;
}
- (BOOL) hasUserInfo {
  return resultUserProfile.hasUserInfo;
}
- (SInt64) userInfo {
  return resultUserProfile.userInfo;
}
- (BUserProfileBuilder*) setUserInfo:(SInt64) value {
  resultUserProfile.hasUserInfo = YES;
  resultUserProfile.userInfo = value;
  return self;
}
- (BUserProfileBuilder*) clearUserInfo {
  resultUserProfile.hasUserInfo = NO;
  resultUserProfile.userInfo = 0L;
  return self;
}
- (BOOL) hasEditProfileID {
  return resultUserProfile.hasEditProfileID;
}
- (NSString*) editProfileID {
  return resultUserProfile.editProfileID;
}
- (BUserProfileBuilder*) setEditProfileID:(NSString*) value {
  resultUserProfile.hasEditProfileID = YES;
  resultUserProfile.editProfileID = value;
  return self;
}
- (BUserProfileBuilder*) clearEditProfileID {
  resultUserProfile.hasEditProfileID = NO;
  resultUserProfile.editProfileID = @"";
  return self;
}
- (BOOL) hasIsAdmin {
  return resultUserProfile.hasIsAdmin;
}
- (BOOL) isAdmin {
  return resultUserProfile.isAdmin;
}
- (BUserProfileBuilder*) setIsAdmin:(BOOL) value {
  resultUserProfile.hasIsAdmin = YES;
  resultUserProfile.isAdmin = value;
  return self;
}
- (BUserProfileBuilder*) clearIsAdmin {
  resultUserProfile.hasIsAdmin = NO;
  resultUserProfile.isAdmin = NO;
  return self;
}
@end

@interface BImageUpload ()
@property (strong) NSMutableArray * imageDataArray;
@end

@implementation BImageUpload

@synthesize imageDataArray;
@dynamic imageData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BImageUpload* defaultBImageUploadInstance = nil;
+ (void) initialize {
  if (self == [BImageUpload class]) {
    defaultBImageUploadInstance = [[BImageUpload alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBImageUploadInstance;
}
- (instancetype) defaultInstance {
  return defaultBImageUploadInstance;
}
- (NSArray *)imageData {
  return imageDataArray;
}
- (BImageData*)imageDataAtIndex:(NSUInteger)index {
  return [imageDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.imageDataArray enumerateObjectsUsingBlock:^(BImageData *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.imageDataArray enumerateObjectsUsingBlock:^(BImageData *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BImageUpload*) parseFromData:(NSData*) data {
  return (BImageUpload*)[[[BImageUpload builder] mergeFromData:data] build];
}
+ (BImageUpload*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BImageUpload*)[[[BImageUpload builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BImageUpload*) parseFromInputStream:(NSInputStream*) input {
  return (BImageUpload*)[[[BImageUpload builder] mergeFromInputStream:input] build];
}
+ (BImageUpload*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BImageUpload*)[[[BImageUpload builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BImageUpload*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BImageUpload*)[[[BImageUpload builder] mergeFromCodedInputStream:input] build];
}
+ (BImageUpload*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BImageUpload*)[[[BImageUpload builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BImageUploadBuilder*) builder {
  return [[BImageUploadBuilder alloc] init];
}
+ (BImageUploadBuilder*) builderWithPrototype:(BImageUpload*) prototype {
  return [[BImageUpload builder] mergeFrom:prototype];
}
- (BImageUploadBuilder*) builder {
  return [BImageUpload builder];
}
- (BImageUploadBuilder*) toBuilder {
  return [BImageUpload builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.imageDataArray enumerateObjectsUsingBlock:^(BImageData *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"imageData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (BImageData* element in self.imageDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"imageData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BImageUpload class]]) {
    return NO;
  }
  BImageUpload *otherMessage = other;
  return
      [self.imageDataArray isEqualToArray:otherMessage.imageDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.imageDataArray enumerateObjectsUsingBlock:^(BImageData *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BImageUploadBuilder()
@property (strong) BImageUpload* resultImageUpload;
@end

@implementation BImageUploadBuilder
@synthesize resultImageUpload;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImageUpload = [[BImageUpload alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImageUpload;
}
- (BImageUploadBuilder*) clear {
  self.resultImageUpload = [[BImageUpload alloc] init];
  return self;
}
- (BImageUploadBuilder*) clone {
  return [BImageUpload builderWithPrototype:resultImageUpload];
}
- (BImageUpload*) defaultInstance {
  return [BImageUpload defaultInstance];
}
- (BImageUpload*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BImageUpload*) buildPartial {
  BImageUpload* returnMe = resultImageUpload;
  self.resultImageUpload = nil;
  return returnMe;
}
- (BImageUploadBuilder*) mergeFrom:(BImageUpload*) other {
  if (other == [BImageUpload defaultInstance]) {
    return self;
  }
  if (other.imageDataArray.count > 0) {
    if (resultImageUpload.imageDataArray == nil) {
      resultImageUpload.imageDataArray = [[NSMutableArray alloc] initWithArray:other.imageDataArray];
    } else {
      [resultImageUpload.imageDataArray addObjectsFromArray:other.imageDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BImageUploadBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BImageUploadBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BImageDataBuilder* subBuilder = [BImageData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addImageData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)imageData {
  return resultImageUpload.imageDataArray;
}
- (BImageData*)imageDataAtIndex:(NSUInteger)index {
  return [resultImageUpload imageDataAtIndex:index];
}
- (BImageUploadBuilder *)addImageData:(BImageData*)value {
  if (resultImageUpload.imageDataArray == nil) {
    resultImageUpload.imageDataArray = [[NSMutableArray alloc]init];
  }
  [resultImageUpload.imageDataArray addObject:value];
  return self;
}
- (BImageUploadBuilder *)setImageDataArray:(NSArray *)array {
  resultImageUpload.imageDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BImageUploadBuilder *)clearImageData {
  resultImageUpload.imageDataArray = nil;
  return self;
}
@end

@interface BUserProfileUpdate ()
@property (strong) NSMutableArray * profilesArray;
@end

@implementation BUserProfileUpdate

@synthesize profilesArray;
@dynamic profiles;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BUserProfileUpdate* defaultBUserProfileUpdateInstance = nil;
+ (void) initialize {
  if (self == [BUserProfileUpdate class]) {
    defaultBUserProfileUpdateInstance = [[BUserProfileUpdate alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBUserProfileUpdateInstance;
}
- (instancetype) defaultInstance {
  return defaultBUserProfileUpdateInstance;
}
- (NSArray *)profiles {
  return profilesArray;
}
- (BUserProfile*)profilesAtIndex:(NSUInteger)index {
  return [profilesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitprofiles = YES;
   [self.profiles enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitprofiles = NO;
      *stop = YES;
    }
  }];
  if (!isInitprofiles) return isInitprofiles;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BUserProfileUpdate*) parseFromData:(NSData*) data {
  return (BUserProfileUpdate*)[[[BUserProfileUpdate builder] mergeFromData:data] build];
}
+ (BUserProfileUpdate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserProfileUpdate*)[[[BUserProfileUpdate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BUserProfileUpdate*) parseFromInputStream:(NSInputStream*) input {
  return (BUserProfileUpdate*)[[[BUserProfileUpdate builder] mergeFromInputStream:input] build];
}
+ (BUserProfileUpdate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserProfileUpdate*)[[[BUserProfileUpdate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserProfileUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BUserProfileUpdate*)[[[BUserProfileUpdate builder] mergeFromCodedInputStream:input] build];
}
+ (BUserProfileUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserProfileUpdate*)[[[BUserProfileUpdate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserProfileUpdateBuilder*) builder {
  return [[BUserProfileUpdateBuilder alloc] init];
}
+ (BUserProfileUpdateBuilder*) builderWithPrototype:(BUserProfileUpdate*) prototype {
  return [[BUserProfileUpdate builder] mergeFrom:prototype];
}
- (BUserProfileUpdateBuilder*) builder {
  return [BUserProfileUpdate builder];
}
- (BUserProfileUpdateBuilder*) toBuilder {
  return [BUserProfileUpdate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"profiles"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (BUserProfile* element in self.profilesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"profiles"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BUserProfileUpdate class]]) {
    return NO;
  }
  BUserProfileUpdate *otherMessage = other;
  return
      [self.profilesArray isEqualToArray:otherMessage.profilesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BUserProfileUpdateBuilder()
@property (strong) BUserProfileUpdate* resultUserProfileUpdate;
@end

@implementation BUserProfileUpdateBuilder
@synthesize resultUserProfileUpdate;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserProfileUpdate = [[BUserProfileUpdate alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserProfileUpdate;
}
- (BUserProfileUpdateBuilder*) clear {
  self.resultUserProfileUpdate = [[BUserProfileUpdate alloc] init];
  return self;
}
- (BUserProfileUpdateBuilder*) clone {
  return [BUserProfileUpdate builderWithPrototype:resultUserProfileUpdate];
}
- (BUserProfileUpdate*) defaultInstance {
  return [BUserProfileUpdate defaultInstance];
}
- (BUserProfileUpdate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BUserProfileUpdate*) buildPartial {
  BUserProfileUpdate* returnMe = resultUserProfileUpdate;
  self.resultUserProfileUpdate = nil;
  return returnMe;
}
- (BUserProfileUpdateBuilder*) mergeFrom:(BUserProfileUpdate*) other {
  if (other == [BUserProfileUpdate defaultInstance]) {
    return self;
  }
  if (other.profilesArray.count > 0) {
    if (resultUserProfileUpdate.profilesArray == nil) {
      resultUserProfileUpdate.profilesArray = [[NSMutableArray alloc] initWithArray:other.profilesArray];
    } else {
      [resultUserProfileUpdate.profilesArray addObjectsFromArray:other.profilesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BUserProfileUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BUserProfileUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BUserProfileBuilder* subBuilder = [BUserProfile builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProfiles:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)profiles {
  return resultUserProfileUpdate.profilesArray;
}
- (BUserProfile*)profilesAtIndex:(NSUInteger)index {
  return [resultUserProfileUpdate profilesAtIndex:index];
}
- (BUserProfileUpdateBuilder *)addProfiles:(BUserProfile*)value {
  if (resultUserProfileUpdate.profilesArray == nil) {
    resultUserProfileUpdate.profilesArray = [[NSMutableArray alloc]init];
  }
  [resultUserProfileUpdate.profilesArray addObject:value];
  return self;
}
- (BUserProfileUpdateBuilder *)setProfilesArray:(NSArray *)array {
  resultUserProfileUpdate.profilesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BUserProfileUpdateBuilder *)clearProfiles {
  resultUserProfileUpdate.profilesArray = nil;
  return self;
}
@end

@interface BUserProfileQuery ()
@property (strong) NSMutableArray * userIDsArray;
@property BOOL fetchDemoProfiles;
@property (strong) NSString* entityTagDeprecated;
@property (strong) NSString* entityUserID;
@property (strong) NSString* entityID;
@property (strong) NSMutableArray * entityTagsArray;
@end

@implementation BUserProfileQuery

@synthesize userIDsArray;
@dynamic userIDs;
- (BOOL) hasFetchDemoProfiles {
  return !!hasFetchDemoProfiles_;
}
- (void) setHasFetchDemoProfiles:(BOOL) _value_ {
  hasFetchDemoProfiles_ = !!_value_;
}
- (BOOL) fetchDemoProfiles {
  return !!fetchDemoProfiles_;
}
- (void) setFetchDemoProfiles:(BOOL) _value_ {
  fetchDemoProfiles_ = !!_value_;
}
- (BOOL) hasEntityTagDeprecated {
  return !!hasEntityTagDeprecated_;
}
- (void) setHasEntityTagDeprecated:(BOOL) _value_ {
  hasEntityTagDeprecated_ = !!_value_;
}
@synthesize entityTagDeprecated;
- (BOOL) hasEntityUserID {
  return !!hasEntityUserID_;
}
- (void) setHasEntityUserID:(BOOL) _value_ {
  hasEntityUserID_ = !!_value_;
}
@synthesize entityUserID;
- (BOOL) hasEntityID {
  return !!hasEntityID_;
}
- (void) setHasEntityID:(BOOL) _value_ {
  hasEntityID_ = !!_value_;
}
@synthesize entityID;
@synthesize entityTagsArray;
@dynamic entityTags;
- (instancetype) init {
  if ((self = [super init])) {
    self.fetchDemoProfiles = NO;
    self.entityTagDeprecated = @"";
    self.entityUserID = @"";
    self.entityID = @"";
  }
  return self;
}
static BUserProfileQuery* defaultBUserProfileQueryInstance = nil;
+ (void) initialize {
  if (self == [BUserProfileQuery class]) {
    defaultBUserProfileQueryInstance = [[BUserProfileQuery alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBUserProfileQueryInstance;
}
- (instancetype) defaultInstance {
  return defaultBUserProfileQueryInstance;
}
- (NSArray *)userIDs {
  return userIDsArray;
}
- (NSString*)userIDsAtIndex:(NSUInteger)index {
  return [userIDsArray objectAtIndex:index];
}
- (NSArray *)entityTags {
  return entityTagsArray;
}
- (NSString*)entityTagsAtIndex:(NSUInteger)index {
  return [entityTagsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.userIDsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:1 value:element];
  }];
  if (self.hasFetchDemoProfiles) {
    [output writeBool:2 value:self.fetchDemoProfiles];
  }
  if (self.hasEntityTagDeprecated) {
    [output writeString:3 value:self.entityTagDeprecated];
  }
  if (self.hasEntityUserID) {
    [output writeString:4 value:self.entityUserID];
  }
  if (self.hasEntityID) {
    [output writeString:5 value:self.entityID];
  }
  [self.entityTagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:6 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userIDsArray.count;
    [self.userIDsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasFetchDemoProfiles) {
    size_ += computeBoolSize(2, self.fetchDemoProfiles);
  }
  if (self.hasEntityTagDeprecated) {
    size_ += computeStringSize(3, self.entityTagDeprecated);
  }
  if (self.hasEntityUserID) {
    size_ += computeStringSize(4, self.entityUserID);
  }
  if (self.hasEntityID) {
    size_ += computeStringSize(5, self.entityID);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.entityTagsArray.count;
    [self.entityTagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BUserProfileQuery*) parseFromData:(NSData*) data {
  return (BUserProfileQuery*)[[[BUserProfileQuery builder] mergeFromData:data] build];
}
+ (BUserProfileQuery*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserProfileQuery*)[[[BUserProfileQuery builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BUserProfileQuery*) parseFromInputStream:(NSInputStream*) input {
  return (BUserProfileQuery*)[[[BUserProfileQuery builder] mergeFromInputStream:input] build];
}
+ (BUserProfileQuery*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserProfileQuery*)[[[BUserProfileQuery builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserProfileQuery*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BUserProfileQuery*)[[[BUserProfileQuery builder] mergeFromCodedInputStream:input] build];
}
+ (BUserProfileQuery*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserProfileQuery*)[[[BUserProfileQuery builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserProfileQueryBuilder*) builder {
  return [[BUserProfileQueryBuilder alloc] init];
}
+ (BUserProfileQueryBuilder*) builderWithPrototype:(BUserProfileQuery*) prototype {
  return [[BUserProfileQuery builder] mergeFrom:prototype];
}
- (BUserProfileQueryBuilder*) builder {
  return [BUserProfileQuery builder];
}
- (BUserProfileQueryBuilder*) toBuilder {
  return [BUserProfileQuery builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userIDsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userIDs", obj];
  }];
  if (self.hasFetchDemoProfiles) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fetchDemoProfiles", [NSNumber numberWithBool:self.fetchDemoProfiles]];
  }
  if (self.hasEntityTagDeprecated) {
    [output appendFormat:@"%@%@: %@\n", indent, @"entityTagDeprecated", self.entityTagDeprecated];
  }
  if (self.hasEntityUserID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"entityUserID", self.entityUserID];
  }
  if (self.hasEntityID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"entityID", self.entityID];
  }
  [self.entityTagsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"entityTags", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [dictionary setObject:self.userIDs forKey: @"userIDs"];
  if (self.hasFetchDemoProfiles) {
    [dictionary setObject: [NSNumber numberWithBool:self.fetchDemoProfiles] forKey: @"fetchDemoProfiles"];
  }
  if (self.hasEntityTagDeprecated) {
    [dictionary setObject: self.entityTagDeprecated forKey: @"entityTagDeprecated"];
  }
  if (self.hasEntityUserID) {
    [dictionary setObject: self.entityUserID forKey: @"entityUserID"];
  }
  if (self.hasEntityID) {
    [dictionary setObject: self.entityID forKey: @"entityID"];
  }
  [dictionary setObject:self.entityTags forKey: @"entityTags"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BUserProfileQuery class]]) {
    return NO;
  }
  BUserProfileQuery *otherMessage = other;
  return
      [self.userIDsArray isEqualToArray:otherMessage.userIDsArray] &&
      self.hasFetchDemoProfiles == otherMessage.hasFetchDemoProfiles &&
      (!self.hasFetchDemoProfiles || self.fetchDemoProfiles == otherMessage.fetchDemoProfiles) &&
      self.hasEntityTagDeprecated == otherMessage.hasEntityTagDeprecated &&
      (!self.hasEntityTagDeprecated || [self.entityTagDeprecated isEqual:otherMessage.entityTagDeprecated]) &&
      self.hasEntityUserID == otherMessage.hasEntityUserID &&
      (!self.hasEntityUserID || [self.entityUserID isEqual:otherMessage.entityUserID]) &&
      self.hasEntityID == otherMessage.hasEntityID &&
      (!self.hasEntityID || [self.entityID isEqual:otherMessage.entityID]) &&
      [self.entityTagsArray isEqualToArray:otherMessage.entityTagsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userIDsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasFetchDemoProfiles) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.fetchDemoProfiles] hash];
  }
  if (self.hasEntityTagDeprecated) {
    hashCode = hashCode * 31 + [self.entityTagDeprecated hash];
  }
  if (self.hasEntityUserID) {
    hashCode = hashCode * 31 + [self.entityUserID hash];
  }
  if (self.hasEntityID) {
    hashCode = hashCode * 31 + [self.entityID hash];
  }
  [self.entityTagsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BUserProfileQueryBuilder()
@property (strong) BUserProfileQuery* resultUserProfileQuery;
@end

@implementation BUserProfileQueryBuilder
@synthesize resultUserProfileQuery;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserProfileQuery = [[BUserProfileQuery alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserProfileQuery;
}
- (BUserProfileQueryBuilder*) clear {
  self.resultUserProfileQuery = [[BUserProfileQuery alloc] init];
  return self;
}
- (BUserProfileQueryBuilder*) clone {
  return [BUserProfileQuery builderWithPrototype:resultUserProfileQuery];
}
- (BUserProfileQuery*) defaultInstance {
  return [BUserProfileQuery defaultInstance];
}
- (BUserProfileQuery*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BUserProfileQuery*) buildPartial {
  BUserProfileQuery* returnMe = resultUserProfileQuery;
  self.resultUserProfileQuery = nil;
  return returnMe;
}
- (BUserProfileQueryBuilder*) mergeFrom:(BUserProfileQuery*) other {
  if (other == [BUserProfileQuery defaultInstance]) {
    return self;
  }
  if (other.userIDsArray.count > 0) {
    if (resultUserProfileQuery.userIDsArray == nil) {
      resultUserProfileQuery.userIDsArray = [[NSMutableArray alloc] initWithArray:other.userIDsArray];
    } else {
      [resultUserProfileQuery.userIDsArray addObjectsFromArray:other.userIDsArray];
    }
  }
  if (other.hasFetchDemoProfiles) {
    [self setFetchDemoProfiles:other.fetchDemoProfiles];
  }
  if (other.hasEntityTagDeprecated) {
    [self setEntityTagDeprecated:other.entityTagDeprecated];
  }
  if (other.hasEntityUserID) {
    [self setEntityUserID:other.entityUserID];
  }
  if (other.hasEntityID) {
    [self setEntityID:other.entityID];
  }
  if (other.entityTagsArray.count > 0) {
    if (resultUserProfileQuery.entityTagsArray == nil) {
      resultUserProfileQuery.entityTagsArray = [[NSMutableArray alloc] initWithArray:other.entityTagsArray];
    } else {
      [resultUserProfileQuery.entityTagsArray addObjectsFromArray:other.entityTagsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BUserProfileQueryBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BUserProfileQueryBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addUserIDs:[input readString]];
        break;
      }
      case 16: {
        [self setFetchDemoProfiles:[input readBool]];
        break;
      }
      case 26: {
        [self setEntityTagDeprecated:[input readString]];
        break;
      }
      case 34: {
        [self setEntityUserID:[input readString]];
        break;
      }
      case 42: {
        [self setEntityID:[input readString]];
        break;
      }
      case 50: {
        [self addEntityTags:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray *)userIDs {
  return resultUserProfileQuery.userIDsArray;
}
- (NSString*)userIDsAtIndex:(NSUInteger)index {
  return [resultUserProfileQuery userIDsAtIndex:index];
}
- (BUserProfileQueryBuilder *)addUserIDs:(NSString*)value {
  if (resultUserProfileQuery.userIDsArray == nil) {
    resultUserProfileQuery.userIDsArray = [[NSMutableArray alloc]init];
  }
  [resultUserProfileQuery.userIDsArray addObject:value];
  return self;
}
- (BUserProfileQueryBuilder *)setUserIDsArray:(NSArray *)array {
  resultUserProfileQuery.userIDsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (BUserProfileQueryBuilder *)clearUserIDs {
  resultUserProfileQuery.userIDsArray = nil;
  return self;
}
- (BOOL) hasFetchDemoProfiles {
  return resultUserProfileQuery.hasFetchDemoProfiles;
}
- (BOOL) fetchDemoProfiles {
  return resultUserProfileQuery.fetchDemoProfiles;
}
- (BUserProfileQueryBuilder*) setFetchDemoProfiles:(BOOL) value {
  resultUserProfileQuery.hasFetchDemoProfiles = YES;
  resultUserProfileQuery.fetchDemoProfiles = value;
  return self;
}
- (BUserProfileQueryBuilder*) clearFetchDemoProfiles {
  resultUserProfileQuery.hasFetchDemoProfiles = NO;
  resultUserProfileQuery.fetchDemoProfiles = NO;
  return self;
}
- (BOOL) hasEntityTagDeprecated {
  return resultUserProfileQuery.hasEntityTagDeprecated;
}
- (NSString*) entityTagDeprecated {
  return resultUserProfileQuery.entityTagDeprecated;
}
- (BUserProfileQueryBuilder*) setEntityTagDeprecated:(NSString*) value {
  resultUserProfileQuery.hasEntityTagDeprecated = YES;
  resultUserProfileQuery.entityTagDeprecated = value;
  return self;
}
- (BUserProfileQueryBuilder*) clearEntityTagDeprecated {
  resultUserProfileQuery.hasEntityTagDeprecated = NO;
  resultUserProfileQuery.entityTagDeprecated = @"";
  return self;
}
- (BOOL) hasEntityUserID {
  return resultUserProfileQuery.hasEntityUserID;
}
- (NSString*) entityUserID {
  return resultUserProfileQuery.entityUserID;
}
- (BUserProfileQueryBuilder*) setEntityUserID:(NSString*) value {
  resultUserProfileQuery.hasEntityUserID = YES;
  resultUserProfileQuery.entityUserID = value;
  return self;
}
- (BUserProfileQueryBuilder*) clearEntityUserID {
  resultUserProfileQuery.hasEntityUserID = NO;
  resultUserProfileQuery.entityUserID = @"";
  return self;
}
- (BOOL) hasEntityID {
  return resultUserProfileQuery.hasEntityID;
}
- (NSString*) entityID {
  return resultUserProfileQuery.entityID;
}
- (BUserProfileQueryBuilder*) setEntityID:(NSString*) value {
  resultUserProfileQuery.hasEntityID = YES;
  resultUserProfileQuery.entityID = value;
  return self;
}
- (BUserProfileQueryBuilder*) clearEntityID {
  resultUserProfileQuery.hasEntityID = NO;
  resultUserProfileQuery.entityID = @"";
  return self;
}
- (NSMutableArray *)entityTags {
  return resultUserProfileQuery.entityTagsArray;
}
- (NSString*)entityTagsAtIndex:(NSUInteger)index {
  return [resultUserProfileQuery entityTagsAtIndex:index];
}
- (BUserProfileQueryBuilder *)addEntityTags:(NSString*)value {
  if (resultUserProfileQuery.entityTagsArray == nil) {
    resultUserProfileQuery.entityTagsArray = [[NSMutableArray alloc]init];
  }
  [resultUserProfileQuery.entityTagsArray addObject:value];
  return self;
}
- (BUserProfileQueryBuilder *)setEntityTagsArray:(NSArray *)array {
  resultUserProfileQuery.entityTagsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (BUserProfileQueryBuilder *)clearEntityTags {
  resultUserProfileQuery.entityTagsArray = nil;
  return self;
}
@end

@interface BConfirmationRequest ()
@property (strong) BContactInfo* contactInfo;
@property (strong) BUserProfile* userProfile;
@property (strong) NSString* confirmationCode;
@property (strong) NSString* inviterUserID;
@end

@implementation BConfirmationRequest

- (BOOL) hasContactInfo {
  return !!hasContactInfo_;
}
- (void) setHasContactInfo:(BOOL) _value_ {
  hasContactInfo_ = !!_value_;
}
@synthesize contactInfo;
- (BOOL) hasUserProfile {
  return !!hasUserProfile_;
}
- (void) setHasUserProfile:(BOOL) _value_ {
  hasUserProfile_ = !!_value_;
}
@synthesize userProfile;
- (BOOL) hasConfirmationCode {
  return !!hasConfirmationCode_;
}
- (void) setHasConfirmationCode:(BOOL) _value_ {
  hasConfirmationCode_ = !!_value_;
}
@synthesize confirmationCode;
- (BOOL) hasInviterUserID {
  return !!hasInviterUserID_;
}
- (void) setHasInviterUserID:(BOOL) _value_ {
  hasInviterUserID_ = !!_value_;
}
@synthesize inviterUserID;
- (instancetype) init {
  if ((self = [super init])) {
    self.contactInfo = [BContactInfo defaultInstance];
    self.userProfile = [BUserProfile defaultInstance];
    self.confirmationCode = @"";
    self.inviterUserID = @"";
  }
  return self;
}
static BConfirmationRequest* defaultBConfirmationRequestInstance = nil;
+ (void) initialize {
  if (self == [BConfirmationRequest class]) {
    defaultBConfirmationRequestInstance = [[BConfirmationRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBConfirmationRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBConfirmationRequestInstance;
}
- (BOOL) isInitialized {
  if (self.hasContactInfo) {
    if (!self.contactInfo.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserProfile) {
    if (!self.userProfile.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasContactInfo) {
    [output writeMessage:1 value:self.contactInfo];
  }
  if (self.hasUserProfile) {
    [output writeMessage:2 value:self.userProfile];
  }
  if (self.hasConfirmationCode) {
    [output writeString:3 value:self.confirmationCode];
  }
  if (self.hasInviterUserID) {
    [output writeString:4 value:self.inviterUserID];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasContactInfo) {
    size_ += computeMessageSize(1, self.contactInfo);
  }
  if (self.hasUserProfile) {
    size_ += computeMessageSize(2, self.userProfile);
  }
  if (self.hasConfirmationCode) {
    size_ += computeStringSize(3, self.confirmationCode);
  }
  if (self.hasInviterUserID) {
    size_ += computeStringSize(4, self.inviterUserID);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BConfirmationRequest*) parseFromData:(NSData*) data {
  return (BConfirmationRequest*)[[[BConfirmationRequest builder] mergeFromData:data] build];
}
+ (BConfirmationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BConfirmationRequest*)[[[BConfirmationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BConfirmationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BConfirmationRequest*)[[[BConfirmationRequest builder] mergeFromInputStream:input] build];
}
+ (BConfirmationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BConfirmationRequest*)[[[BConfirmationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BConfirmationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BConfirmationRequest*)[[[BConfirmationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BConfirmationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BConfirmationRequest*)[[[BConfirmationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BConfirmationRequestBuilder*) builder {
  return [[BConfirmationRequestBuilder alloc] init];
}
+ (BConfirmationRequestBuilder*) builderWithPrototype:(BConfirmationRequest*) prototype {
  return [[BConfirmationRequest builder] mergeFrom:prototype];
}
- (BConfirmationRequestBuilder*) builder {
  return [BConfirmationRequest builder];
}
- (BConfirmationRequestBuilder*) toBuilder {
  return [BConfirmationRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasContactInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"contactInfo"];
    [self.contactInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserProfile) {
    [output appendFormat:@"%@%@ {\n", indent, @"userProfile"];
    [self.userProfile writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasConfirmationCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"confirmationCode", self.confirmationCode];
  }
  if (self.hasInviterUserID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inviterUserID", self.inviterUserID];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasContactInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.contactInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"contactInfo"];
  }
  if (self.hasUserProfile) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userProfile storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userProfile"];
  }
  if (self.hasConfirmationCode) {
    [dictionary setObject: self.confirmationCode forKey: @"confirmationCode"];
  }
  if (self.hasInviterUserID) {
    [dictionary setObject: self.inviterUserID forKey: @"inviterUserID"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BConfirmationRequest class]]) {
    return NO;
  }
  BConfirmationRequest *otherMessage = other;
  return
      self.hasContactInfo == otherMessage.hasContactInfo &&
      (!self.hasContactInfo || [self.contactInfo isEqual:otherMessage.contactInfo]) &&
      self.hasUserProfile == otherMessage.hasUserProfile &&
      (!self.hasUserProfile || [self.userProfile isEqual:otherMessage.userProfile]) &&
      self.hasConfirmationCode == otherMessage.hasConfirmationCode &&
      (!self.hasConfirmationCode || [self.confirmationCode isEqual:otherMessage.confirmationCode]) &&
      self.hasInviterUserID == otherMessage.hasInviterUserID &&
      (!self.hasInviterUserID || [self.inviterUserID isEqual:otherMessage.inviterUserID]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasContactInfo) {
    hashCode = hashCode * 31 + [self.contactInfo hash];
  }
  if (self.hasUserProfile) {
    hashCode = hashCode * 31 + [self.userProfile hash];
  }
  if (self.hasConfirmationCode) {
    hashCode = hashCode * 31 + [self.confirmationCode hash];
  }
  if (self.hasInviterUserID) {
    hashCode = hashCode * 31 + [self.inviterUserID hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BConfirmationRequestBuilder()
@property (strong) BConfirmationRequest* resultConfirmationRequest;
@end

@implementation BConfirmationRequestBuilder
@synthesize resultConfirmationRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConfirmationRequest = [[BConfirmationRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConfirmationRequest;
}
- (BConfirmationRequestBuilder*) clear {
  self.resultConfirmationRequest = [[BConfirmationRequest alloc] init];
  return self;
}
- (BConfirmationRequestBuilder*) clone {
  return [BConfirmationRequest builderWithPrototype:resultConfirmationRequest];
}
- (BConfirmationRequest*) defaultInstance {
  return [BConfirmationRequest defaultInstance];
}
- (BConfirmationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BConfirmationRequest*) buildPartial {
  BConfirmationRequest* returnMe = resultConfirmationRequest;
  self.resultConfirmationRequest = nil;
  return returnMe;
}
- (BConfirmationRequestBuilder*) mergeFrom:(BConfirmationRequest*) other {
  if (other == [BConfirmationRequest defaultInstance]) {
    return self;
  }
  if (other.hasContactInfo) {
    [self mergeContactInfo:other.contactInfo];
  }
  if (other.hasUserProfile) {
    [self mergeUserProfile:other.userProfile];
  }
  if (other.hasConfirmationCode) {
    [self setConfirmationCode:other.confirmationCode];
  }
  if (other.hasInviterUserID) {
    [self setInviterUserID:other.inviterUserID];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BConfirmationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BConfirmationRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BContactInfoBuilder* subBuilder = [BContactInfo builder];
        if (self.hasContactInfo) {
          [subBuilder mergeFrom:self.contactInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setContactInfo:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        BUserProfileBuilder* subBuilder = [BUserProfile builder];
        if (self.hasUserProfile) {
          [subBuilder mergeFrom:self.userProfile];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserProfile:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setConfirmationCode:[input readString]];
        break;
      }
      case 34: {
        [self setInviterUserID:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasContactInfo {
  return resultConfirmationRequest.hasContactInfo;
}
- (BContactInfo*) contactInfo {
  return resultConfirmationRequest.contactInfo;
}
- (BConfirmationRequestBuilder*) setContactInfo:(BContactInfo*) value {
  resultConfirmationRequest.hasContactInfo = YES;
  resultConfirmationRequest.contactInfo = value;
  return self;
}
- (BConfirmationRequestBuilder*) setContactInfoBuilder:(BContactInfoBuilder*) builderForValue {
  return [self setContactInfo:[builderForValue build]];
}
- (BConfirmationRequestBuilder*) mergeContactInfo:(BContactInfo*) value {
  if (resultConfirmationRequest.hasContactInfo &&
      resultConfirmationRequest.contactInfo != [BContactInfo defaultInstance]) {
    resultConfirmationRequest.contactInfo =
      [[[BContactInfo builderWithPrototype:resultConfirmationRequest.contactInfo] mergeFrom:value] buildPartial];
  } else {
    resultConfirmationRequest.contactInfo = value;
  }
  resultConfirmationRequest.hasContactInfo = YES;
  return self;
}
- (BConfirmationRequestBuilder*) clearContactInfo {
  resultConfirmationRequest.hasContactInfo = NO;
  resultConfirmationRequest.contactInfo = [BContactInfo defaultInstance];
  return self;
}
- (BOOL) hasUserProfile {
  return resultConfirmationRequest.hasUserProfile;
}
- (BUserProfile*) userProfile {
  return resultConfirmationRequest.userProfile;
}
- (BConfirmationRequestBuilder*) setUserProfile:(BUserProfile*) value {
  resultConfirmationRequest.hasUserProfile = YES;
  resultConfirmationRequest.userProfile = value;
  return self;
}
- (BConfirmationRequestBuilder*) setUserProfileBuilder:(BUserProfileBuilder*) builderForValue {
  return [self setUserProfile:[builderForValue build]];
}
- (BConfirmationRequestBuilder*) mergeUserProfile:(BUserProfile*) value {
  if (resultConfirmationRequest.hasUserProfile &&
      resultConfirmationRequest.userProfile != [BUserProfile defaultInstance]) {
    resultConfirmationRequest.userProfile =
      [[[BUserProfile builderWithPrototype:resultConfirmationRequest.userProfile] mergeFrom:value] buildPartial];
  } else {
    resultConfirmationRequest.userProfile = value;
  }
  resultConfirmationRequest.hasUserProfile = YES;
  return self;
}
- (BConfirmationRequestBuilder*) clearUserProfile {
  resultConfirmationRequest.hasUserProfile = NO;
  resultConfirmationRequest.userProfile = [BUserProfile defaultInstance];
  return self;
}
- (BOOL) hasConfirmationCode {
  return resultConfirmationRequest.hasConfirmationCode;
}
- (NSString*) confirmationCode {
  return resultConfirmationRequest.confirmationCode;
}
- (BConfirmationRequestBuilder*) setConfirmationCode:(NSString*) value {
  resultConfirmationRequest.hasConfirmationCode = YES;
  resultConfirmationRequest.confirmationCode = value;
  return self;
}
- (BConfirmationRequestBuilder*) clearConfirmationCode {
  resultConfirmationRequest.hasConfirmationCode = NO;
  resultConfirmationRequest.confirmationCode = @"";
  return self;
}
- (BOOL) hasInviterUserID {
  return resultConfirmationRequest.hasInviterUserID;
}
- (NSString*) inviterUserID {
  return resultConfirmationRequest.inviterUserID;
}
- (BConfirmationRequestBuilder*) setInviterUserID:(NSString*) value {
  resultConfirmationRequest.hasInviterUserID = YES;
  resultConfirmationRequest.inviterUserID = value;
  return self;
}
- (BConfirmationRequestBuilder*) clearInviterUserID {
  resultConfirmationRequest.hasInviterUserID = NO;
  resultConfirmationRequest.inviterUserID = @"";
  return self;
}
@end

@interface BProfilesFromContactInfo ()
@property (strong) NSMutableArray * profilesArray;
@end

@implementation BProfilesFromContactInfo

@synthesize profilesArray;
@dynamic profiles;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BProfilesFromContactInfo* defaultBProfilesFromContactInfoInstance = nil;
+ (void) initialize {
  if (self == [BProfilesFromContactInfo class]) {
    defaultBProfilesFromContactInfoInstance = [[BProfilesFromContactInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBProfilesFromContactInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultBProfilesFromContactInfoInstance;
}
- (NSArray *)profiles {
  return profilesArray;
}
- (BUserProfile*)profilesAtIndex:(NSUInteger)index {
  return [profilesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitprofiles = YES;
   [self.profiles enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitprofiles = NO;
      *stop = YES;
    }
  }];
  if (!isInitprofiles) return isInitprofiles;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BProfilesFromContactInfo*) parseFromData:(NSData*) data {
  return (BProfilesFromContactInfo*)[[[BProfilesFromContactInfo builder] mergeFromData:data] build];
}
+ (BProfilesFromContactInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BProfilesFromContactInfo*)[[[BProfilesFromContactInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BProfilesFromContactInfo*) parseFromInputStream:(NSInputStream*) input {
  return (BProfilesFromContactInfo*)[[[BProfilesFromContactInfo builder] mergeFromInputStream:input] build];
}
+ (BProfilesFromContactInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BProfilesFromContactInfo*)[[[BProfilesFromContactInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BProfilesFromContactInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BProfilesFromContactInfo*)[[[BProfilesFromContactInfo builder] mergeFromCodedInputStream:input] build];
}
+ (BProfilesFromContactInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BProfilesFromContactInfo*)[[[BProfilesFromContactInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BProfilesFromContactInfoBuilder*) builder {
  return [[BProfilesFromContactInfoBuilder alloc] init];
}
+ (BProfilesFromContactInfoBuilder*) builderWithPrototype:(BProfilesFromContactInfo*) prototype {
  return [[BProfilesFromContactInfo builder] mergeFrom:prototype];
}
- (BProfilesFromContactInfoBuilder*) builder {
  return [BProfilesFromContactInfo builder];
}
- (BProfilesFromContactInfoBuilder*) toBuilder {
  return [BProfilesFromContactInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"profiles"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (BUserProfile* element in self.profilesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"profiles"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BProfilesFromContactInfo class]]) {
    return NO;
  }
  BProfilesFromContactInfo *otherMessage = other;
  return
      [self.profilesArray isEqualToArray:otherMessage.profilesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BProfilesFromContactInfoBuilder()
@property (strong) BProfilesFromContactInfo* resultProfilesFromContactInfo;
@end

@implementation BProfilesFromContactInfoBuilder
@synthesize resultProfilesFromContactInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProfilesFromContactInfo = [[BProfilesFromContactInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProfilesFromContactInfo;
}
- (BProfilesFromContactInfoBuilder*) clear {
  self.resultProfilesFromContactInfo = [[BProfilesFromContactInfo alloc] init];
  return self;
}
- (BProfilesFromContactInfoBuilder*) clone {
  return [BProfilesFromContactInfo builderWithPrototype:resultProfilesFromContactInfo];
}
- (BProfilesFromContactInfo*) defaultInstance {
  return [BProfilesFromContactInfo defaultInstance];
}
- (BProfilesFromContactInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BProfilesFromContactInfo*) buildPartial {
  BProfilesFromContactInfo* returnMe = resultProfilesFromContactInfo;
  self.resultProfilesFromContactInfo = nil;
  return returnMe;
}
- (BProfilesFromContactInfoBuilder*) mergeFrom:(BProfilesFromContactInfo*) other {
  if (other == [BProfilesFromContactInfo defaultInstance]) {
    return self;
  }
  if (other.profilesArray.count > 0) {
    if (resultProfilesFromContactInfo.profilesArray == nil) {
      resultProfilesFromContactInfo.profilesArray = [[NSMutableArray alloc] initWithArray:other.profilesArray];
    } else {
      [resultProfilesFromContactInfo.profilesArray addObjectsFromArray:other.profilesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BProfilesFromContactInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BProfilesFromContactInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BUserProfileBuilder* subBuilder = [BUserProfile builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProfiles:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)profiles {
  return resultProfilesFromContactInfo.profilesArray;
}
- (BUserProfile*)profilesAtIndex:(NSUInteger)index {
  return [resultProfilesFromContactInfo profilesAtIndex:index];
}
- (BProfilesFromContactInfoBuilder *)addProfiles:(BUserProfile*)value {
  if (resultProfilesFromContactInfo.profilesArray == nil) {
    resultProfilesFromContactInfo.profilesArray = [[NSMutableArray alloc]init];
  }
  [resultProfilesFromContactInfo.profilesArray addObject:value];
  return self;
}
- (BProfilesFromContactInfoBuilder *)setProfilesArray:(NSArray *)array {
  resultProfilesFromContactInfo.profilesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BProfilesFromContactInfoBuilder *)clearProfiles {
  resultProfilesFromContactInfo.profilesArray = nil;
  return self;
}
@end

@interface BFriendUpdate ()
@property BFriendStatus friendStatus;
@property (strong) NSString* friendID;
@property (strong) NSMutableArray * profilesArray;
@end

@implementation BFriendUpdate

- (BOOL) hasFriendStatus {
  return !!hasFriendStatus_;
}
- (void) setHasFriendStatus:(BOOL) _value_ {
  hasFriendStatus_ = !!_value_;
}
@synthesize friendStatus;
- (BOOL) hasFriendID {
  return !!hasFriendID_;
}
- (void) setHasFriendID:(BOOL) _value_ {
  hasFriendID_ = !!_value_;
}
@synthesize friendID;
@synthesize profilesArray;
@dynamic profiles;
- (instancetype) init {
  if ((self = [super init])) {
    self.friendStatus = BFriendStatusFSUnknown;
    self.friendID = @"";
  }
  return self;
}
static BFriendUpdate* defaultBFriendUpdateInstance = nil;
+ (void) initialize {
  if (self == [BFriendUpdate class]) {
    defaultBFriendUpdateInstance = [[BFriendUpdate alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBFriendUpdateInstance;
}
- (instancetype) defaultInstance {
  return defaultBFriendUpdateInstance;
}
- (NSArray *)profiles {
  return profilesArray;
}
- (BUserProfile*)profilesAtIndex:(NSUInteger)index {
  return [profilesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitprofiles = YES;
   [self.profiles enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitprofiles = NO;
      *stop = YES;
    }
  }];
  if (!isInitprofiles) return isInitprofiles;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFriendStatus) {
    [output writeEnum:1 value:self.friendStatus];
  }
  if (self.hasFriendID) {
    [output writeString:2 value:self.friendID];
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFriendStatus) {
    size_ += computeEnumSize(1, self.friendStatus);
  }
  if (self.hasFriendID) {
    size_ += computeStringSize(2, self.friendID);
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BFriendUpdate*) parseFromData:(NSData*) data {
  return (BFriendUpdate*)[[[BFriendUpdate builder] mergeFromData:data] build];
}
+ (BFriendUpdate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFriendUpdate*)[[[BFriendUpdate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BFriendUpdate*) parseFromInputStream:(NSInputStream*) input {
  return (BFriendUpdate*)[[[BFriendUpdate builder] mergeFromInputStream:input] build];
}
+ (BFriendUpdate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFriendUpdate*)[[[BFriendUpdate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BFriendUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BFriendUpdate*)[[[BFriendUpdate builder] mergeFromCodedInputStream:input] build];
}
+ (BFriendUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BFriendUpdate*)[[[BFriendUpdate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BFriendUpdateBuilder*) builder {
  return [[BFriendUpdateBuilder alloc] init];
}
+ (BFriendUpdateBuilder*) builderWithPrototype:(BFriendUpdate*) prototype {
  return [[BFriendUpdate builder] mergeFrom:prototype];
}
- (BFriendUpdateBuilder*) builder {
  return [BFriendUpdate builder];
}
- (BFriendUpdateBuilder*) toBuilder {
  return [BFriendUpdate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFriendStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"friendStatus", NSStringFromBFriendStatus(self.friendStatus)];
  }
  if (self.hasFriendID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"friendID", self.friendID];
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"profiles"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFriendStatus) {
    [dictionary setObject: @(self.friendStatus) forKey: @"friendStatus"];
  }
  if (self.hasFriendID) {
    [dictionary setObject: self.friendID forKey: @"friendID"];
  }
  for (BUserProfile* element in self.profilesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"profiles"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BFriendUpdate class]]) {
    return NO;
  }
  BFriendUpdate *otherMessage = other;
  return
      self.hasFriendStatus == otherMessage.hasFriendStatus &&
      (!self.hasFriendStatus || self.friendStatus == otherMessage.friendStatus) &&
      self.hasFriendID == otherMessage.hasFriendID &&
      (!self.hasFriendID || [self.friendID isEqual:otherMessage.friendID]) &&
      [self.profilesArray isEqualToArray:otherMessage.profilesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFriendStatus) {
    hashCode = hashCode * 31 + self.friendStatus;
  }
  if (self.hasFriendID) {
    hashCode = hashCode * 31 + [self.friendID hash];
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BFriendUpdateBuilder()
@property (strong) BFriendUpdate* resultFriendUpdate;
@end

@implementation BFriendUpdateBuilder
@synthesize resultFriendUpdate;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFriendUpdate = [[BFriendUpdate alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFriendUpdate;
}
- (BFriendUpdateBuilder*) clear {
  self.resultFriendUpdate = [[BFriendUpdate alloc] init];
  return self;
}
- (BFriendUpdateBuilder*) clone {
  return [BFriendUpdate builderWithPrototype:resultFriendUpdate];
}
- (BFriendUpdate*) defaultInstance {
  return [BFriendUpdate defaultInstance];
}
- (BFriendUpdate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BFriendUpdate*) buildPartial {
  BFriendUpdate* returnMe = resultFriendUpdate;
  self.resultFriendUpdate = nil;
  return returnMe;
}
- (BFriendUpdateBuilder*) mergeFrom:(BFriendUpdate*) other {
  if (other == [BFriendUpdate defaultInstance]) {
    return self;
  }
  if (other.hasFriendStatus) {
    [self setFriendStatus:other.friendStatus];
  }
  if (other.hasFriendID) {
    [self setFriendID:other.friendID];
  }
  if (other.profilesArray.count > 0) {
    if (resultFriendUpdate.profilesArray == nil) {
      resultFriendUpdate.profilesArray = [[NSMutableArray alloc] initWithArray:other.profilesArray];
    } else {
      [resultFriendUpdate.profilesArray addObjectsFromArray:other.profilesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BFriendUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BFriendUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        BFriendStatus value = (BFriendStatus)[input readEnum];
        if (BFriendStatusIsValidValue(value)) {
          [self setFriendStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setFriendID:[input readString]];
        break;
      }
      case 26: {
        BUserProfileBuilder* subBuilder = [BUserProfile builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProfiles:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasFriendStatus {
  return resultFriendUpdate.hasFriendStatus;
}
- (BFriendStatus) friendStatus {
  return resultFriendUpdate.friendStatus;
}
- (BFriendUpdateBuilder*) setFriendStatus:(BFriendStatus) value {
  resultFriendUpdate.hasFriendStatus = YES;
  resultFriendUpdate.friendStatus = value;
  return self;
}
- (BFriendUpdateBuilder*) clearFriendStatus {
  resultFriendUpdate.hasFriendStatus = NO;
  resultFriendUpdate.friendStatus = BFriendStatusFSUnknown;
  return self;
}
- (BOOL) hasFriendID {
  return resultFriendUpdate.hasFriendID;
}
- (NSString*) friendID {
  return resultFriendUpdate.friendID;
}
- (BFriendUpdateBuilder*) setFriendID:(NSString*) value {
  resultFriendUpdate.hasFriendID = YES;
  resultFriendUpdate.friendID = value;
  return self;
}
- (BFriendUpdateBuilder*) clearFriendID {
  resultFriendUpdate.hasFriendID = NO;
  resultFriendUpdate.friendID = @"";
  return self;
}
- (NSMutableArray *)profiles {
  return resultFriendUpdate.profilesArray;
}
- (BUserProfile*)profilesAtIndex:(NSUInteger)index {
  return [resultFriendUpdate profilesAtIndex:index];
}
- (BFriendUpdateBuilder *)addProfiles:(BUserProfile*)value {
  if (resultFriendUpdate.profilesArray == nil) {
    resultFriendUpdate.profilesArray = [[NSMutableArray alloc]init];
  }
  [resultFriendUpdate.profilesArray addObject:value];
  return self;
}
- (BFriendUpdateBuilder *)setProfilesArray:(NSArray *)array {
  resultFriendUpdate.profilesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BFriendUpdateBuilder *)clearProfiles {
  resultFriendUpdate.profilesArray = nil;
  return self;
}
@end

@interface BUserInvite ()
@property (strong) NSString* userID;
@property (strong) NSString* friendID;
@property (strong) NSString* message;
@property (strong) BContactInfo* contactInfo;
@property (strong) NSMutableArray * profilesArray;
@property (strong) NSString* confirmationCode;
@end

@implementation BUserInvite

- (BOOL) hasUserID {
  return !!hasUserID_;
}
- (void) setHasUserID:(BOOL) _value_ {
  hasUserID_ = !!_value_;
}
@synthesize userID;
- (BOOL) hasFriendID {
  return !!hasFriendID_;
}
- (void) setHasFriendID:(BOOL) _value_ {
  hasFriendID_ = !!_value_;
}
@synthesize friendID;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (BOOL) hasContactInfo {
  return !!hasContactInfo_;
}
- (void) setHasContactInfo:(BOOL) _value_ {
  hasContactInfo_ = !!_value_;
}
@synthesize contactInfo;
@synthesize profilesArray;
@dynamic profiles;
- (BOOL) hasConfirmationCode {
  return !!hasConfirmationCode_;
}
- (void) setHasConfirmationCode:(BOOL) _value_ {
  hasConfirmationCode_ = !!_value_;
}
@synthesize confirmationCode;
- (instancetype) init {
  if ((self = [super init])) {
    self.userID = @"";
    self.friendID = @"";
    self.message = @"";
    self.contactInfo = [BContactInfo defaultInstance];
    self.confirmationCode = @"";
  }
  return self;
}
static BUserInvite* defaultBUserInviteInstance = nil;
+ (void) initialize {
  if (self == [BUserInvite class]) {
    defaultBUserInviteInstance = [[BUserInvite alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBUserInviteInstance;
}
- (instancetype) defaultInstance {
  return defaultBUserInviteInstance;
}
- (NSArray *)profiles {
  return profilesArray;
}
- (BUserProfile*)profilesAtIndex:(NSUInteger)index {
  return [profilesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasContactInfo) {
    if (!self.contactInfo.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitprofiles = YES;
   [self.profiles enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitprofiles = NO;
      *stop = YES;
    }
  }];
  if (!isInitprofiles) return isInitprofiles;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserID) {
    [output writeString:1 value:self.userID];
  }
  if (self.hasFriendID) {
    [output writeString:2 value:self.friendID];
  }
  if (self.hasMessage) {
    [output writeString:3 value:self.message];
  }
  if (self.hasContactInfo) {
    [output writeMessage:4 value:self.contactInfo];
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  if (self.hasConfirmationCode) {
    [output writeString:6 value:self.confirmationCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserID) {
    size_ += computeStringSize(1, self.userID);
  }
  if (self.hasFriendID) {
    size_ += computeStringSize(2, self.friendID);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(3, self.message);
  }
  if (self.hasContactInfo) {
    size_ += computeMessageSize(4, self.contactInfo);
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  if (self.hasConfirmationCode) {
    size_ += computeStringSize(6, self.confirmationCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BUserInvite*) parseFromData:(NSData*) data {
  return (BUserInvite*)[[[BUserInvite builder] mergeFromData:data] build];
}
+ (BUserInvite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserInvite*)[[[BUserInvite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BUserInvite*) parseFromInputStream:(NSInputStream*) input {
  return (BUserInvite*)[[[BUserInvite builder] mergeFromInputStream:input] build];
}
+ (BUserInvite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserInvite*)[[[BUserInvite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserInvite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BUserInvite*)[[[BUserInvite builder] mergeFromCodedInputStream:input] build];
}
+ (BUserInvite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserInvite*)[[[BUserInvite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserInviteBuilder*) builder {
  return [[BUserInviteBuilder alloc] init];
}
+ (BUserInviteBuilder*) builderWithPrototype:(BUserInvite*) prototype {
  return [[BUserInvite builder] mergeFrom:prototype];
}
- (BUserInviteBuilder*) builder {
  return [BUserInvite builder];
}
- (BUserInviteBuilder*) toBuilder {
  return [BUserInvite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userID", self.userID];
  }
  if (self.hasFriendID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"friendID", self.friendID];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasContactInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"contactInfo"];
    [self.contactInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"profiles"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasConfirmationCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"confirmationCode", self.confirmationCode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserID) {
    [dictionary setObject: self.userID forKey: @"userID"];
  }
  if (self.hasFriendID) {
    [dictionary setObject: self.friendID forKey: @"friendID"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  if (self.hasContactInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.contactInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"contactInfo"];
  }
  for (BUserProfile* element in self.profilesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"profiles"];
  }
  if (self.hasConfirmationCode) {
    [dictionary setObject: self.confirmationCode forKey: @"confirmationCode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BUserInvite class]]) {
    return NO;
  }
  BUserInvite *otherMessage = other;
  return
      self.hasUserID == otherMessage.hasUserID &&
      (!self.hasUserID || [self.userID isEqual:otherMessage.userID]) &&
      self.hasFriendID == otherMessage.hasFriendID &&
      (!self.hasFriendID || [self.friendID isEqual:otherMessage.friendID]) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasContactInfo == otherMessage.hasContactInfo &&
      (!self.hasContactInfo || [self.contactInfo isEqual:otherMessage.contactInfo]) &&
      [self.profilesArray isEqualToArray:otherMessage.profilesArray] &&
      self.hasConfirmationCode == otherMessage.hasConfirmationCode &&
      (!self.hasConfirmationCode || [self.confirmationCode isEqual:otherMessage.confirmationCode]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserID) {
    hashCode = hashCode * 31 + [self.userID hash];
  }
  if (self.hasFriendID) {
    hashCode = hashCode * 31 + [self.friendID hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasContactInfo) {
    hashCode = hashCode * 31 + [self.contactInfo hash];
  }
  [self.profilesArray enumerateObjectsUsingBlock:^(BUserProfile *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasConfirmationCode) {
    hashCode = hashCode * 31 + [self.confirmationCode hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BUserInviteBuilder()
@property (strong) BUserInvite* resultUserInvite;
@end

@implementation BUserInviteBuilder
@synthesize resultUserInvite;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserInvite = [[BUserInvite alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserInvite;
}
- (BUserInviteBuilder*) clear {
  self.resultUserInvite = [[BUserInvite alloc] init];
  return self;
}
- (BUserInviteBuilder*) clone {
  return [BUserInvite builderWithPrototype:resultUserInvite];
}
- (BUserInvite*) defaultInstance {
  return [BUserInvite defaultInstance];
}
- (BUserInvite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BUserInvite*) buildPartial {
  BUserInvite* returnMe = resultUserInvite;
  self.resultUserInvite = nil;
  return returnMe;
}
- (BUserInviteBuilder*) mergeFrom:(BUserInvite*) other {
  if (other == [BUserInvite defaultInstance]) {
    return self;
  }
  if (other.hasUserID) {
    [self setUserID:other.userID];
  }
  if (other.hasFriendID) {
    [self setFriendID:other.friendID];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.hasContactInfo) {
    [self mergeContactInfo:other.contactInfo];
  }
  if (other.profilesArray.count > 0) {
    if (resultUserInvite.profilesArray == nil) {
      resultUserInvite.profilesArray = [[NSMutableArray alloc] initWithArray:other.profilesArray];
    } else {
      [resultUserInvite.profilesArray addObjectsFromArray:other.profilesArray];
    }
  }
  if (other.hasConfirmationCode) {
    [self setConfirmationCode:other.confirmationCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BUserInviteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BUserInviteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserID:[input readString]];
        break;
      }
      case 18: {
        [self setFriendID:[input readString]];
        break;
      }
      case 26: {
        [self setMessage:[input readString]];
        break;
      }
      case 34: {
        BContactInfoBuilder* subBuilder = [BContactInfo builder];
        if (self.hasContactInfo) {
          [subBuilder mergeFrom:self.contactInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setContactInfo:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        BUserProfileBuilder* subBuilder = [BUserProfile builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProfiles:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self setConfirmationCode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserID {
  return resultUserInvite.hasUserID;
}
- (NSString*) userID {
  return resultUserInvite.userID;
}
- (BUserInviteBuilder*) setUserID:(NSString*) value {
  resultUserInvite.hasUserID = YES;
  resultUserInvite.userID = value;
  return self;
}
- (BUserInviteBuilder*) clearUserID {
  resultUserInvite.hasUserID = NO;
  resultUserInvite.userID = @"";
  return self;
}
- (BOOL) hasFriendID {
  return resultUserInvite.hasFriendID;
}
- (NSString*) friendID {
  return resultUserInvite.friendID;
}
- (BUserInviteBuilder*) setFriendID:(NSString*) value {
  resultUserInvite.hasFriendID = YES;
  resultUserInvite.friendID = value;
  return self;
}
- (BUserInviteBuilder*) clearFriendID {
  resultUserInvite.hasFriendID = NO;
  resultUserInvite.friendID = @"";
  return self;
}
- (BOOL) hasMessage {
  return resultUserInvite.hasMessage;
}
- (NSString*) message {
  return resultUserInvite.message;
}
- (BUserInviteBuilder*) setMessage:(NSString*) value {
  resultUserInvite.hasMessage = YES;
  resultUserInvite.message = value;
  return self;
}
- (BUserInviteBuilder*) clearMessage {
  resultUserInvite.hasMessage = NO;
  resultUserInvite.message = @"";
  return self;
}
- (BOOL) hasContactInfo {
  return resultUserInvite.hasContactInfo;
}
- (BContactInfo*) contactInfo {
  return resultUserInvite.contactInfo;
}
- (BUserInviteBuilder*) setContactInfo:(BContactInfo*) value {
  resultUserInvite.hasContactInfo = YES;
  resultUserInvite.contactInfo = value;
  return self;
}
- (BUserInviteBuilder*) setContactInfoBuilder:(BContactInfoBuilder*) builderForValue {
  return [self setContactInfo:[builderForValue build]];
}
- (BUserInviteBuilder*) mergeContactInfo:(BContactInfo*) value {
  if (resultUserInvite.hasContactInfo &&
      resultUserInvite.contactInfo != [BContactInfo defaultInstance]) {
    resultUserInvite.contactInfo =
      [[[BContactInfo builderWithPrototype:resultUserInvite.contactInfo] mergeFrom:value] buildPartial];
  } else {
    resultUserInvite.contactInfo = value;
  }
  resultUserInvite.hasContactInfo = YES;
  return self;
}
- (BUserInviteBuilder*) clearContactInfo {
  resultUserInvite.hasContactInfo = NO;
  resultUserInvite.contactInfo = [BContactInfo defaultInstance];
  return self;
}
- (NSMutableArray *)profiles {
  return resultUserInvite.profilesArray;
}
- (BUserProfile*)profilesAtIndex:(NSUInteger)index {
  return [resultUserInvite profilesAtIndex:index];
}
- (BUserInviteBuilder *)addProfiles:(BUserProfile*)value {
  if (resultUserInvite.profilesArray == nil) {
    resultUserInvite.profilesArray = [[NSMutableArray alloc]init];
  }
  [resultUserInvite.profilesArray addObject:value];
  return self;
}
- (BUserInviteBuilder *)setProfilesArray:(NSArray *)array {
  resultUserInvite.profilesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BUserInviteBuilder *)clearProfiles {
  resultUserInvite.profilesArray = nil;
  return self;
}
- (BOOL) hasConfirmationCode {
  return resultUserInvite.hasConfirmationCode;
}
- (NSString*) confirmationCode {
  return resultUserInvite.confirmationCode;
}
- (BUserInviteBuilder*) setConfirmationCode:(NSString*) value {
  resultUserInvite.hasConfirmationCode = YES;
  resultUserInvite.confirmationCode = value;
  return self;
}
- (BUserInviteBuilder*) clearConfirmationCode {
  resultUserInvite.hasConfirmationCode = NO;
  resultUserInvite.confirmationCode = @"";
  return self;
}
@end

@interface BEditProfile ()
@property (strong) NSString* profileID;
@property (strong) BUserProfile* profile;
@property (strong) BUserProfile* editProfile;
@property BOOL discardEdit;
@end

@implementation BEditProfile

- (BOOL) hasProfileID {
  return !!hasProfileID_;
}
- (void) setHasProfileID:(BOOL) _value_ {
  hasProfileID_ = !!_value_;
}
@synthesize profileID;
- (BOOL) hasProfile {
  return !!hasProfile_;
}
- (void) setHasProfile:(BOOL) _value_ {
  hasProfile_ = !!_value_;
}
@synthesize profile;
- (BOOL) hasEditProfile {
  return !!hasEditProfile_;
}
- (void) setHasEditProfile:(BOOL) _value_ {
  hasEditProfile_ = !!_value_;
}
@synthesize editProfile;
- (BOOL) hasDiscardEdit {
  return !!hasDiscardEdit_;
}
- (void) setHasDiscardEdit:(BOOL) _value_ {
  hasDiscardEdit_ = !!_value_;
}
- (BOOL) discardEdit {
  return !!discardEdit_;
}
- (void) setDiscardEdit:(BOOL) _value_ {
  discardEdit_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.profileID = @"";
    self.profile = [BUserProfile defaultInstance];
    self.editProfile = [BUserProfile defaultInstance];
    self.discardEdit = NO;
  }
  return self;
}
static BEditProfile* defaultBEditProfileInstance = nil;
+ (void) initialize {
  if (self == [BEditProfile class]) {
    defaultBEditProfileInstance = [[BEditProfile alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBEditProfileInstance;
}
- (instancetype) defaultInstance {
  return defaultBEditProfileInstance;
}
- (BOOL) isInitialized {
  if (self.hasProfile) {
    if (!self.profile.isInitialized) {
      return NO;
    }
  }
  if (self.hasEditProfile) {
    if (!self.editProfile.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProfileID) {
    [output writeString:1 value:self.profileID];
  }
  if (self.hasProfile) {
    [output writeMessage:2 value:self.profile];
  }
  if (self.hasEditProfile) {
    [output writeMessage:3 value:self.editProfile];
  }
  if (self.hasDiscardEdit) {
    [output writeBool:4 value:self.discardEdit];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProfileID) {
    size_ += computeStringSize(1, self.profileID);
  }
  if (self.hasProfile) {
    size_ += computeMessageSize(2, self.profile);
  }
  if (self.hasEditProfile) {
    size_ += computeMessageSize(3, self.editProfile);
  }
  if (self.hasDiscardEdit) {
    size_ += computeBoolSize(4, self.discardEdit);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BEditProfile*) parseFromData:(NSData*) data {
  return (BEditProfile*)[[[BEditProfile builder] mergeFromData:data] build];
}
+ (BEditProfile*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BEditProfile*)[[[BEditProfile builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BEditProfile*) parseFromInputStream:(NSInputStream*) input {
  return (BEditProfile*)[[[BEditProfile builder] mergeFromInputStream:input] build];
}
+ (BEditProfile*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BEditProfile*)[[[BEditProfile builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BEditProfile*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BEditProfile*)[[[BEditProfile builder] mergeFromCodedInputStream:input] build];
}
+ (BEditProfile*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BEditProfile*)[[[BEditProfile builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BEditProfileBuilder*) builder {
  return [[BEditProfileBuilder alloc] init];
}
+ (BEditProfileBuilder*) builderWithPrototype:(BEditProfile*) prototype {
  return [[BEditProfile builder] mergeFrom:prototype];
}
- (BEditProfileBuilder*) builder {
  return [BEditProfile builder];
}
- (BEditProfileBuilder*) toBuilder {
  return [BEditProfile builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProfileID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"profileID", self.profileID];
  }
  if (self.hasProfile) {
    [output appendFormat:@"%@%@ {\n", indent, @"profile"];
    [self.profile writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasEditProfile) {
    [output appendFormat:@"%@%@ {\n", indent, @"editProfile"];
    [self.editProfile writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDiscardEdit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"discardEdit", [NSNumber numberWithBool:self.discardEdit]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasProfileID) {
    [dictionary setObject: self.profileID forKey: @"profileID"];
  }
  if (self.hasProfile) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.profile storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"profile"];
  }
  if (self.hasEditProfile) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.editProfile storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"editProfile"];
  }
  if (self.hasDiscardEdit) {
    [dictionary setObject: [NSNumber numberWithBool:self.discardEdit] forKey: @"discardEdit"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BEditProfile class]]) {
    return NO;
  }
  BEditProfile *otherMessage = other;
  return
      self.hasProfileID == otherMessage.hasProfileID &&
      (!self.hasProfileID || [self.profileID isEqual:otherMessage.profileID]) &&
      self.hasProfile == otherMessage.hasProfile &&
      (!self.hasProfile || [self.profile isEqual:otherMessage.profile]) &&
      self.hasEditProfile == otherMessage.hasEditProfile &&
      (!self.hasEditProfile || [self.editProfile isEqual:otherMessage.editProfile]) &&
      self.hasDiscardEdit == otherMessage.hasDiscardEdit &&
      (!self.hasDiscardEdit || self.discardEdit == otherMessage.discardEdit) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasProfileID) {
    hashCode = hashCode * 31 + [self.profileID hash];
  }
  if (self.hasProfile) {
    hashCode = hashCode * 31 + [self.profile hash];
  }
  if (self.hasEditProfile) {
    hashCode = hashCode * 31 + [self.editProfile hash];
  }
  if (self.hasDiscardEdit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.discardEdit] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BEditProfileBuilder()
@property (strong) BEditProfile* resultEditProfile;
@end

@implementation BEditProfileBuilder
@synthesize resultEditProfile;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultEditProfile = [[BEditProfile alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultEditProfile;
}
- (BEditProfileBuilder*) clear {
  self.resultEditProfile = [[BEditProfile alloc] init];
  return self;
}
- (BEditProfileBuilder*) clone {
  return [BEditProfile builderWithPrototype:resultEditProfile];
}
- (BEditProfile*) defaultInstance {
  return [BEditProfile defaultInstance];
}
- (BEditProfile*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BEditProfile*) buildPartial {
  BEditProfile* returnMe = resultEditProfile;
  self.resultEditProfile = nil;
  return returnMe;
}
- (BEditProfileBuilder*) mergeFrom:(BEditProfile*) other {
  if (other == [BEditProfile defaultInstance]) {
    return self;
  }
  if (other.hasProfileID) {
    [self setProfileID:other.profileID];
  }
  if (other.hasProfile) {
    [self mergeProfile:other.profile];
  }
  if (other.hasEditProfile) {
    [self mergeEditProfile:other.editProfile];
  }
  if (other.hasDiscardEdit) {
    [self setDiscardEdit:other.discardEdit];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BEditProfileBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BEditProfileBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setProfileID:[input readString]];
        break;
      }
      case 18: {
        BUserProfileBuilder* subBuilder = [BUserProfile builder];
        if (self.hasProfile) {
          [subBuilder mergeFrom:self.profile];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setProfile:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        BUserProfileBuilder* subBuilder = [BUserProfile builder];
        if (self.hasEditProfile) {
          [subBuilder mergeFrom:self.editProfile];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setEditProfile:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setDiscardEdit:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasProfileID {
  return resultEditProfile.hasProfileID;
}
- (NSString*) profileID {
  return resultEditProfile.profileID;
}
- (BEditProfileBuilder*) setProfileID:(NSString*) value {
  resultEditProfile.hasProfileID = YES;
  resultEditProfile.profileID = value;
  return self;
}
- (BEditProfileBuilder*) clearProfileID {
  resultEditProfile.hasProfileID = NO;
  resultEditProfile.profileID = @"";
  return self;
}
- (BOOL) hasProfile {
  return resultEditProfile.hasProfile;
}
- (BUserProfile*) profile {
  return resultEditProfile.profile;
}
- (BEditProfileBuilder*) setProfile:(BUserProfile*) value {
  resultEditProfile.hasProfile = YES;
  resultEditProfile.profile = value;
  return self;
}
- (BEditProfileBuilder*) setProfileBuilder:(BUserProfileBuilder*) builderForValue {
  return [self setProfile:[builderForValue build]];
}
- (BEditProfileBuilder*) mergeProfile:(BUserProfile*) value {
  if (resultEditProfile.hasProfile &&
      resultEditProfile.profile != [BUserProfile defaultInstance]) {
    resultEditProfile.profile =
      [[[BUserProfile builderWithPrototype:resultEditProfile.profile] mergeFrom:value] buildPartial];
  } else {
    resultEditProfile.profile = value;
  }
  resultEditProfile.hasProfile = YES;
  return self;
}
- (BEditProfileBuilder*) clearProfile {
  resultEditProfile.hasProfile = NO;
  resultEditProfile.profile = [BUserProfile defaultInstance];
  return self;
}
- (BOOL) hasEditProfile {
  return resultEditProfile.hasEditProfile;
}
- (BUserProfile*) editProfile {
  return resultEditProfile.editProfile;
}
- (BEditProfileBuilder*) setEditProfile:(BUserProfile*) value {
  resultEditProfile.hasEditProfile = YES;
  resultEditProfile.editProfile = value;
  return self;
}
- (BEditProfileBuilder*) setEditProfileBuilder:(BUserProfileBuilder*) builderForValue {
  return [self setEditProfile:[builderForValue build]];
}
- (BEditProfileBuilder*) mergeEditProfile:(BUserProfile*) value {
  if (resultEditProfile.hasEditProfile &&
      resultEditProfile.editProfile != [BUserProfile defaultInstance]) {
    resultEditProfile.editProfile =
      [[[BUserProfile builderWithPrototype:resultEditProfile.editProfile] mergeFrom:value] buildPartial];
  } else {
    resultEditProfile.editProfile = value;
  }
  resultEditProfile.hasEditProfile = YES;
  return self;
}
- (BEditProfileBuilder*) clearEditProfile {
  resultEditProfile.hasEditProfile = NO;
  resultEditProfile.editProfile = [BUserProfile defaultInstance];
  return self;
}
- (BOOL) hasDiscardEdit {
  return resultEditProfile.hasDiscardEdit;
}
- (BOOL) discardEdit {
  return resultEditProfile.discardEdit;
}
- (BEditProfileBuilder*) setDiscardEdit:(BOOL) value {
  resultEditProfile.hasDiscardEdit = YES;
  resultEditProfile.discardEdit = value;
  return self;
}
- (BEditProfileBuilder*) clearDiscardEdit {
  resultEditProfile.hasDiscardEdit = NO;
  resultEditProfile.discardEdit = NO;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
