// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Server.pb.h"
// @@protoc_insertion_point(imports)

@implementation BServerRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BServerRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    [BTypesRoot registerAllExtensions:registry];
    [BDeviceRoot registerAllExtensions:registry];
    [BEntityTagsRoot registerAllExtensions:registry];
    [BFeedRoot registerAllExtensions:registry];
    [BFriendsRoot registerAllExtensions:registry];
    [BPaymentsRoot registerAllExtensions:registry];
    [BSearchRoot registerAllExtensions:registry];
    [BUserEventsRoot registerAllExtensions:registry];
    [BUserMessagesRoot registerAllExtensions:registry];
    [BUserProfilesRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL BResponseCodeIsValidValue(BResponseCode value) {
  switch (value) {
    case BResponseCodeRCSuccess:
    case BResponseCodeRCInputCorrupt:
    case BResponseCodeRCInputInvalid:
    case BResponseCodeRCServerWarning:
    case BResponseCodeRCServerError:
    case BResponseCodeRCNotAuthorized:
    case BResponseCodeRCClientTooOld:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBResponseCode(BResponseCode value) {
  switch (value) {
    case BResponseCodeRCSuccess:
      return @"BResponseCodeRCSuccess";
    case BResponseCodeRCInputCorrupt:
      return @"BResponseCodeRCInputCorrupt";
    case BResponseCodeRCInputInvalid:
      return @"BResponseCodeRCInputInvalid";
    case BResponseCodeRCServerWarning:
      return @"BResponseCodeRCServerWarning";
    case BResponseCodeRCServerError:
      return @"BResponseCodeRCServerError";
    case BResponseCodeRCNotAuthorized:
      return @"BResponseCodeRCNotAuthorized";
    case BResponseCodeRCClientTooOld:
      return @"BResponseCodeRCClientTooOld";
    default:
      return nil;
  }
}

@interface BDebugMessage ()
@property (strong) NSMutableArray * debugTextArray;
@end

@implementation BDebugMessage

@synthesize debugTextArray;
@dynamic debugText;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BDebugMessage* defaultBDebugMessageInstance = nil;
+ (void) initialize {
  if (self == [BDebugMessage class]) {
    defaultBDebugMessageInstance = [[BDebugMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBDebugMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultBDebugMessageInstance;
}
- (NSArray *)debugText {
  return debugTextArray;
}
- (NSString*)debugTextAtIndex:(NSUInteger)index {
  return [debugTextArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.debugTextArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.debugTextArray.count;
    [self.debugTextArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BDebugMessage*) parseFromData:(NSData*) data {
  return (BDebugMessage*)[[[BDebugMessage builder] mergeFromData:data] build];
}
+ (BDebugMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BDebugMessage*)[[[BDebugMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BDebugMessage*) parseFromInputStream:(NSInputStream*) input {
  return (BDebugMessage*)[[[BDebugMessage builder] mergeFromInputStream:input] build];
}
+ (BDebugMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BDebugMessage*)[[[BDebugMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BDebugMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BDebugMessage*)[[[BDebugMessage builder] mergeFromCodedInputStream:input] build];
}
+ (BDebugMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BDebugMessage*)[[[BDebugMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BDebugMessageBuilder*) builder {
  return [[BDebugMessageBuilder alloc] init];
}
+ (BDebugMessageBuilder*) builderWithPrototype:(BDebugMessage*) prototype {
  return [[BDebugMessage builder] mergeFrom:prototype];
}
- (BDebugMessageBuilder*) builder {
  return [BDebugMessage builder];
}
- (BDebugMessageBuilder*) toBuilder {
  return [BDebugMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.debugTextArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"debugText", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [dictionary setObject:self.debugText forKey: @"debugText"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BDebugMessage class]]) {
    return NO;
  }
  BDebugMessage *otherMessage = other;
  return
      [self.debugTextArray isEqualToArray:otherMessage.debugTextArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.debugTextArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BDebugMessageBuilder()
@property (strong) BDebugMessage* resultDebugMessage;
@end

@implementation BDebugMessageBuilder
@synthesize resultDebugMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDebugMessage = [[BDebugMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDebugMessage;
}
- (BDebugMessageBuilder*) clear {
  self.resultDebugMessage = [[BDebugMessage alloc] init];
  return self;
}
- (BDebugMessageBuilder*) clone {
  return [BDebugMessage builderWithPrototype:resultDebugMessage];
}
- (BDebugMessage*) defaultInstance {
  return [BDebugMessage defaultInstance];
}
- (BDebugMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BDebugMessage*) buildPartial {
  BDebugMessage* returnMe = resultDebugMessage;
  self.resultDebugMessage = nil;
  return returnMe;
}
- (BDebugMessageBuilder*) mergeFrom:(BDebugMessage*) other {
  if (other == [BDebugMessage defaultInstance]) {
    return self;
  }
  if (other.debugTextArray.count > 0) {
    if (resultDebugMessage.debugTextArray == nil) {
      resultDebugMessage.debugTextArray = [[NSMutableArray alloc] initWithArray:other.debugTextArray];
    } else {
      [resultDebugMessage.debugTextArray addObjectsFromArray:other.debugTextArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BDebugMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BDebugMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addDebugText:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray *)debugText {
  return resultDebugMessage.debugTextArray;
}
- (NSString*)debugTextAtIndex:(NSUInteger)index {
  return [resultDebugMessage debugTextAtIndex:index];
}
- (BDebugMessageBuilder *)addDebugText:(NSString*)value {
  if (resultDebugMessage.debugTextArray == nil) {
    resultDebugMessage.debugTextArray = [[NSMutableArray alloc]init];
  }
  [resultDebugMessage.debugTextArray addObject:value];
  return self;
}
- (BDebugMessageBuilder *)setDebugTextArray:(NSArray *)array {
  resultDebugMessage.debugTextArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (BDebugMessageBuilder *)clearDebugText {
  resultDebugMessage.debugTextArray = nil;
  return self;
}
@end

@interface BSessionRequest ()
@property (strong) BLocation* location;
@property (strong) BDeviceInfo* deviceInfo;
@property (strong) BUserProfile* profile;
@property (strong) BTimestamp* lastAppDataResetDate;
@end

@implementation BSessionRequest

- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (BOOL) hasDeviceInfo {
  return !!hasDeviceInfo_;
}
- (void) setHasDeviceInfo:(BOOL) _value_ {
  hasDeviceInfo_ = !!_value_;
}
@synthesize deviceInfo;
- (BOOL) hasProfile {
  return !!hasProfile_;
}
- (void) setHasProfile:(BOOL) _value_ {
  hasProfile_ = !!_value_;
}
@synthesize profile;
- (BOOL) hasLastAppDataResetDate {
  return !!hasLastAppDataResetDate_;
}
- (void) setHasLastAppDataResetDate:(BOOL) _value_ {
  hasLastAppDataResetDate_ = !!_value_;
}
@synthesize lastAppDataResetDate;
- (instancetype) init {
  if ((self = [super init])) {
    self.location = [BLocation defaultInstance];
    self.deviceInfo = [BDeviceInfo defaultInstance];
    self.profile = [BUserProfile defaultInstance];
    self.lastAppDataResetDate = [BTimestamp defaultInstance];
  }
  return self;
}
static BSessionRequest* defaultBSessionRequestInstance = nil;
+ (void) initialize {
  if (self == [BSessionRequest class]) {
    defaultBSessionRequestInstance = [[BSessionRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBSessionRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBSessionRequestInstance;
}
- (BOOL) isInitialized {
  if (self.hasProfile) {
    if (!self.profile.isInitialized) {
      return NO;
    }
  }
  if (self.hasLastAppDataResetDate) {
    if (!self.lastAppDataResetDate.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLocation) {
    [output writeMessage:1 value:self.location];
  }
  if (self.hasDeviceInfo) {
    [output writeMessage:2 value:self.deviceInfo];
  }
  if (self.hasProfile) {
    [output writeMessage:3 value:self.profile];
  }
  if (self.hasLastAppDataResetDate) {
    [output writeMessage:4 value:self.lastAppDataResetDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLocation) {
    size_ += computeMessageSize(1, self.location);
  }
  if (self.hasDeviceInfo) {
    size_ += computeMessageSize(2, self.deviceInfo);
  }
  if (self.hasProfile) {
    size_ += computeMessageSize(3, self.profile);
  }
  if (self.hasLastAppDataResetDate) {
    size_ += computeMessageSize(4, self.lastAppDataResetDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BSessionRequest*) parseFromData:(NSData*) data {
  return (BSessionRequest*)[[[BSessionRequest builder] mergeFromData:data] build];
}
+ (BSessionRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSessionRequest*)[[[BSessionRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BSessionRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BSessionRequest*)[[[BSessionRequest builder] mergeFromInputStream:input] build];
}
+ (BSessionRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSessionRequest*)[[[BSessionRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BSessionRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BSessionRequest*)[[[BSessionRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BSessionRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSessionRequest*)[[[BSessionRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BSessionRequestBuilder*) builder {
  return [[BSessionRequestBuilder alloc] init];
}
+ (BSessionRequestBuilder*) builderWithPrototype:(BSessionRequest*) prototype {
  return [[BSessionRequest builder] mergeFrom:prototype];
}
- (BSessionRequestBuilder*) builder {
  return [BSessionRequest builder];
}
- (BSessionRequestBuilder*) toBuilder {
  return [BSessionRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDeviceInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"deviceInfo"];
    [self.deviceInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasProfile) {
    [output appendFormat:@"%@%@ {\n", indent, @"profile"];
    [self.profile writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLastAppDataResetDate) {
    [output appendFormat:@"%@%@ {\n", indent, @"lastAppDataResetDate"];
    [self.lastAppDataResetDate writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLocation) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.location storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"location"];
  }
  if (self.hasDeviceInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.deviceInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"deviceInfo"];
  }
  if (self.hasProfile) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.profile storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"profile"];
  }
  if (self.hasLastAppDataResetDate) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.lastAppDataResetDate storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"lastAppDataResetDate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BSessionRequest class]]) {
    return NO;
  }
  BSessionRequest *otherMessage = other;
  return
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasDeviceInfo == otherMessage.hasDeviceInfo &&
      (!self.hasDeviceInfo || [self.deviceInfo isEqual:otherMessage.deviceInfo]) &&
      self.hasProfile == otherMessage.hasProfile &&
      (!self.hasProfile || [self.profile isEqual:otherMessage.profile]) &&
      self.hasLastAppDataResetDate == otherMessage.hasLastAppDataResetDate &&
      (!self.hasLastAppDataResetDate || [self.lastAppDataResetDate isEqual:otherMessage.lastAppDataResetDate]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasDeviceInfo) {
    hashCode = hashCode * 31 + [self.deviceInfo hash];
  }
  if (self.hasProfile) {
    hashCode = hashCode * 31 + [self.profile hash];
  }
  if (self.hasLastAppDataResetDate) {
    hashCode = hashCode * 31 + [self.lastAppDataResetDate hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BSessionRequestBuilder()
@property (strong) BSessionRequest* resultSessionRequest;
@end

@implementation BSessionRequestBuilder
@synthesize resultSessionRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSessionRequest = [[BSessionRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSessionRequest;
}
- (BSessionRequestBuilder*) clear {
  self.resultSessionRequest = [[BSessionRequest alloc] init];
  return self;
}
- (BSessionRequestBuilder*) clone {
  return [BSessionRequest builderWithPrototype:resultSessionRequest];
}
- (BSessionRequest*) defaultInstance {
  return [BSessionRequest defaultInstance];
}
- (BSessionRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BSessionRequest*) buildPartial {
  BSessionRequest* returnMe = resultSessionRequest;
  self.resultSessionRequest = nil;
  return returnMe;
}
- (BSessionRequestBuilder*) mergeFrom:(BSessionRequest*) other {
  if (other == [BSessionRequest defaultInstance]) {
    return self;
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  if (other.hasDeviceInfo) {
    [self mergeDeviceInfo:other.deviceInfo];
  }
  if (other.hasProfile) {
    [self mergeProfile:other.profile];
  }
  if (other.hasLastAppDataResetDate) {
    [self mergeLastAppDataResetDate:other.lastAppDataResetDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BSessionRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BSessionRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BLocationBuilder* subBuilder = [BLocation builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        BDeviceInfoBuilder* subBuilder = [BDeviceInfo builder];
        if (self.hasDeviceInfo) {
          [subBuilder mergeFrom:self.deviceInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDeviceInfo:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        BUserProfileBuilder* subBuilder = [BUserProfile builder];
        if (self.hasProfile) {
          [subBuilder mergeFrom:self.profile];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setProfile:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        BTimestampBuilder* subBuilder = [BTimestamp builder];
        if (self.hasLastAppDataResetDate) {
          [subBuilder mergeFrom:self.lastAppDataResetDate];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLastAppDataResetDate:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasLocation {
  return resultSessionRequest.hasLocation;
}
- (BLocation*) location {
  return resultSessionRequest.location;
}
- (BSessionRequestBuilder*) setLocation:(BLocation*) value {
  resultSessionRequest.hasLocation = YES;
  resultSessionRequest.location = value;
  return self;
}
- (BSessionRequestBuilder*) setLocationBuilder:(BLocationBuilder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (BSessionRequestBuilder*) mergeLocation:(BLocation*) value {
  if (resultSessionRequest.hasLocation &&
      resultSessionRequest.location != [BLocation defaultInstance]) {
    resultSessionRequest.location =
      [[[BLocation builderWithPrototype:resultSessionRequest.location] mergeFrom:value] buildPartial];
  } else {
    resultSessionRequest.location = value;
  }
  resultSessionRequest.hasLocation = YES;
  return self;
}
- (BSessionRequestBuilder*) clearLocation {
  resultSessionRequest.hasLocation = NO;
  resultSessionRequest.location = [BLocation defaultInstance];
  return self;
}
- (BOOL) hasDeviceInfo {
  return resultSessionRequest.hasDeviceInfo;
}
- (BDeviceInfo*) deviceInfo {
  return resultSessionRequest.deviceInfo;
}
- (BSessionRequestBuilder*) setDeviceInfo:(BDeviceInfo*) value {
  resultSessionRequest.hasDeviceInfo = YES;
  resultSessionRequest.deviceInfo = value;
  return self;
}
- (BSessionRequestBuilder*) setDeviceInfoBuilder:(BDeviceInfoBuilder*) builderForValue {
  return [self setDeviceInfo:[builderForValue build]];
}
- (BSessionRequestBuilder*) mergeDeviceInfo:(BDeviceInfo*) value {
  if (resultSessionRequest.hasDeviceInfo &&
      resultSessionRequest.deviceInfo != [BDeviceInfo defaultInstance]) {
    resultSessionRequest.deviceInfo =
      [[[BDeviceInfo builderWithPrototype:resultSessionRequest.deviceInfo] mergeFrom:value] buildPartial];
  } else {
    resultSessionRequest.deviceInfo = value;
  }
  resultSessionRequest.hasDeviceInfo = YES;
  return self;
}
- (BSessionRequestBuilder*) clearDeviceInfo {
  resultSessionRequest.hasDeviceInfo = NO;
  resultSessionRequest.deviceInfo = [BDeviceInfo defaultInstance];
  return self;
}
- (BOOL) hasProfile {
  return resultSessionRequest.hasProfile;
}
- (BUserProfile*) profile {
  return resultSessionRequest.profile;
}
- (BSessionRequestBuilder*) setProfile:(BUserProfile*) value {
  resultSessionRequest.hasProfile = YES;
  resultSessionRequest.profile = value;
  return self;
}
- (BSessionRequestBuilder*) setProfileBuilder:(BUserProfileBuilder*) builderForValue {
  return [self setProfile:[builderForValue build]];
}
- (BSessionRequestBuilder*) mergeProfile:(BUserProfile*) value {
  if (resultSessionRequest.hasProfile &&
      resultSessionRequest.profile != [BUserProfile defaultInstance]) {
    resultSessionRequest.profile =
      [[[BUserProfile builderWithPrototype:resultSessionRequest.profile] mergeFrom:value] buildPartial];
  } else {
    resultSessionRequest.profile = value;
  }
  resultSessionRequest.hasProfile = YES;
  return self;
}
- (BSessionRequestBuilder*) clearProfile {
  resultSessionRequest.hasProfile = NO;
  resultSessionRequest.profile = [BUserProfile defaultInstance];
  return self;
}
- (BOOL) hasLastAppDataResetDate {
  return resultSessionRequest.hasLastAppDataResetDate;
}
- (BTimestamp*) lastAppDataResetDate {
  return resultSessionRequest.lastAppDataResetDate;
}
- (BSessionRequestBuilder*) setLastAppDataResetDate:(BTimestamp*) value {
  resultSessionRequest.hasLastAppDataResetDate = YES;
  resultSessionRequest.lastAppDataResetDate = value;
  return self;
}
- (BSessionRequestBuilder*) setLastAppDataResetDateBuilder:(BTimestampBuilder*) builderForValue {
  return [self setLastAppDataResetDate:[builderForValue build]];
}
- (BSessionRequestBuilder*) mergeLastAppDataResetDate:(BTimestamp*) value {
  if (resultSessionRequest.hasLastAppDataResetDate &&
      resultSessionRequest.lastAppDataResetDate != [BTimestamp defaultInstance]) {
    resultSessionRequest.lastAppDataResetDate =
      [[[BTimestamp builderWithPrototype:resultSessionRequest.lastAppDataResetDate] mergeFrom:value] buildPartial];
  } else {
    resultSessionRequest.lastAppDataResetDate = value;
  }
  resultSessionRequest.hasLastAppDataResetDate = YES;
  return self;
}
- (BSessionRequestBuilder*) clearLastAppDataResetDate {
  resultSessionRequest.hasLastAppDataResetDate = NO;
  resultSessionRequest.lastAppDataResetDate = [BTimestamp defaultInstance];
  return self;
}
@end

@interface BBlitzHereAppOptions ()
@end

@implementation BBlitzHereAppOptions

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BBlitzHereAppOptions* defaultBBlitzHereAppOptionsInstance = nil;
+ (void) initialize {
  if (self == [BBlitzHereAppOptions class]) {
    defaultBBlitzHereAppOptionsInstance = [[BBlitzHereAppOptions alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBBlitzHereAppOptionsInstance;
}
- (instancetype) defaultInstance {
  return defaultBBlitzHereAppOptionsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BBlitzHereAppOptions*) parseFromData:(NSData*) data {
  return (BBlitzHereAppOptions*)[[[BBlitzHereAppOptions builder] mergeFromData:data] build];
}
+ (BBlitzHereAppOptions*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BBlitzHereAppOptions*)[[[BBlitzHereAppOptions builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BBlitzHereAppOptions*) parseFromInputStream:(NSInputStream*) input {
  return (BBlitzHereAppOptions*)[[[BBlitzHereAppOptions builder] mergeFromInputStream:input] build];
}
+ (BBlitzHereAppOptions*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BBlitzHereAppOptions*)[[[BBlitzHereAppOptions builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BBlitzHereAppOptions*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BBlitzHereAppOptions*)[[[BBlitzHereAppOptions builder] mergeFromCodedInputStream:input] build];
}
+ (BBlitzHereAppOptions*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BBlitzHereAppOptions*)[[[BBlitzHereAppOptions builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BBlitzHereAppOptionsBuilder*) builder {
  return [[BBlitzHereAppOptionsBuilder alloc] init];
}
+ (BBlitzHereAppOptionsBuilder*) builderWithPrototype:(BBlitzHereAppOptions*) prototype {
  return [[BBlitzHereAppOptions builder] mergeFrom:prototype];
}
- (BBlitzHereAppOptionsBuilder*) builder {
  return [BBlitzHereAppOptions builder];
}
- (BBlitzHereAppOptionsBuilder*) toBuilder {
  return [BBlitzHereAppOptions builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BBlitzHereAppOptions class]]) {
    return NO;
  }
  BBlitzHereAppOptions *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BBlitzHereAppOptionsBuilder()
@property (strong) BBlitzHereAppOptions* resultBlitzHereAppOptions;
@end

@implementation BBlitzHereAppOptionsBuilder
@synthesize resultBlitzHereAppOptions;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBlitzHereAppOptions = [[BBlitzHereAppOptions alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBlitzHereAppOptions;
}
- (BBlitzHereAppOptionsBuilder*) clear {
  self.resultBlitzHereAppOptions = [[BBlitzHereAppOptions alloc] init];
  return self;
}
- (BBlitzHereAppOptionsBuilder*) clone {
  return [BBlitzHereAppOptions builderWithPrototype:resultBlitzHereAppOptions];
}
- (BBlitzHereAppOptions*) defaultInstance {
  return [BBlitzHereAppOptions defaultInstance];
}
- (BBlitzHereAppOptions*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BBlitzHereAppOptions*) buildPartial {
  BBlitzHereAppOptions* returnMe = resultBlitzHereAppOptions;
  self.resultBlitzHereAppOptions = nil;
  return returnMe;
}
- (BBlitzHereAppOptionsBuilder*) mergeFrom:(BBlitzHereAppOptions*) other {
  if (other == [BBlitzHereAppOptions defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BBlitzHereAppOptionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BBlitzHereAppOptionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface BAppOptions ()
@property (strong) BBlitzHereAppOptions* blitzHereOptions;
@end

@implementation BAppOptions

- (BOOL) hasBlitzHereOptions {
  return !!hasBlitzHereOptions_;
}
- (void) setHasBlitzHereOptions:(BOOL) _value_ {
  hasBlitzHereOptions_ = !!_value_;
}
@synthesize blitzHereOptions;
- (instancetype) init {
  if ((self = [super init])) {
    self.blitzHereOptions = [BBlitzHereAppOptions defaultInstance];
  }
  return self;
}
static BAppOptions* defaultBAppOptionsInstance = nil;
+ (void) initialize {
  if (self == [BAppOptions class]) {
    defaultBAppOptionsInstance = [[BAppOptions alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBAppOptionsInstance;
}
- (instancetype) defaultInstance {
  return defaultBAppOptionsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBlitzHereOptions) {
    [output writeMessage:1 value:self.blitzHereOptions];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBlitzHereOptions) {
    size_ += computeMessageSize(1, self.blitzHereOptions);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BAppOptions*) parseFromData:(NSData*) data {
  return (BAppOptions*)[[[BAppOptions builder] mergeFromData:data] build];
}
+ (BAppOptions*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAppOptions*)[[[BAppOptions builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BAppOptions*) parseFromInputStream:(NSInputStream*) input {
  return (BAppOptions*)[[[BAppOptions builder] mergeFromInputStream:input] build];
}
+ (BAppOptions*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAppOptions*)[[[BAppOptions builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAppOptions*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BAppOptions*)[[[BAppOptions builder] mergeFromCodedInputStream:input] build];
}
+ (BAppOptions*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAppOptions*)[[[BAppOptions builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAppOptionsBuilder*) builder {
  return [[BAppOptionsBuilder alloc] init];
}
+ (BAppOptionsBuilder*) builderWithPrototype:(BAppOptions*) prototype {
  return [[BAppOptions builder] mergeFrom:prototype];
}
- (BAppOptionsBuilder*) builder {
  return [BAppOptions builder];
}
- (BAppOptionsBuilder*) toBuilder {
  return [BAppOptions builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBlitzHereOptions) {
    [output appendFormat:@"%@%@ {\n", indent, @"blitzHereOptions"];
    [self.blitzHereOptions writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBlitzHereOptions) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.blitzHereOptions storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"blitzHereOptions"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BAppOptions class]]) {
    return NO;
  }
  BAppOptions *otherMessage = other;
  return
      self.hasBlitzHereOptions == otherMessage.hasBlitzHereOptions &&
      (!self.hasBlitzHereOptions || [self.blitzHereOptions isEqual:otherMessage.blitzHereOptions]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBlitzHereOptions) {
    hashCode = hashCode * 31 + [self.blitzHereOptions hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BAppOptionsBuilder()
@property (strong) BAppOptions* resultAppOptions;
@end

@implementation BAppOptionsBuilder
@synthesize resultAppOptions;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAppOptions = [[BAppOptions alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAppOptions;
}
- (BAppOptionsBuilder*) clear {
  self.resultAppOptions = [[BAppOptions alloc] init];
  return self;
}
- (BAppOptionsBuilder*) clone {
  return [BAppOptions builderWithPrototype:resultAppOptions];
}
- (BAppOptions*) defaultInstance {
  return [BAppOptions defaultInstance];
}
- (BAppOptions*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BAppOptions*) buildPartial {
  BAppOptions* returnMe = resultAppOptions;
  self.resultAppOptions = nil;
  return returnMe;
}
- (BAppOptionsBuilder*) mergeFrom:(BAppOptions*) other {
  if (other == [BAppOptions defaultInstance]) {
    return self;
  }
  if (other.hasBlitzHereOptions) {
    [self mergeBlitzHereOptions:other.blitzHereOptions];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BAppOptionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BAppOptionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BBlitzHereAppOptionsBuilder* subBuilder = [BBlitzHereAppOptions builder];
        if (self.hasBlitzHereOptions) {
          [subBuilder mergeFrom:self.blitzHereOptions];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBlitzHereOptions:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasBlitzHereOptions {
  return resultAppOptions.hasBlitzHereOptions;
}
- (BBlitzHereAppOptions*) blitzHereOptions {
  return resultAppOptions.blitzHereOptions;
}
- (BAppOptionsBuilder*) setBlitzHereOptions:(BBlitzHereAppOptions*) value {
  resultAppOptions.hasBlitzHereOptions = YES;
  resultAppOptions.blitzHereOptions = value;
  return self;
}
- (BAppOptionsBuilder*) setBlitzHereOptionsBuilder:(BBlitzHereAppOptionsBuilder*) builderForValue {
  return [self setBlitzHereOptions:[builderForValue build]];
}
- (BAppOptionsBuilder*) mergeBlitzHereOptions:(BBlitzHereAppOptions*) value {
  if (resultAppOptions.hasBlitzHereOptions &&
      resultAppOptions.blitzHereOptions != [BBlitzHereAppOptions defaultInstance]) {
    resultAppOptions.blitzHereOptions =
      [[[BBlitzHereAppOptions builderWithPrototype:resultAppOptions.blitzHereOptions] mergeFrom:value] buildPartial];
  } else {
    resultAppOptions.blitzHereOptions = value;
  }
  resultAppOptions.hasBlitzHereOptions = YES;
  return self;
}
- (BAppOptionsBuilder*) clearBlitzHereOptions {
  resultAppOptions.hasBlitzHereOptions = NO;
  resultAppOptions.blitzHereOptions = [BBlitzHereAppOptions defaultInstance];
  return self;
}
@end

@interface BSessionResponse ()
@property (strong) NSString* userID;
@property (strong) NSString* sessionToken;
@property (strong) NSString* serverURL;
@property (strong) NSMutableArray * userMessagesArray;
@property (strong) BUserProfile* userProfile;
@property BOOL resetAllAppData;
@property (strong) BAcceptInviteRequest* inviteRequest;
@property (strong) BAppOptions* appOptions;
@end

@implementation BSessionResponse

- (BOOL) hasUserID {
  return !!hasUserID_;
}
- (void) setHasUserID:(BOOL) _value_ {
  hasUserID_ = !!_value_;
}
@synthesize userID;
- (BOOL) hasSessionToken {
  return !!hasSessionToken_;
}
- (void) setHasSessionToken:(BOOL) _value_ {
  hasSessionToken_ = !!_value_;
}
@synthesize sessionToken;
- (BOOL) hasServerURL {
  return !!hasServerURL_;
}
- (void) setHasServerURL:(BOOL) _value_ {
  hasServerURL_ = !!_value_;
}
@synthesize serverURL;
@synthesize userMessagesArray;
@dynamic userMessages;
- (BOOL) hasUserProfile {
  return !!hasUserProfile_;
}
- (void) setHasUserProfile:(BOOL) _value_ {
  hasUserProfile_ = !!_value_;
}
@synthesize userProfile;
- (BOOL) hasResetAllAppData {
  return !!hasResetAllAppData_;
}
- (void) setHasResetAllAppData:(BOOL) _value_ {
  hasResetAllAppData_ = !!_value_;
}
- (BOOL) resetAllAppData {
  return !!resetAllAppData_;
}
- (void) setResetAllAppData:(BOOL) _value_ {
  resetAllAppData_ = !!_value_;
}
- (BOOL) hasInviteRequest {
  return !!hasInviteRequest_;
}
- (void) setHasInviteRequest:(BOOL) _value_ {
  hasInviteRequest_ = !!_value_;
}
@synthesize inviteRequest;
- (BOOL) hasAppOptions {
  return !!hasAppOptions_;
}
- (void) setHasAppOptions:(BOOL) _value_ {
  hasAppOptions_ = !!_value_;
}
@synthesize appOptions;
- (instancetype) init {
  if ((self = [super init])) {
    self.userID = @"";
    self.sessionToken = @"";
    self.serverURL = @"";
    self.userProfile = [BUserProfile defaultInstance];
    self.resetAllAppData = NO;
    self.inviteRequest = [BAcceptInviteRequest defaultInstance];
    self.appOptions = [BAppOptions defaultInstance];
  }
  return self;
}
static BSessionResponse* defaultBSessionResponseInstance = nil;
+ (void) initialize {
  if (self == [BSessionResponse class]) {
    defaultBSessionResponseInstance = [[BSessionResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBSessionResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultBSessionResponseInstance;
}
- (NSArray *)userMessages {
  return userMessagesArray;
}
- (BUserMessage*)userMessagesAtIndex:(NSUInteger)index {
  return [userMessagesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInituserMessages = YES;
   [self.userMessages enumerateObjectsUsingBlock:^(BUserMessage *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserMessages = NO;
      *stop = YES;
    }
  }];
  if (!isInituserMessages) return isInituserMessages;
  if (self.hasUserProfile) {
    if (!self.userProfile.isInitialized) {
      return NO;
    }
  }
  if (self.hasInviteRequest) {
    if (!self.inviteRequest.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserID) {
    [output writeString:1 value:self.userID];
  }
  if (self.hasSessionToken) {
    [output writeString:2 value:self.sessionToken];
  }
  if (self.hasServerURL) {
    [output writeString:3 value:self.serverURL];
  }
  [self.userMessagesArray enumerateObjectsUsingBlock:^(BUserMessage *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  if (self.hasUserProfile) {
    [output writeMessage:5 value:self.userProfile];
  }
  if (self.hasResetAllAppData) {
    [output writeBool:6 value:self.resetAllAppData];
  }
  if (self.hasInviteRequest) {
    [output writeMessage:7 value:self.inviteRequest];
  }
  if (self.hasAppOptions) {
    [output writeMessage:8 value:self.appOptions];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserID) {
    size_ += computeStringSize(1, self.userID);
  }
  if (self.hasSessionToken) {
    size_ += computeStringSize(2, self.sessionToken);
  }
  if (self.hasServerURL) {
    size_ += computeStringSize(3, self.serverURL);
  }
  [self.userMessagesArray enumerateObjectsUsingBlock:^(BUserMessage *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  if (self.hasUserProfile) {
    size_ += computeMessageSize(5, self.userProfile);
  }
  if (self.hasResetAllAppData) {
    size_ += computeBoolSize(6, self.resetAllAppData);
  }
  if (self.hasInviteRequest) {
    size_ += computeMessageSize(7, self.inviteRequest);
  }
  if (self.hasAppOptions) {
    size_ += computeMessageSize(8, self.appOptions);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BSessionResponse*) parseFromData:(NSData*) data {
  return (BSessionResponse*)[[[BSessionResponse builder] mergeFromData:data] build];
}
+ (BSessionResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSessionResponse*)[[[BSessionResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BSessionResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BSessionResponse*)[[[BSessionResponse builder] mergeFromInputStream:input] build];
}
+ (BSessionResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSessionResponse*)[[[BSessionResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BSessionResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BSessionResponse*)[[[BSessionResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BSessionResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSessionResponse*)[[[BSessionResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BSessionResponseBuilder*) builder {
  return [[BSessionResponseBuilder alloc] init];
}
+ (BSessionResponseBuilder*) builderWithPrototype:(BSessionResponse*) prototype {
  return [[BSessionResponse builder] mergeFrom:prototype];
}
- (BSessionResponseBuilder*) builder {
  return [BSessionResponse builder];
}
- (BSessionResponseBuilder*) toBuilder {
  return [BSessionResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userID", self.userID];
  }
  if (self.hasSessionToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionToken", self.sessionToken];
  }
  if (self.hasServerURL) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverURL", self.serverURL];
  }
  [self.userMessagesArray enumerateObjectsUsingBlock:^(BUserMessage *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userMessages"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasUserProfile) {
    [output appendFormat:@"%@%@ {\n", indent, @"userProfile"];
    [self.userProfile writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResetAllAppData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resetAllAppData", [NSNumber numberWithBool:self.resetAllAppData]];
  }
  if (self.hasInviteRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"inviteRequest"];
    [self.inviteRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAppOptions) {
    [output appendFormat:@"%@%@ {\n", indent, @"appOptions"];
    [self.appOptions writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserID) {
    [dictionary setObject: self.userID forKey: @"userID"];
  }
  if (self.hasSessionToken) {
    [dictionary setObject: self.sessionToken forKey: @"sessionToken"];
  }
  if (self.hasServerURL) {
    [dictionary setObject: self.serverURL forKey: @"serverURL"];
  }
  for (BUserMessage* element in self.userMessagesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userMessages"];
  }
  if (self.hasUserProfile) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userProfile storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userProfile"];
  }
  if (self.hasResetAllAppData) {
    [dictionary setObject: [NSNumber numberWithBool:self.resetAllAppData] forKey: @"resetAllAppData"];
  }
  if (self.hasInviteRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.inviteRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"inviteRequest"];
  }
  if (self.hasAppOptions) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.appOptions storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"appOptions"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BSessionResponse class]]) {
    return NO;
  }
  BSessionResponse *otherMessage = other;
  return
      self.hasUserID == otherMessage.hasUserID &&
      (!self.hasUserID || [self.userID isEqual:otherMessage.userID]) &&
      self.hasSessionToken == otherMessage.hasSessionToken &&
      (!self.hasSessionToken || [self.sessionToken isEqual:otherMessage.sessionToken]) &&
      self.hasServerURL == otherMessage.hasServerURL &&
      (!self.hasServerURL || [self.serverURL isEqual:otherMessage.serverURL]) &&
      [self.userMessagesArray isEqualToArray:otherMessage.userMessagesArray] &&
      self.hasUserProfile == otherMessage.hasUserProfile &&
      (!self.hasUserProfile || [self.userProfile isEqual:otherMessage.userProfile]) &&
      self.hasResetAllAppData == otherMessage.hasResetAllAppData &&
      (!self.hasResetAllAppData || self.resetAllAppData == otherMessage.resetAllAppData) &&
      self.hasInviteRequest == otherMessage.hasInviteRequest &&
      (!self.hasInviteRequest || [self.inviteRequest isEqual:otherMessage.inviteRequest]) &&
      self.hasAppOptions == otherMessage.hasAppOptions &&
      (!self.hasAppOptions || [self.appOptions isEqual:otherMessage.appOptions]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserID) {
    hashCode = hashCode * 31 + [self.userID hash];
  }
  if (self.hasSessionToken) {
    hashCode = hashCode * 31 + [self.sessionToken hash];
  }
  if (self.hasServerURL) {
    hashCode = hashCode * 31 + [self.serverURL hash];
  }
  [self.userMessagesArray enumerateObjectsUsingBlock:^(BUserMessage *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasUserProfile) {
    hashCode = hashCode * 31 + [self.userProfile hash];
  }
  if (self.hasResetAllAppData) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.resetAllAppData] hash];
  }
  if (self.hasInviteRequest) {
    hashCode = hashCode * 31 + [self.inviteRequest hash];
  }
  if (self.hasAppOptions) {
    hashCode = hashCode * 31 + [self.appOptions hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BSessionResponseBuilder()
@property (strong) BSessionResponse* resultSessionResponse;
@end

@implementation BSessionResponseBuilder
@synthesize resultSessionResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSessionResponse = [[BSessionResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSessionResponse;
}
- (BSessionResponseBuilder*) clear {
  self.resultSessionResponse = [[BSessionResponse alloc] init];
  return self;
}
- (BSessionResponseBuilder*) clone {
  return [BSessionResponse builderWithPrototype:resultSessionResponse];
}
- (BSessionResponse*) defaultInstance {
  return [BSessionResponse defaultInstance];
}
- (BSessionResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BSessionResponse*) buildPartial {
  BSessionResponse* returnMe = resultSessionResponse;
  self.resultSessionResponse = nil;
  return returnMe;
}
- (BSessionResponseBuilder*) mergeFrom:(BSessionResponse*) other {
  if (other == [BSessionResponse defaultInstance]) {
    return self;
  }
  if (other.hasUserID) {
    [self setUserID:other.userID];
  }
  if (other.hasSessionToken) {
    [self setSessionToken:other.sessionToken];
  }
  if (other.hasServerURL) {
    [self setServerURL:other.serverURL];
  }
  if (other.userMessagesArray.count > 0) {
    if (resultSessionResponse.userMessagesArray == nil) {
      resultSessionResponse.userMessagesArray = [[NSMutableArray alloc] initWithArray:other.userMessagesArray];
    } else {
      [resultSessionResponse.userMessagesArray addObjectsFromArray:other.userMessagesArray];
    }
  }
  if (other.hasUserProfile) {
    [self mergeUserProfile:other.userProfile];
  }
  if (other.hasResetAllAppData) {
    [self setResetAllAppData:other.resetAllAppData];
  }
  if (other.hasInviteRequest) {
    [self mergeInviteRequest:other.inviteRequest];
  }
  if (other.hasAppOptions) {
    [self mergeAppOptions:other.appOptions];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BSessionResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BSessionResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserID:[input readString]];
        break;
      }
      case 18: {
        [self setSessionToken:[input readString]];
        break;
      }
      case 26: {
        [self setServerURL:[input readString]];
        break;
      }
      case 34: {
        BUserMessageBuilder* subBuilder = [BUserMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserMessages:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        BUserProfileBuilder* subBuilder = [BUserProfile builder];
        if (self.hasUserProfile) {
          [subBuilder mergeFrom:self.userProfile];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserProfile:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setResetAllAppData:[input readBool]];
        break;
      }
      case 58: {
        BAcceptInviteRequestBuilder* subBuilder = [BAcceptInviteRequest builder];
        if (self.hasInviteRequest) {
          [subBuilder mergeFrom:self.inviteRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInviteRequest:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        BAppOptionsBuilder* subBuilder = [BAppOptions builder];
        if (self.hasAppOptions) {
          [subBuilder mergeFrom:self.appOptions];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAppOptions:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserID {
  return resultSessionResponse.hasUserID;
}
- (NSString*) userID {
  return resultSessionResponse.userID;
}
- (BSessionResponseBuilder*) setUserID:(NSString*) value {
  resultSessionResponse.hasUserID = YES;
  resultSessionResponse.userID = value;
  return self;
}
- (BSessionResponseBuilder*) clearUserID {
  resultSessionResponse.hasUserID = NO;
  resultSessionResponse.userID = @"";
  return self;
}
- (BOOL) hasSessionToken {
  return resultSessionResponse.hasSessionToken;
}
- (NSString*) sessionToken {
  return resultSessionResponse.sessionToken;
}
- (BSessionResponseBuilder*) setSessionToken:(NSString*) value {
  resultSessionResponse.hasSessionToken = YES;
  resultSessionResponse.sessionToken = value;
  return self;
}
- (BSessionResponseBuilder*) clearSessionToken {
  resultSessionResponse.hasSessionToken = NO;
  resultSessionResponse.sessionToken = @"";
  return self;
}
- (BOOL) hasServerURL {
  return resultSessionResponse.hasServerURL;
}
- (NSString*) serverURL {
  return resultSessionResponse.serverURL;
}
- (BSessionResponseBuilder*) setServerURL:(NSString*) value {
  resultSessionResponse.hasServerURL = YES;
  resultSessionResponse.serverURL = value;
  return self;
}
- (BSessionResponseBuilder*) clearServerURL {
  resultSessionResponse.hasServerURL = NO;
  resultSessionResponse.serverURL = @"";
  return self;
}
- (NSMutableArray *)userMessages {
  return resultSessionResponse.userMessagesArray;
}
- (BUserMessage*)userMessagesAtIndex:(NSUInteger)index {
  return [resultSessionResponse userMessagesAtIndex:index];
}
- (BSessionResponseBuilder *)addUserMessages:(BUserMessage*)value {
  if (resultSessionResponse.userMessagesArray == nil) {
    resultSessionResponse.userMessagesArray = [[NSMutableArray alloc]init];
  }
  [resultSessionResponse.userMessagesArray addObject:value];
  return self;
}
- (BSessionResponseBuilder *)setUserMessagesArray:(NSArray *)array {
  resultSessionResponse.userMessagesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BSessionResponseBuilder *)clearUserMessages {
  resultSessionResponse.userMessagesArray = nil;
  return self;
}
- (BOOL) hasUserProfile {
  return resultSessionResponse.hasUserProfile;
}
- (BUserProfile*) userProfile {
  return resultSessionResponse.userProfile;
}
- (BSessionResponseBuilder*) setUserProfile:(BUserProfile*) value {
  resultSessionResponse.hasUserProfile = YES;
  resultSessionResponse.userProfile = value;
  return self;
}
- (BSessionResponseBuilder*) setUserProfileBuilder:(BUserProfileBuilder*) builderForValue {
  return [self setUserProfile:[builderForValue build]];
}
- (BSessionResponseBuilder*) mergeUserProfile:(BUserProfile*) value {
  if (resultSessionResponse.hasUserProfile &&
      resultSessionResponse.userProfile != [BUserProfile defaultInstance]) {
    resultSessionResponse.userProfile =
      [[[BUserProfile builderWithPrototype:resultSessionResponse.userProfile] mergeFrom:value] buildPartial];
  } else {
    resultSessionResponse.userProfile = value;
  }
  resultSessionResponse.hasUserProfile = YES;
  return self;
}
- (BSessionResponseBuilder*) clearUserProfile {
  resultSessionResponse.hasUserProfile = NO;
  resultSessionResponse.userProfile = [BUserProfile defaultInstance];
  return self;
}
- (BOOL) hasResetAllAppData {
  return resultSessionResponse.hasResetAllAppData;
}
- (BOOL) resetAllAppData {
  return resultSessionResponse.resetAllAppData;
}
- (BSessionResponseBuilder*) setResetAllAppData:(BOOL) value {
  resultSessionResponse.hasResetAllAppData = YES;
  resultSessionResponse.resetAllAppData = value;
  return self;
}
- (BSessionResponseBuilder*) clearResetAllAppData {
  resultSessionResponse.hasResetAllAppData = NO;
  resultSessionResponse.resetAllAppData = NO;
  return self;
}
- (BOOL) hasInviteRequest {
  return resultSessionResponse.hasInviteRequest;
}
- (BAcceptInviteRequest*) inviteRequest {
  return resultSessionResponse.inviteRequest;
}
- (BSessionResponseBuilder*) setInviteRequest:(BAcceptInviteRequest*) value {
  resultSessionResponse.hasInviteRequest = YES;
  resultSessionResponse.inviteRequest = value;
  return self;
}
- (BSessionResponseBuilder*) setInviteRequestBuilder:(BAcceptInviteRequestBuilder*) builderForValue {
  return [self setInviteRequest:[builderForValue build]];
}
- (BSessionResponseBuilder*) mergeInviteRequest:(BAcceptInviteRequest*) value {
  if (resultSessionResponse.hasInviteRequest &&
      resultSessionResponse.inviteRequest != [BAcceptInviteRequest defaultInstance]) {
    resultSessionResponse.inviteRequest =
      [[[BAcceptInviteRequest builderWithPrototype:resultSessionResponse.inviteRequest] mergeFrom:value] buildPartial];
  } else {
    resultSessionResponse.inviteRequest = value;
  }
  resultSessionResponse.hasInviteRequest = YES;
  return self;
}
- (BSessionResponseBuilder*) clearInviteRequest {
  resultSessionResponse.hasInviteRequest = NO;
  resultSessionResponse.inviteRequest = [BAcceptInviteRequest defaultInstance];
  return self;
}
- (BOOL) hasAppOptions {
  return resultSessionResponse.hasAppOptions;
}
- (BAppOptions*) appOptions {
  return resultSessionResponse.appOptions;
}
- (BSessionResponseBuilder*) setAppOptions:(BAppOptions*) value {
  resultSessionResponse.hasAppOptions = YES;
  resultSessionResponse.appOptions = value;
  return self;
}
- (BSessionResponseBuilder*) setAppOptionsBuilder:(BAppOptionsBuilder*) builderForValue {
  return [self setAppOptions:[builderForValue build]];
}
- (BSessionResponseBuilder*) mergeAppOptions:(BAppOptions*) value {
  if (resultSessionResponse.hasAppOptions &&
      resultSessionResponse.appOptions != [BAppOptions defaultInstance]) {
    resultSessionResponse.appOptions =
      [[[BAppOptions builderWithPrototype:resultSessionResponse.appOptions] mergeFrom:value] buildPartial];
  } else {
    resultSessionResponse.appOptions = value;
  }
  resultSessionResponse.hasAppOptions = YES;
  return self;
}
- (BSessionResponseBuilder*) clearAppOptions {
  resultSessionResponse.hasAppOptions = NO;
  resultSessionResponse.appOptions = [BAppOptions defaultInstance];
  return self;
}
@end

@interface BPushConnect ()
@property (strong) NSString* userID;
@end

@implementation BPushConnect

- (BOOL) hasUserID {
  return !!hasUserID_;
}
- (void) setHasUserID:(BOOL) _value_ {
  hasUserID_ = !!_value_;
}
@synthesize userID;
- (instancetype) init {
  if ((self = [super init])) {
    self.userID = @"";
  }
  return self;
}
static BPushConnect* defaultBPushConnectInstance = nil;
+ (void) initialize {
  if (self == [BPushConnect class]) {
    defaultBPushConnectInstance = [[BPushConnect alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBPushConnectInstance;
}
- (instancetype) defaultInstance {
  return defaultBPushConnectInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserID) {
    [output writeString:1 value:self.userID];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserID) {
    size_ += computeStringSize(1, self.userID);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BPushConnect*) parseFromData:(NSData*) data {
  return (BPushConnect*)[[[BPushConnect builder] mergeFromData:data] build];
}
+ (BPushConnect*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BPushConnect*)[[[BPushConnect builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BPushConnect*) parseFromInputStream:(NSInputStream*) input {
  return (BPushConnect*)[[[BPushConnect builder] mergeFromInputStream:input] build];
}
+ (BPushConnect*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BPushConnect*)[[[BPushConnect builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BPushConnect*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BPushConnect*)[[[BPushConnect builder] mergeFromCodedInputStream:input] build];
}
+ (BPushConnect*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BPushConnect*)[[[BPushConnect builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BPushConnectBuilder*) builder {
  return [[BPushConnectBuilder alloc] init];
}
+ (BPushConnectBuilder*) builderWithPrototype:(BPushConnect*) prototype {
  return [[BPushConnect builder] mergeFrom:prototype];
}
- (BPushConnectBuilder*) builder {
  return [BPushConnect builder];
}
- (BPushConnectBuilder*) toBuilder {
  return [BPushConnect builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userID", self.userID];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserID) {
    [dictionary setObject: self.userID forKey: @"userID"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BPushConnect class]]) {
    return NO;
  }
  BPushConnect *otherMessage = other;
  return
      self.hasUserID == otherMessage.hasUserID &&
      (!self.hasUserID || [self.userID isEqual:otherMessage.userID]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserID) {
    hashCode = hashCode * 31 + [self.userID hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BPushConnectBuilder()
@property (strong) BPushConnect* resultPushConnect;
@end

@implementation BPushConnectBuilder
@synthesize resultPushConnect;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPushConnect = [[BPushConnect alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPushConnect;
}
- (BPushConnectBuilder*) clear {
  self.resultPushConnect = [[BPushConnect alloc] init];
  return self;
}
- (BPushConnectBuilder*) clone {
  return [BPushConnect builderWithPrototype:resultPushConnect];
}
- (BPushConnect*) defaultInstance {
  return [BPushConnect defaultInstance];
}
- (BPushConnect*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BPushConnect*) buildPartial {
  BPushConnect* returnMe = resultPushConnect;
  self.resultPushConnect = nil;
  return returnMe;
}
- (BPushConnectBuilder*) mergeFrom:(BPushConnect*) other {
  if (other == [BPushConnect defaultInstance]) {
    return self;
  }
  if (other.hasUserID) {
    [self setUserID:other.userID];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BPushConnectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BPushConnectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserID:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserID {
  return resultPushConnect.hasUserID;
}
- (NSString*) userID {
  return resultPushConnect.userID;
}
- (BPushConnectBuilder*) setUserID:(NSString*) value {
  resultPushConnect.hasUserID = YES;
  resultPushConnect.userID = value;
  return self;
}
- (BPushConnectBuilder*) clearUserID {
  resultPushConnect.hasUserID = NO;
  resultPushConnect.userID = @"";
  return self;
}
@end

@interface BPushDisconnect ()
@end

@implementation BPushDisconnect

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BPushDisconnect* defaultBPushDisconnectInstance = nil;
+ (void) initialize {
  if (self == [BPushDisconnect class]) {
    defaultBPushDisconnectInstance = [[BPushDisconnect alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBPushDisconnectInstance;
}
- (instancetype) defaultInstance {
  return defaultBPushDisconnectInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BPushDisconnect*) parseFromData:(NSData*) data {
  return (BPushDisconnect*)[[[BPushDisconnect builder] mergeFromData:data] build];
}
+ (BPushDisconnect*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BPushDisconnect*)[[[BPushDisconnect builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BPushDisconnect*) parseFromInputStream:(NSInputStream*) input {
  return (BPushDisconnect*)[[[BPushDisconnect builder] mergeFromInputStream:input] build];
}
+ (BPushDisconnect*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BPushDisconnect*)[[[BPushDisconnect builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BPushDisconnect*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BPushDisconnect*)[[[BPushDisconnect builder] mergeFromCodedInputStream:input] build];
}
+ (BPushDisconnect*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BPushDisconnect*)[[[BPushDisconnect builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BPushDisconnectBuilder*) builder {
  return [[BPushDisconnectBuilder alloc] init];
}
+ (BPushDisconnectBuilder*) builderWithPrototype:(BPushDisconnect*) prototype {
  return [[BPushDisconnect builder] mergeFrom:prototype];
}
- (BPushDisconnectBuilder*) builder {
  return [BPushDisconnect builder];
}
- (BPushDisconnectBuilder*) toBuilder {
  return [BPushDisconnect builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BPushDisconnect class]]) {
    return NO;
  }
  BPushDisconnect *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BPushDisconnectBuilder()
@property (strong) BPushDisconnect* resultPushDisconnect;
@end

@implementation BPushDisconnectBuilder
@synthesize resultPushDisconnect;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPushDisconnect = [[BPushDisconnect alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPushDisconnect;
}
- (BPushDisconnectBuilder*) clear {
  self.resultPushDisconnect = [[BPushDisconnect alloc] init];
  return self;
}
- (BPushDisconnectBuilder*) clone {
  return [BPushDisconnect builderWithPrototype:resultPushDisconnect];
}
- (BPushDisconnect*) defaultInstance {
  return [BPushDisconnect defaultInstance];
}
- (BPushDisconnect*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BPushDisconnect*) buildPartial {
  BPushDisconnect* returnMe = resultPushDisconnect;
  self.resultPushDisconnect = nil;
  return returnMe;
}
- (BPushDisconnectBuilder*) mergeFrom:(BPushDisconnect*) other {
  if (other == [BPushDisconnect defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BPushDisconnectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BPushDisconnectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface BRequestType ()
@property (strong) BSessionRequest* sessionRequest;
@property (strong) BUserEventBatch* userEventBatch;
@property (strong) BUserProfileUpdate* userProfileUpdate;
@property (strong) BUserProfileQuery* userProfileQuery;
@property (strong) BConfirmationRequest* confirmationRequest;
@property (strong) BUserMessageUpdate* messageSendRequest;
@property (strong) BUserMessageUpdate* messageFetchRequest;
@property (strong) BDebugMessage* debugMessage;
@property (strong) BImageUpload* imageUpload;
@property (strong) BAcceptInviteRequest* acceptInviteRequest;
@property (strong) BFeedPostFetchRequest* feedPostFetchRequest;
@property (strong) BFeedPostUpdateRequest* feedPostUpdateRequest;
@property (strong) BAutocompleteRequest* autocompleteRequest;
@property (strong) BEntityTagList* entityTagUpdate;
@property (strong) BUserSearchRequest* userSearchRequest;
@property (strong) BPushConnect* pushConnect;
@property (strong) BPushDisconnect* pushDisconnect;
@property (strong) BConversationRequest* conversationRequest;
@property (strong) BFetchConversations* fetchConversations;
@property (strong) BUserReview* userReview;
@property (strong) BUpdateConversationStatus* updateConversationStatus;
@property (strong) BUserCardInfo* userCardInfo;
@property (strong) BCharge* chargeRequest;
@end

@implementation BRequestType

- (BOOL) hasSessionRequest {
  return !!hasSessionRequest_;
}
- (void) setHasSessionRequest:(BOOL) _value_ {
  hasSessionRequest_ = !!_value_;
}
@synthesize sessionRequest;
- (BOOL) hasUserEventBatch {
  return !!hasUserEventBatch_;
}
- (void) setHasUserEventBatch:(BOOL) _value_ {
  hasUserEventBatch_ = !!_value_;
}
@synthesize userEventBatch;
- (BOOL) hasUserProfileUpdate {
  return !!hasUserProfileUpdate_;
}
- (void) setHasUserProfileUpdate:(BOOL) _value_ {
  hasUserProfileUpdate_ = !!_value_;
}
@synthesize userProfileUpdate;
- (BOOL) hasUserProfileQuery {
  return !!hasUserProfileQuery_;
}
- (void) setHasUserProfileQuery:(BOOL) _value_ {
  hasUserProfileQuery_ = !!_value_;
}
@synthesize userProfileQuery;
- (BOOL) hasConfirmationRequest {
  return !!hasConfirmationRequest_;
}
- (void) setHasConfirmationRequest:(BOOL) _value_ {
  hasConfirmationRequest_ = !!_value_;
}
@synthesize confirmationRequest;
- (BOOL) hasMessageSendRequest {
  return !!hasMessageSendRequest_;
}
- (void) setHasMessageSendRequest:(BOOL) _value_ {
  hasMessageSendRequest_ = !!_value_;
}
@synthesize messageSendRequest;
- (BOOL) hasMessageFetchRequest {
  return !!hasMessageFetchRequest_;
}
- (void) setHasMessageFetchRequest:(BOOL) _value_ {
  hasMessageFetchRequest_ = !!_value_;
}
@synthesize messageFetchRequest;
- (BOOL) hasDebugMessage {
  return !!hasDebugMessage_;
}
- (void) setHasDebugMessage:(BOOL) _value_ {
  hasDebugMessage_ = !!_value_;
}
@synthesize debugMessage;
- (BOOL) hasImageUpload {
  return !!hasImageUpload_;
}
- (void) setHasImageUpload:(BOOL) _value_ {
  hasImageUpload_ = !!_value_;
}
@synthesize imageUpload;
- (BOOL) hasAcceptInviteRequest {
  return !!hasAcceptInviteRequest_;
}
- (void) setHasAcceptInviteRequest:(BOOL) _value_ {
  hasAcceptInviteRequest_ = !!_value_;
}
@synthesize acceptInviteRequest;
- (BOOL) hasFeedPostFetchRequest {
  return !!hasFeedPostFetchRequest_;
}
- (void) setHasFeedPostFetchRequest:(BOOL) _value_ {
  hasFeedPostFetchRequest_ = !!_value_;
}
@synthesize feedPostFetchRequest;
- (BOOL) hasFeedPostUpdateRequest {
  return !!hasFeedPostUpdateRequest_;
}
- (void) setHasFeedPostUpdateRequest:(BOOL) _value_ {
  hasFeedPostUpdateRequest_ = !!_value_;
}
@synthesize feedPostUpdateRequest;
- (BOOL) hasAutocompleteRequest {
  return !!hasAutocompleteRequest_;
}
- (void) setHasAutocompleteRequest:(BOOL) _value_ {
  hasAutocompleteRequest_ = !!_value_;
}
@synthesize autocompleteRequest;
- (BOOL) hasEntityTagUpdate {
  return !!hasEntityTagUpdate_;
}
- (void) setHasEntityTagUpdate:(BOOL) _value_ {
  hasEntityTagUpdate_ = !!_value_;
}
@synthesize entityTagUpdate;
- (BOOL) hasUserSearchRequest {
  return !!hasUserSearchRequest_;
}
- (void) setHasUserSearchRequest:(BOOL) _value_ {
  hasUserSearchRequest_ = !!_value_;
}
@synthesize userSearchRequest;
- (BOOL) hasPushConnect {
  return !!hasPushConnect_;
}
- (void) setHasPushConnect:(BOOL) _value_ {
  hasPushConnect_ = !!_value_;
}
@synthesize pushConnect;
- (BOOL) hasPushDisconnect {
  return !!hasPushDisconnect_;
}
- (void) setHasPushDisconnect:(BOOL) _value_ {
  hasPushDisconnect_ = !!_value_;
}
@synthesize pushDisconnect;
- (BOOL) hasConversationRequest {
  return !!hasConversationRequest_;
}
- (void) setHasConversationRequest:(BOOL) _value_ {
  hasConversationRequest_ = !!_value_;
}
@synthesize conversationRequest;
- (BOOL) hasFetchConversations {
  return !!hasFetchConversations_;
}
- (void) setHasFetchConversations:(BOOL) _value_ {
  hasFetchConversations_ = !!_value_;
}
@synthesize fetchConversations;
- (BOOL) hasUserReview {
  return !!hasUserReview_;
}
- (void) setHasUserReview:(BOOL) _value_ {
  hasUserReview_ = !!_value_;
}
@synthesize userReview;
- (BOOL) hasUpdateConversationStatus {
  return !!hasUpdateConversationStatus_;
}
- (void) setHasUpdateConversationStatus:(BOOL) _value_ {
  hasUpdateConversationStatus_ = !!_value_;
}
@synthesize updateConversationStatus;
- (BOOL) hasUserCardInfo {
  return !!hasUserCardInfo_;
}
- (void) setHasUserCardInfo:(BOOL) _value_ {
  hasUserCardInfo_ = !!_value_;
}
@synthesize userCardInfo;
- (BOOL) hasChargeRequest {
  return !!hasChargeRequest_;
}
- (void) setHasChargeRequest:(BOOL) _value_ {
  hasChargeRequest_ = !!_value_;
}
@synthesize chargeRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.sessionRequest = [BSessionRequest defaultInstance];
    self.userEventBatch = [BUserEventBatch defaultInstance];
    self.userProfileUpdate = [BUserProfileUpdate defaultInstance];
    self.userProfileQuery = [BUserProfileQuery defaultInstance];
    self.confirmationRequest = [BConfirmationRequest defaultInstance];
    self.messageSendRequest = [BUserMessageUpdate defaultInstance];
    self.messageFetchRequest = [BUserMessageUpdate defaultInstance];
    self.debugMessage = [BDebugMessage defaultInstance];
    self.imageUpload = [BImageUpload defaultInstance];
    self.acceptInviteRequest = [BAcceptInviteRequest defaultInstance];
    self.feedPostFetchRequest = [BFeedPostFetchRequest defaultInstance];
    self.feedPostUpdateRequest = [BFeedPostUpdateRequest defaultInstance];
    self.autocompleteRequest = [BAutocompleteRequest defaultInstance];
    self.entityTagUpdate = [BEntityTagList defaultInstance];
    self.userSearchRequest = [BUserSearchRequest defaultInstance];
    self.pushConnect = [BPushConnect defaultInstance];
    self.pushDisconnect = [BPushDisconnect defaultInstance];
    self.conversationRequest = [BConversationRequest defaultInstance];
    self.fetchConversations = [BFetchConversations defaultInstance];
    self.userReview = [BUserReview defaultInstance];
    self.updateConversationStatus = [BUpdateConversationStatus defaultInstance];
    self.userCardInfo = [BUserCardInfo defaultInstance];
    self.chargeRequest = [BCharge defaultInstance];
  }
  return self;
}
static BRequestType* defaultBRequestTypeInstance = nil;
+ (void) initialize {
  if (self == [BRequestType class]) {
    defaultBRequestTypeInstance = [[BRequestType alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBRequestTypeInstance;
}
- (instancetype) defaultInstance {
  return defaultBRequestTypeInstance;
}
- (BOOL) isInitialized {
  if (self.hasSessionRequest) {
    if (!self.sessionRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserEventBatch) {
    if (!self.userEventBatch.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserProfileUpdate) {
    if (!self.userProfileUpdate.isInitialized) {
      return NO;
    }
  }
  if (self.hasConfirmationRequest) {
    if (!self.confirmationRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasMessageSendRequest) {
    if (!self.messageSendRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasMessageFetchRequest) {
    if (!self.messageFetchRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasImageUpload) {
    if (!self.imageUpload.isInitialized) {
      return NO;
    }
  }
  if (self.hasAcceptInviteRequest) {
    if (!self.acceptInviteRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasFeedPostFetchRequest) {
    if (!self.feedPostFetchRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasFeedPostUpdateRequest) {
    if (!self.feedPostUpdateRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasFetchConversations) {
    if (!self.fetchConversations.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserReview) {
    if (!self.userReview.isInitialized) {
      return NO;
    }
  }
  if (self.hasChargeRequest) {
    if (!self.chargeRequest.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionRequest) {
    [output writeMessage:1 value:self.sessionRequest];
  }
  if (self.hasUserEventBatch) {
    [output writeMessage:2 value:self.userEventBatch];
  }
  if (self.hasUserProfileUpdate) {
    [output writeMessage:3 value:self.userProfileUpdate];
  }
  if (self.hasUserProfileQuery) {
    [output writeMessage:4 value:self.userProfileQuery];
  }
  if (self.hasConfirmationRequest) {
    [output writeMessage:5 value:self.confirmationRequest];
  }
  if (self.hasMessageSendRequest) {
    [output writeMessage:6 value:self.messageSendRequest];
  }
  if (self.hasMessageFetchRequest) {
    [output writeMessage:7 value:self.messageFetchRequest];
  }
  if (self.hasDebugMessage) {
    [output writeMessage:8 value:self.debugMessage];
  }
  if (self.hasImageUpload) {
    [output writeMessage:9 value:self.imageUpload];
  }
  if (self.hasAcceptInviteRequest) {
    [output writeMessage:10 value:self.acceptInviteRequest];
  }
  if (self.hasFeedPostFetchRequest) {
    [output writeMessage:11 value:self.feedPostFetchRequest];
  }
  if (self.hasFeedPostUpdateRequest) {
    [output writeMessage:12 value:self.feedPostUpdateRequest];
  }
  if (self.hasAutocompleteRequest) {
    [output writeMessage:13 value:self.autocompleteRequest];
  }
  if (self.hasEntityTagUpdate) {
    [output writeMessage:14 value:self.entityTagUpdate];
  }
  if (self.hasUserSearchRequest) {
    [output writeMessage:15 value:self.userSearchRequest];
  }
  if (self.hasPushConnect) {
    [output writeMessage:16 value:self.pushConnect];
  }
  if (self.hasPushDisconnect) {
    [output writeMessage:17 value:self.pushDisconnect];
  }
  if (self.hasConversationRequest) {
    [output writeMessage:18 value:self.conversationRequest];
  }
  if (self.hasFetchConversations) {
    [output writeMessage:19 value:self.fetchConversations];
  }
  if (self.hasUserReview) {
    [output writeMessage:20 value:self.userReview];
  }
  if (self.hasUpdateConversationStatus) {
    [output writeMessage:21 value:self.updateConversationStatus];
  }
  if (self.hasUserCardInfo) {
    [output writeMessage:22 value:self.userCardInfo];
  }
  if (self.hasChargeRequest) {
    [output writeMessage:23 value:self.chargeRequest];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSessionRequest) {
    size_ += computeMessageSize(1, self.sessionRequest);
  }
  if (self.hasUserEventBatch) {
    size_ += computeMessageSize(2, self.userEventBatch);
  }
  if (self.hasUserProfileUpdate) {
    size_ += computeMessageSize(3, self.userProfileUpdate);
  }
  if (self.hasUserProfileQuery) {
    size_ += computeMessageSize(4, self.userProfileQuery);
  }
  if (self.hasConfirmationRequest) {
    size_ += computeMessageSize(5, self.confirmationRequest);
  }
  if (self.hasMessageSendRequest) {
    size_ += computeMessageSize(6, self.messageSendRequest);
  }
  if (self.hasMessageFetchRequest) {
    size_ += computeMessageSize(7, self.messageFetchRequest);
  }
  if (self.hasDebugMessage) {
    size_ += computeMessageSize(8, self.debugMessage);
  }
  if (self.hasImageUpload) {
    size_ += computeMessageSize(9, self.imageUpload);
  }
  if (self.hasAcceptInviteRequest) {
    size_ += computeMessageSize(10, self.acceptInviteRequest);
  }
  if (self.hasFeedPostFetchRequest) {
    size_ += computeMessageSize(11, self.feedPostFetchRequest);
  }
  if (self.hasFeedPostUpdateRequest) {
    size_ += computeMessageSize(12, self.feedPostUpdateRequest);
  }
  if (self.hasAutocompleteRequest) {
    size_ += computeMessageSize(13, self.autocompleteRequest);
  }
  if (self.hasEntityTagUpdate) {
    size_ += computeMessageSize(14, self.entityTagUpdate);
  }
  if (self.hasUserSearchRequest) {
    size_ += computeMessageSize(15, self.userSearchRequest);
  }
  if (self.hasPushConnect) {
    size_ += computeMessageSize(16, self.pushConnect);
  }
  if (self.hasPushDisconnect) {
    size_ += computeMessageSize(17, self.pushDisconnect);
  }
  if (self.hasConversationRequest) {
    size_ += computeMessageSize(18, self.conversationRequest);
  }
  if (self.hasFetchConversations) {
    size_ += computeMessageSize(19, self.fetchConversations);
  }
  if (self.hasUserReview) {
    size_ += computeMessageSize(20, self.userReview);
  }
  if (self.hasUpdateConversationStatus) {
    size_ += computeMessageSize(21, self.updateConversationStatus);
  }
  if (self.hasUserCardInfo) {
    size_ += computeMessageSize(22, self.userCardInfo);
  }
  if (self.hasChargeRequest) {
    size_ += computeMessageSize(23, self.chargeRequest);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BRequestType*) parseFromData:(NSData*) data {
  return (BRequestType*)[[[BRequestType builder] mergeFromData:data] build];
}
+ (BRequestType*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BRequestType*)[[[BRequestType builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BRequestType*) parseFromInputStream:(NSInputStream*) input {
  return (BRequestType*)[[[BRequestType builder] mergeFromInputStream:input] build];
}
+ (BRequestType*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BRequestType*)[[[BRequestType builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BRequestType*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BRequestType*)[[[BRequestType builder] mergeFromCodedInputStream:input] build];
}
+ (BRequestType*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BRequestType*)[[[BRequestType builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BRequestTypeBuilder*) builder {
  return [[BRequestTypeBuilder alloc] init];
}
+ (BRequestTypeBuilder*) builderWithPrototype:(BRequestType*) prototype {
  return [[BRequestType builder] mergeFrom:prototype];
}
- (BRequestTypeBuilder*) builder {
  return [BRequestType builder];
}
- (BRequestTypeBuilder*) toBuilder {
  return [BRequestType builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSessionRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"sessionRequest"];
    [self.sessionRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserEventBatch) {
    [output appendFormat:@"%@%@ {\n", indent, @"userEventBatch"];
    [self.userEventBatch writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserProfileUpdate) {
    [output appendFormat:@"%@%@ {\n", indent, @"userProfileUpdate"];
    [self.userProfileUpdate writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserProfileQuery) {
    [output appendFormat:@"%@%@ {\n", indent, @"userProfileQuery"];
    [self.userProfileQuery writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasConfirmationRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"confirmationRequest"];
    [self.confirmationRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMessageSendRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"messageSendRequest"];
    [self.messageSendRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMessageFetchRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"messageFetchRequest"];
    [self.messageFetchRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDebugMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"debugMessage"];
    [self.debugMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasImageUpload) {
    [output appendFormat:@"%@%@ {\n", indent, @"imageUpload"];
    [self.imageUpload writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAcceptInviteRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"acceptInviteRequest"];
    [self.acceptInviteRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFeedPostFetchRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"feedPostFetchRequest"];
    [self.feedPostFetchRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFeedPostUpdateRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"feedPostUpdateRequest"];
    [self.feedPostUpdateRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAutocompleteRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"autocompleteRequest"];
    [self.autocompleteRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasEntityTagUpdate) {
    [output appendFormat:@"%@%@ {\n", indent, @"entityTagUpdate"];
    [self.entityTagUpdate writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserSearchRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"userSearchRequest"];
    [self.userSearchRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPushConnect) {
    [output appendFormat:@"%@%@ {\n", indent, @"pushConnect"];
    [self.pushConnect writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPushDisconnect) {
    [output appendFormat:@"%@%@ {\n", indent, @"pushDisconnect"];
    [self.pushDisconnect writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasConversationRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"conversationRequest"];
    [self.conversationRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFetchConversations) {
    [output appendFormat:@"%@%@ {\n", indent, @"fetchConversations"];
    [self.fetchConversations writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserReview) {
    [output appendFormat:@"%@%@ {\n", indent, @"userReview"];
    [self.userReview writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUpdateConversationStatus) {
    [output appendFormat:@"%@%@ {\n", indent, @"updateConversationStatus"];
    [self.updateConversationStatus writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserCardInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"userCardInfo"];
    [self.userCardInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasChargeRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"chargeRequest"];
    [self.chargeRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSessionRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.sessionRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"sessionRequest"];
  }
  if (self.hasUserEventBatch) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userEventBatch storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userEventBatch"];
  }
  if (self.hasUserProfileUpdate) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userProfileUpdate storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userProfileUpdate"];
  }
  if (self.hasUserProfileQuery) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userProfileQuery storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userProfileQuery"];
  }
  if (self.hasConfirmationRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.confirmationRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"confirmationRequest"];
  }
  if (self.hasMessageSendRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.messageSendRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"messageSendRequest"];
  }
  if (self.hasMessageFetchRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.messageFetchRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"messageFetchRequest"];
  }
  if (self.hasDebugMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.debugMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"debugMessage"];
  }
  if (self.hasImageUpload) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.imageUpload storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"imageUpload"];
  }
  if (self.hasAcceptInviteRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.acceptInviteRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"acceptInviteRequest"];
  }
  if (self.hasFeedPostFetchRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.feedPostFetchRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"feedPostFetchRequest"];
  }
  if (self.hasFeedPostUpdateRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.feedPostUpdateRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"feedPostUpdateRequest"];
  }
  if (self.hasAutocompleteRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.autocompleteRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"autocompleteRequest"];
  }
  if (self.hasEntityTagUpdate) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.entityTagUpdate storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"entityTagUpdate"];
  }
  if (self.hasUserSearchRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userSearchRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userSearchRequest"];
  }
  if (self.hasPushConnect) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.pushConnect storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"pushConnect"];
  }
  if (self.hasPushDisconnect) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.pushDisconnect storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"pushDisconnect"];
  }
  if (self.hasConversationRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.conversationRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"conversationRequest"];
  }
  if (self.hasFetchConversations) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.fetchConversations storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"fetchConversations"];
  }
  if (self.hasUserReview) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userReview storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userReview"];
  }
  if (self.hasUpdateConversationStatus) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.updateConversationStatus storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"updateConversationStatus"];
  }
  if (self.hasUserCardInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userCardInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userCardInfo"];
  }
  if (self.hasChargeRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.chargeRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"chargeRequest"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BRequestType class]]) {
    return NO;
  }
  BRequestType *otherMessage = other;
  return
      self.hasSessionRequest == otherMessage.hasSessionRequest &&
      (!self.hasSessionRequest || [self.sessionRequest isEqual:otherMessage.sessionRequest]) &&
      self.hasUserEventBatch == otherMessage.hasUserEventBatch &&
      (!self.hasUserEventBatch || [self.userEventBatch isEqual:otherMessage.userEventBatch]) &&
      self.hasUserProfileUpdate == otherMessage.hasUserProfileUpdate &&
      (!self.hasUserProfileUpdate || [self.userProfileUpdate isEqual:otherMessage.userProfileUpdate]) &&
      self.hasUserProfileQuery == otherMessage.hasUserProfileQuery &&
      (!self.hasUserProfileQuery || [self.userProfileQuery isEqual:otherMessage.userProfileQuery]) &&
      self.hasConfirmationRequest == otherMessage.hasConfirmationRequest &&
      (!self.hasConfirmationRequest || [self.confirmationRequest isEqual:otherMessage.confirmationRequest]) &&
      self.hasMessageSendRequest == otherMessage.hasMessageSendRequest &&
      (!self.hasMessageSendRequest || [self.messageSendRequest isEqual:otherMessage.messageSendRequest]) &&
      self.hasMessageFetchRequest == otherMessage.hasMessageFetchRequest &&
      (!self.hasMessageFetchRequest || [self.messageFetchRequest isEqual:otherMessage.messageFetchRequest]) &&
      self.hasDebugMessage == otherMessage.hasDebugMessage &&
      (!self.hasDebugMessage || [self.debugMessage isEqual:otherMessage.debugMessage]) &&
      self.hasImageUpload == otherMessage.hasImageUpload &&
      (!self.hasImageUpload || [self.imageUpload isEqual:otherMessage.imageUpload]) &&
      self.hasAcceptInviteRequest == otherMessage.hasAcceptInviteRequest &&
      (!self.hasAcceptInviteRequest || [self.acceptInviteRequest isEqual:otherMessage.acceptInviteRequest]) &&
      self.hasFeedPostFetchRequest == otherMessage.hasFeedPostFetchRequest &&
      (!self.hasFeedPostFetchRequest || [self.feedPostFetchRequest isEqual:otherMessage.feedPostFetchRequest]) &&
      self.hasFeedPostUpdateRequest == otherMessage.hasFeedPostUpdateRequest &&
      (!self.hasFeedPostUpdateRequest || [self.feedPostUpdateRequest isEqual:otherMessage.feedPostUpdateRequest]) &&
      self.hasAutocompleteRequest == otherMessage.hasAutocompleteRequest &&
      (!self.hasAutocompleteRequest || [self.autocompleteRequest isEqual:otherMessage.autocompleteRequest]) &&
      self.hasEntityTagUpdate == otherMessage.hasEntityTagUpdate &&
      (!self.hasEntityTagUpdate || [self.entityTagUpdate isEqual:otherMessage.entityTagUpdate]) &&
      self.hasUserSearchRequest == otherMessage.hasUserSearchRequest &&
      (!self.hasUserSearchRequest || [self.userSearchRequest isEqual:otherMessage.userSearchRequest]) &&
      self.hasPushConnect == otherMessage.hasPushConnect &&
      (!self.hasPushConnect || [self.pushConnect isEqual:otherMessage.pushConnect]) &&
      self.hasPushDisconnect == otherMessage.hasPushDisconnect &&
      (!self.hasPushDisconnect || [self.pushDisconnect isEqual:otherMessage.pushDisconnect]) &&
      self.hasConversationRequest == otherMessage.hasConversationRequest &&
      (!self.hasConversationRequest || [self.conversationRequest isEqual:otherMessage.conversationRequest]) &&
      self.hasFetchConversations == otherMessage.hasFetchConversations &&
      (!self.hasFetchConversations || [self.fetchConversations isEqual:otherMessage.fetchConversations]) &&
      self.hasUserReview == otherMessage.hasUserReview &&
      (!self.hasUserReview || [self.userReview isEqual:otherMessage.userReview]) &&
      self.hasUpdateConversationStatus == otherMessage.hasUpdateConversationStatus &&
      (!self.hasUpdateConversationStatus || [self.updateConversationStatus isEqual:otherMessage.updateConversationStatus]) &&
      self.hasUserCardInfo == otherMessage.hasUserCardInfo &&
      (!self.hasUserCardInfo || [self.userCardInfo isEqual:otherMessage.userCardInfo]) &&
      self.hasChargeRequest == otherMessage.hasChargeRequest &&
      (!self.hasChargeRequest || [self.chargeRequest isEqual:otherMessage.chargeRequest]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSessionRequest) {
    hashCode = hashCode * 31 + [self.sessionRequest hash];
  }
  if (self.hasUserEventBatch) {
    hashCode = hashCode * 31 + [self.userEventBatch hash];
  }
  if (self.hasUserProfileUpdate) {
    hashCode = hashCode * 31 + [self.userProfileUpdate hash];
  }
  if (self.hasUserProfileQuery) {
    hashCode = hashCode * 31 + [self.userProfileQuery hash];
  }
  if (self.hasConfirmationRequest) {
    hashCode = hashCode * 31 + [self.confirmationRequest hash];
  }
  if (self.hasMessageSendRequest) {
    hashCode = hashCode * 31 + [self.messageSendRequest hash];
  }
  if (self.hasMessageFetchRequest) {
    hashCode = hashCode * 31 + [self.messageFetchRequest hash];
  }
  if (self.hasDebugMessage) {
    hashCode = hashCode * 31 + [self.debugMessage hash];
  }
  if (self.hasImageUpload) {
    hashCode = hashCode * 31 + [self.imageUpload hash];
  }
  if (self.hasAcceptInviteRequest) {
    hashCode = hashCode * 31 + [self.acceptInviteRequest hash];
  }
  if (self.hasFeedPostFetchRequest) {
    hashCode = hashCode * 31 + [self.feedPostFetchRequest hash];
  }
  if (self.hasFeedPostUpdateRequest) {
    hashCode = hashCode * 31 + [self.feedPostUpdateRequest hash];
  }
  if (self.hasAutocompleteRequest) {
    hashCode = hashCode * 31 + [self.autocompleteRequest hash];
  }
  if (self.hasEntityTagUpdate) {
    hashCode = hashCode * 31 + [self.entityTagUpdate hash];
  }
  if (self.hasUserSearchRequest) {
    hashCode = hashCode * 31 + [self.userSearchRequest hash];
  }
  if (self.hasPushConnect) {
    hashCode = hashCode * 31 + [self.pushConnect hash];
  }
  if (self.hasPushDisconnect) {
    hashCode = hashCode * 31 + [self.pushDisconnect hash];
  }
  if (self.hasConversationRequest) {
    hashCode = hashCode * 31 + [self.conversationRequest hash];
  }
  if (self.hasFetchConversations) {
    hashCode = hashCode * 31 + [self.fetchConversations hash];
  }
  if (self.hasUserReview) {
    hashCode = hashCode * 31 + [self.userReview hash];
  }
  if (self.hasUpdateConversationStatus) {
    hashCode = hashCode * 31 + [self.updateConversationStatus hash];
  }
  if (self.hasUserCardInfo) {
    hashCode = hashCode * 31 + [self.userCardInfo hash];
  }
  if (self.hasChargeRequest) {
    hashCode = hashCode * 31 + [self.chargeRequest hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BRequestTypeBuilder()
@property (strong) BRequestType* resultRequestType;
@end

@implementation BRequestTypeBuilder
@synthesize resultRequestType;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequestType = [[BRequestType alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequestType;
}
- (BRequestTypeBuilder*) clear {
  self.resultRequestType = [[BRequestType alloc] init];
  return self;
}
- (BRequestTypeBuilder*) clone {
  return [BRequestType builderWithPrototype:resultRequestType];
}
- (BRequestType*) defaultInstance {
  return [BRequestType defaultInstance];
}
- (BRequestType*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BRequestType*) buildPartial {
  BRequestType* returnMe = resultRequestType;
  self.resultRequestType = nil;
  return returnMe;
}
- (BRequestTypeBuilder*) mergeFrom:(BRequestType*) other {
  if (other == [BRequestType defaultInstance]) {
    return self;
  }
  if (other.hasSessionRequest) {
    [self mergeSessionRequest:other.sessionRequest];
  }
  if (other.hasUserEventBatch) {
    [self mergeUserEventBatch:other.userEventBatch];
  }
  if (other.hasUserProfileUpdate) {
    [self mergeUserProfileUpdate:other.userProfileUpdate];
  }
  if (other.hasUserProfileQuery) {
    [self mergeUserProfileQuery:other.userProfileQuery];
  }
  if (other.hasConfirmationRequest) {
    [self mergeConfirmationRequest:other.confirmationRequest];
  }
  if (other.hasMessageSendRequest) {
    [self mergeMessageSendRequest:other.messageSendRequest];
  }
  if (other.hasMessageFetchRequest) {
    [self mergeMessageFetchRequest:other.messageFetchRequest];
  }
  if (other.hasDebugMessage) {
    [self mergeDebugMessage:other.debugMessage];
  }
  if (other.hasImageUpload) {
    [self mergeImageUpload:other.imageUpload];
  }
  if (other.hasAcceptInviteRequest) {
    [self mergeAcceptInviteRequest:other.acceptInviteRequest];
  }
  if (other.hasFeedPostFetchRequest) {
    [self mergeFeedPostFetchRequest:other.feedPostFetchRequest];
  }
  if (other.hasFeedPostUpdateRequest) {
    [self mergeFeedPostUpdateRequest:other.feedPostUpdateRequest];
  }
  if (other.hasAutocompleteRequest) {
    [self mergeAutocompleteRequest:other.autocompleteRequest];
  }
  if (other.hasEntityTagUpdate) {
    [self mergeEntityTagUpdate:other.entityTagUpdate];
  }
  if (other.hasUserSearchRequest) {
    [self mergeUserSearchRequest:other.userSearchRequest];
  }
  if (other.hasPushConnect) {
    [self mergePushConnect:other.pushConnect];
  }
  if (other.hasPushDisconnect) {
    [self mergePushDisconnect:other.pushDisconnect];
  }
  if (other.hasConversationRequest) {
    [self mergeConversationRequest:other.conversationRequest];
  }
  if (other.hasFetchConversations) {
    [self mergeFetchConversations:other.fetchConversations];
  }
  if (other.hasUserReview) {
    [self mergeUserReview:other.userReview];
  }
  if (other.hasUpdateConversationStatus) {
    [self mergeUpdateConversationStatus:other.updateConversationStatus];
  }
  if (other.hasUserCardInfo) {
    [self mergeUserCardInfo:other.userCardInfo];
  }
  if (other.hasChargeRequest) {
    [self mergeChargeRequest:other.chargeRequest];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BRequestTypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BRequestTypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BSessionRequestBuilder* subBuilder = [BSessionRequest builder];
        if (self.hasSessionRequest) {
          [subBuilder mergeFrom:self.sessionRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSessionRequest:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        BUserEventBatchBuilder* subBuilder = [BUserEventBatch builder];
        if (self.hasUserEventBatch) {
          [subBuilder mergeFrom:self.userEventBatch];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserEventBatch:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        BUserProfileUpdateBuilder* subBuilder = [BUserProfileUpdate builder];
        if (self.hasUserProfileUpdate) {
          [subBuilder mergeFrom:self.userProfileUpdate];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserProfileUpdate:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        BUserProfileQueryBuilder* subBuilder = [BUserProfileQuery builder];
        if (self.hasUserProfileQuery) {
          [subBuilder mergeFrom:self.userProfileQuery];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserProfileQuery:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        BConfirmationRequestBuilder* subBuilder = [BConfirmationRequest builder];
        if (self.hasConfirmationRequest) {
          [subBuilder mergeFrom:self.confirmationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setConfirmationRequest:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        BUserMessageUpdateBuilder* subBuilder = [BUserMessageUpdate builder];
        if (self.hasMessageSendRequest) {
          [subBuilder mergeFrom:self.messageSendRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMessageSendRequest:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        BUserMessageUpdateBuilder* subBuilder = [BUserMessageUpdate builder];
        if (self.hasMessageFetchRequest) {
          [subBuilder mergeFrom:self.messageFetchRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMessageFetchRequest:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        BDebugMessageBuilder* subBuilder = [BDebugMessage builder];
        if (self.hasDebugMessage) {
          [subBuilder mergeFrom:self.debugMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDebugMessage:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        BImageUploadBuilder* subBuilder = [BImageUpload builder];
        if (self.hasImageUpload) {
          [subBuilder mergeFrom:self.imageUpload];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setImageUpload:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        BAcceptInviteRequestBuilder* subBuilder = [BAcceptInviteRequest builder];
        if (self.hasAcceptInviteRequest) {
          [subBuilder mergeFrom:self.acceptInviteRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAcceptInviteRequest:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        BFeedPostFetchRequestBuilder* subBuilder = [BFeedPostFetchRequest builder];
        if (self.hasFeedPostFetchRequest) {
          [subBuilder mergeFrom:self.feedPostFetchRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFeedPostFetchRequest:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        BFeedPostUpdateRequestBuilder* subBuilder = [BFeedPostUpdateRequest builder];
        if (self.hasFeedPostUpdateRequest) {
          [subBuilder mergeFrom:self.feedPostUpdateRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFeedPostUpdateRequest:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        BAutocompleteRequestBuilder* subBuilder = [BAutocompleteRequest builder];
        if (self.hasAutocompleteRequest) {
          [subBuilder mergeFrom:self.autocompleteRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAutocompleteRequest:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        BEntityTagListBuilder* subBuilder = [BEntityTagList builder];
        if (self.hasEntityTagUpdate) {
          [subBuilder mergeFrom:self.entityTagUpdate];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setEntityTagUpdate:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        BUserSearchRequestBuilder* subBuilder = [BUserSearchRequest builder];
        if (self.hasUserSearchRequest) {
          [subBuilder mergeFrom:self.userSearchRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserSearchRequest:[subBuilder buildPartial]];
        break;
      }
      case 130: {
        BPushConnectBuilder* subBuilder = [BPushConnect builder];
        if (self.hasPushConnect) {
          [subBuilder mergeFrom:self.pushConnect];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPushConnect:[subBuilder buildPartial]];
        break;
      }
      case 138: {
        BPushDisconnectBuilder* subBuilder = [BPushDisconnect builder];
        if (self.hasPushDisconnect) {
          [subBuilder mergeFrom:self.pushDisconnect];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPushDisconnect:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        BConversationRequestBuilder* subBuilder = [BConversationRequest builder];
        if (self.hasConversationRequest) {
          [subBuilder mergeFrom:self.conversationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setConversationRequest:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        BFetchConversationsBuilder* subBuilder = [BFetchConversations builder];
        if (self.hasFetchConversations) {
          [subBuilder mergeFrom:self.fetchConversations];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFetchConversations:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        BUserReviewBuilder* subBuilder = [BUserReview builder];
        if (self.hasUserReview) {
          [subBuilder mergeFrom:self.userReview];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserReview:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        BUpdateConversationStatusBuilder* subBuilder = [BUpdateConversationStatus builder];
        if (self.hasUpdateConversationStatus) {
          [subBuilder mergeFrom:self.updateConversationStatus];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUpdateConversationStatus:[subBuilder buildPartial]];
        break;
      }
      case 178: {
        BUserCardInfoBuilder* subBuilder = [BUserCardInfo builder];
        if (self.hasUserCardInfo) {
          [subBuilder mergeFrom:self.userCardInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserCardInfo:[subBuilder buildPartial]];
        break;
      }
      case 186: {
        BChargeBuilder* subBuilder = [BCharge builder];
        if (self.hasChargeRequest) {
          [subBuilder mergeFrom:self.chargeRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChargeRequest:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionRequest {
  return resultRequestType.hasSessionRequest;
}
- (BSessionRequest*) sessionRequest {
  return resultRequestType.sessionRequest;
}
- (BRequestTypeBuilder*) setSessionRequest:(BSessionRequest*) value {
  resultRequestType.hasSessionRequest = YES;
  resultRequestType.sessionRequest = value;
  return self;
}
- (BRequestTypeBuilder*) setSessionRequestBuilder:(BSessionRequestBuilder*) builderForValue {
  return [self setSessionRequest:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeSessionRequest:(BSessionRequest*) value {
  if (resultRequestType.hasSessionRequest &&
      resultRequestType.sessionRequest != [BSessionRequest defaultInstance]) {
    resultRequestType.sessionRequest =
      [[[BSessionRequest builderWithPrototype:resultRequestType.sessionRequest] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.sessionRequest = value;
  }
  resultRequestType.hasSessionRequest = YES;
  return self;
}
- (BRequestTypeBuilder*) clearSessionRequest {
  resultRequestType.hasSessionRequest = NO;
  resultRequestType.sessionRequest = [BSessionRequest defaultInstance];
  return self;
}
- (BOOL) hasUserEventBatch {
  return resultRequestType.hasUserEventBatch;
}
- (BUserEventBatch*) userEventBatch {
  return resultRequestType.userEventBatch;
}
- (BRequestTypeBuilder*) setUserEventBatch:(BUserEventBatch*) value {
  resultRequestType.hasUserEventBatch = YES;
  resultRequestType.userEventBatch = value;
  return self;
}
- (BRequestTypeBuilder*) setUserEventBatchBuilder:(BUserEventBatchBuilder*) builderForValue {
  return [self setUserEventBatch:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeUserEventBatch:(BUserEventBatch*) value {
  if (resultRequestType.hasUserEventBatch &&
      resultRequestType.userEventBatch != [BUserEventBatch defaultInstance]) {
    resultRequestType.userEventBatch =
      [[[BUserEventBatch builderWithPrototype:resultRequestType.userEventBatch] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.userEventBatch = value;
  }
  resultRequestType.hasUserEventBatch = YES;
  return self;
}
- (BRequestTypeBuilder*) clearUserEventBatch {
  resultRequestType.hasUserEventBatch = NO;
  resultRequestType.userEventBatch = [BUserEventBatch defaultInstance];
  return self;
}
- (BOOL) hasUserProfileUpdate {
  return resultRequestType.hasUserProfileUpdate;
}
- (BUserProfileUpdate*) userProfileUpdate {
  return resultRequestType.userProfileUpdate;
}
- (BRequestTypeBuilder*) setUserProfileUpdate:(BUserProfileUpdate*) value {
  resultRequestType.hasUserProfileUpdate = YES;
  resultRequestType.userProfileUpdate = value;
  return self;
}
- (BRequestTypeBuilder*) setUserProfileUpdateBuilder:(BUserProfileUpdateBuilder*) builderForValue {
  return [self setUserProfileUpdate:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeUserProfileUpdate:(BUserProfileUpdate*) value {
  if (resultRequestType.hasUserProfileUpdate &&
      resultRequestType.userProfileUpdate != [BUserProfileUpdate defaultInstance]) {
    resultRequestType.userProfileUpdate =
      [[[BUserProfileUpdate builderWithPrototype:resultRequestType.userProfileUpdate] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.userProfileUpdate = value;
  }
  resultRequestType.hasUserProfileUpdate = YES;
  return self;
}
- (BRequestTypeBuilder*) clearUserProfileUpdate {
  resultRequestType.hasUserProfileUpdate = NO;
  resultRequestType.userProfileUpdate = [BUserProfileUpdate defaultInstance];
  return self;
}
- (BOOL) hasUserProfileQuery {
  return resultRequestType.hasUserProfileQuery;
}
- (BUserProfileQuery*) userProfileQuery {
  return resultRequestType.userProfileQuery;
}
- (BRequestTypeBuilder*) setUserProfileQuery:(BUserProfileQuery*) value {
  resultRequestType.hasUserProfileQuery = YES;
  resultRequestType.userProfileQuery = value;
  return self;
}
- (BRequestTypeBuilder*) setUserProfileQueryBuilder:(BUserProfileQueryBuilder*) builderForValue {
  return [self setUserProfileQuery:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeUserProfileQuery:(BUserProfileQuery*) value {
  if (resultRequestType.hasUserProfileQuery &&
      resultRequestType.userProfileQuery != [BUserProfileQuery defaultInstance]) {
    resultRequestType.userProfileQuery =
      [[[BUserProfileQuery builderWithPrototype:resultRequestType.userProfileQuery] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.userProfileQuery = value;
  }
  resultRequestType.hasUserProfileQuery = YES;
  return self;
}
- (BRequestTypeBuilder*) clearUserProfileQuery {
  resultRequestType.hasUserProfileQuery = NO;
  resultRequestType.userProfileQuery = [BUserProfileQuery defaultInstance];
  return self;
}
- (BOOL) hasConfirmationRequest {
  return resultRequestType.hasConfirmationRequest;
}
- (BConfirmationRequest*) confirmationRequest {
  return resultRequestType.confirmationRequest;
}
- (BRequestTypeBuilder*) setConfirmationRequest:(BConfirmationRequest*) value {
  resultRequestType.hasConfirmationRequest = YES;
  resultRequestType.confirmationRequest = value;
  return self;
}
- (BRequestTypeBuilder*) setConfirmationRequestBuilder:(BConfirmationRequestBuilder*) builderForValue {
  return [self setConfirmationRequest:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeConfirmationRequest:(BConfirmationRequest*) value {
  if (resultRequestType.hasConfirmationRequest &&
      resultRequestType.confirmationRequest != [BConfirmationRequest defaultInstance]) {
    resultRequestType.confirmationRequest =
      [[[BConfirmationRequest builderWithPrototype:resultRequestType.confirmationRequest] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.confirmationRequest = value;
  }
  resultRequestType.hasConfirmationRequest = YES;
  return self;
}
- (BRequestTypeBuilder*) clearConfirmationRequest {
  resultRequestType.hasConfirmationRequest = NO;
  resultRequestType.confirmationRequest = [BConfirmationRequest defaultInstance];
  return self;
}
- (BOOL) hasMessageSendRequest {
  return resultRequestType.hasMessageSendRequest;
}
- (BUserMessageUpdate*) messageSendRequest {
  return resultRequestType.messageSendRequest;
}
- (BRequestTypeBuilder*) setMessageSendRequest:(BUserMessageUpdate*) value {
  resultRequestType.hasMessageSendRequest = YES;
  resultRequestType.messageSendRequest = value;
  return self;
}
- (BRequestTypeBuilder*) setMessageSendRequestBuilder:(BUserMessageUpdateBuilder*) builderForValue {
  return [self setMessageSendRequest:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeMessageSendRequest:(BUserMessageUpdate*) value {
  if (resultRequestType.hasMessageSendRequest &&
      resultRequestType.messageSendRequest != [BUserMessageUpdate defaultInstance]) {
    resultRequestType.messageSendRequest =
      [[[BUserMessageUpdate builderWithPrototype:resultRequestType.messageSendRequest] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.messageSendRequest = value;
  }
  resultRequestType.hasMessageSendRequest = YES;
  return self;
}
- (BRequestTypeBuilder*) clearMessageSendRequest {
  resultRequestType.hasMessageSendRequest = NO;
  resultRequestType.messageSendRequest = [BUserMessageUpdate defaultInstance];
  return self;
}
- (BOOL) hasMessageFetchRequest {
  return resultRequestType.hasMessageFetchRequest;
}
- (BUserMessageUpdate*) messageFetchRequest {
  return resultRequestType.messageFetchRequest;
}
- (BRequestTypeBuilder*) setMessageFetchRequest:(BUserMessageUpdate*) value {
  resultRequestType.hasMessageFetchRequest = YES;
  resultRequestType.messageFetchRequest = value;
  return self;
}
- (BRequestTypeBuilder*) setMessageFetchRequestBuilder:(BUserMessageUpdateBuilder*) builderForValue {
  return [self setMessageFetchRequest:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeMessageFetchRequest:(BUserMessageUpdate*) value {
  if (resultRequestType.hasMessageFetchRequest &&
      resultRequestType.messageFetchRequest != [BUserMessageUpdate defaultInstance]) {
    resultRequestType.messageFetchRequest =
      [[[BUserMessageUpdate builderWithPrototype:resultRequestType.messageFetchRequest] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.messageFetchRequest = value;
  }
  resultRequestType.hasMessageFetchRequest = YES;
  return self;
}
- (BRequestTypeBuilder*) clearMessageFetchRequest {
  resultRequestType.hasMessageFetchRequest = NO;
  resultRequestType.messageFetchRequest = [BUserMessageUpdate defaultInstance];
  return self;
}
- (BOOL) hasDebugMessage {
  return resultRequestType.hasDebugMessage;
}
- (BDebugMessage*) debugMessage {
  return resultRequestType.debugMessage;
}
- (BRequestTypeBuilder*) setDebugMessage:(BDebugMessage*) value {
  resultRequestType.hasDebugMessage = YES;
  resultRequestType.debugMessage = value;
  return self;
}
- (BRequestTypeBuilder*) setDebugMessageBuilder:(BDebugMessageBuilder*) builderForValue {
  return [self setDebugMessage:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeDebugMessage:(BDebugMessage*) value {
  if (resultRequestType.hasDebugMessage &&
      resultRequestType.debugMessage != [BDebugMessage defaultInstance]) {
    resultRequestType.debugMessage =
      [[[BDebugMessage builderWithPrototype:resultRequestType.debugMessage] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.debugMessage = value;
  }
  resultRequestType.hasDebugMessage = YES;
  return self;
}
- (BRequestTypeBuilder*) clearDebugMessage {
  resultRequestType.hasDebugMessage = NO;
  resultRequestType.debugMessage = [BDebugMessage defaultInstance];
  return self;
}
- (BOOL) hasImageUpload {
  return resultRequestType.hasImageUpload;
}
- (BImageUpload*) imageUpload {
  return resultRequestType.imageUpload;
}
- (BRequestTypeBuilder*) setImageUpload:(BImageUpload*) value {
  resultRequestType.hasImageUpload = YES;
  resultRequestType.imageUpload = value;
  return self;
}
- (BRequestTypeBuilder*) setImageUploadBuilder:(BImageUploadBuilder*) builderForValue {
  return [self setImageUpload:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeImageUpload:(BImageUpload*) value {
  if (resultRequestType.hasImageUpload &&
      resultRequestType.imageUpload != [BImageUpload defaultInstance]) {
    resultRequestType.imageUpload =
      [[[BImageUpload builderWithPrototype:resultRequestType.imageUpload] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.imageUpload = value;
  }
  resultRequestType.hasImageUpload = YES;
  return self;
}
- (BRequestTypeBuilder*) clearImageUpload {
  resultRequestType.hasImageUpload = NO;
  resultRequestType.imageUpload = [BImageUpload defaultInstance];
  return self;
}
- (BOOL) hasAcceptInviteRequest {
  return resultRequestType.hasAcceptInviteRequest;
}
- (BAcceptInviteRequest*) acceptInviteRequest {
  return resultRequestType.acceptInviteRequest;
}
- (BRequestTypeBuilder*) setAcceptInviteRequest:(BAcceptInviteRequest*) value {
  resultRequestType.hasAcceptInviteRequest = YES;
  resultRequestType.acceptInviteRequest = value;
  return self;
}
- (BRequestTypeBuilder*) setAcceptInviteRequestBuilder:(BAcceptInviteRequestBuilder*) builderForValue {
  return [self setAcceptInviteRequest:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeAcceptInviteRequest:(BAcceptInviteRequest*) value {
  if (resultRequestType.hasAcceptInviteRequest &&
      resultRequestType.acceptInviteRequest != [BAcceptInviteRequest defaultInstance]) {
    resultRequestType.acceptInviteRequest =
      [[[BAcceptInviteRequest builderWithPrototype:resultRequestType.acceptInviteRequest] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.acceptInviteRequest = value;
  }
  resultRequestType.hasAcceptInviteRequest = YES;
  return self;
}
- (BRequestTypeBuilder*) clearAcceptInviteRequest {
  resultRequestType.hasAcceptInviteRequest = NO;
  resultRequestType.acceptInviteRequest = [BAcceptInviteRequest defaultInstance];
  return self;
}
- (BOOL) hasFeedPostFetchRequest {
  return resultRequestType.hasFeedPostFetchRequest;
}
- (BFeedPostFetchRequest*) feedPostFetchRequest {
  return resultRequestType.feedPostFetchRequest;
}
- (BRequestTypeBuilder*) setFeedPostFetchRequest:(BFeedPostFetchRequest*) value {
  resultRequestType.hasFeedPostFetchRequest = YES;
  resultRequestType.feedPostFetchRequest = value;
  return self;
}
- (BRequestTypeBuilder*) setFeedPostFetchRequestBuilder:(BFeedPostFetchRequestBuilder*) builderForValue {
  return [self setFeedPostFetchRequest:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeFeedPostFetchRequest:(BFeedPostFetchRequest*) value {
  if (resultRequestType.hasFeedPostFetchRequest &&
      resultRequestType.feedPostFetchRequest != [BFeedPostFetchRequest defaultInstance]) {
    resultRequestType.feedPostFetchRequest =
      [[[BFeedPostFetchRequest builderWithPrototype:resultRequestType.feedPostFetchRequest] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.feedPostFetchRequest = value;
  }
  resultRequestType.hasFeedPostFetchRequest = YES;
  return self;
}
- (BRequestTypeBuilder*) clearFeedPostFetchRequest {
  resultRequestType.hasFeedPostFetchRequest = NO;
  resultRequestType.feedPostFetchRequest = [BFeedPostFetchRequest defaultInstance];
  return self;
}
- (BOOL) hasFeedPostUpdateRequest {
  return resultRequestType.hasFeedPostUpdateRequest;
}
- (BFeedPostUpdateRequest*) feedPostUpdateRequest {
  return resultRequestType.feedPostUpdateRequest;
}
- (BRequestTypeBuilder*) setFeedPostUpdateRequest:(BFeedPostUpdateRequest*) value {
  resultRequestType.hasFeedPostUpdateRequest = YES;
  resultRequestType.feedPostUpdateRequest = value;
  return self;
}
- (BRequestTypeBuilder*) setFeedPostUpdateRequestBuilder:(BFeedPostUpdateRequestBuilder*) builderForValue {
  return [self setFeedPostUpdateRequest:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeFeedPostUpdateRequest:(BFeedPostUpdateRequest*) value {
  if (resultRequestType.hasFeedPostUpdateRequest &&
      resultRequestType.feedPostUpdateRequest != [BFeedPostUpdateRequest defaultInstance]) {
    resultRequestType.feedPostUpdateRequest =
      [[[BFeedPostUpdateRequest builderWithPrototype:resultRequestType.feedPostUpdateRequest] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.feedPostUpdateRequest = value;
  }
  resultRequestType.hasFeedPostUpdateRequest = YES;
  return self;
}
- (BRequestTypeBuilder*) clearFeedPostUpdateRequest {
  resultRequestType.hasFeedPostUpdateRequest = NO;
  resultRequestType.feedPostUpdateRequest = [BFeedPostUpdateRequest defaultInstance];
  return self;
}
- (BOOL) hasAutocompleteRequest {
  return resultRequestType.hasAutocompleteRequest;
}
- (BAutocompleteRequest*) autocompleteRequest {
  return resultRequestType.autocompleteRequest;
}
- (BRequestTypeBuilder*) setAutocompleteRequest:(BAutocompleteRequest*) value {
  resultRequestType.hasAutocompleteRequest = YES;
  resultRequestType.autocompleteRequest = value;
  return self;
}
- (BRequestTypeBuilder*) setAutocompleteRequestBuilder:(BAutocompleteRequestBuilder*) builderForValue {
  return [self setAutocompleteRequest:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeAutocompleteRequest:(BAutocompleteRequest*) value {
  if (resultRequestType.hasAutocompleteRequest &&
      resultRequestType.autocompleteRequest != [BAutocompleteRequest defaultInstance]) {
    resultRequestType.autocompleteRequest =
      [[[BAutocompleteRequest builderWithPrototype:resultRequestType.autocompleteRequest] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.autocompleteRequest = value;
  }
  resultRequestType.hasAutocompleteRequest = YES;
  return self;
}
- (BRequestTypeBuilder*) clearAutocompleteRequest {
  resultRequestType.hasAutocompleteRequest = NO;
  resultRequestType.autocompleteRequest = [BAutocompleteRequest defaultInstance];
  return self;
}
- (BOOL) hasEntityTagUpdate {
  return resultRequestType.hasEntityTagUpdate;
}
- (BEntityTagList*) entityTagUpdate {
  return resultRequestType.entityTagUpdate;
}
- (BRequestTypeBuilder*) setEntityTagUpdate:(BEntityTagList*) value {
  resultRequestType.hasEntityTagUpdate = YES;
  resultRequestType.entityTagUpdate = value;
  return self;
}
- (BRequestTypeBuilder*) setEntityTagUpdateBuilder:(BEntityTagListBuilder*) builderForValue {
  return [self setEntityTagUpdate:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeEntityTagUpdate:(BEntityTagList*) value {
  if (resultRequestType.hasEntityTagUpdate &&
      resultRequestType.entityTagUpdate != [BEntityTagList defaultInstance]) {
    resultRequestType.entityTagUpdate =
      [[[BEntityTagList builderWithPrototype:resultRequestType.entityTagUpdate] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.entityTagUpdate = value;
  }
  resultRequestType.hasEntityTagUpdate = YES;
  return self;
}
- (BRequestTypeBuilder*) clearEntityTagUpdate {
  resultRequestType.hasEntityTagUpdate = NO;
  resultRequestType.entityTagUpdate = [BEntityTagList defaultInstance];
  return self;
}
- (BOOL) hasUserSearchRequest {
  return resultRequestType.hasUserSearchRequest;
}
- (BUserSearchRequest*) userSearchRequest {
  return resultRequestType.userSearchRequest;
}
- (BRequestTypeBuilder*) setUserSearchRequest:(BUserSearchRequest*) value {
  resultRequestType.hasUserSearchRequest = YES;
  resultRequestType.userSearchRequest = value;
  return self;
}
- (BRequestTypeBuilder*) setUserSearchRequestBuilder:(BUserSearchRequestBuilder*) builderForValue {
  return [self setUserSearchRequest:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeUserSearchRequest:(BUserSearchRequest*) value {
  if (resultRequestType.hasUserSearchRequest &&
      resultRequestType.userSearchRequest != [BUserSearchRequest defaultInstance]) {
    resultRequestType.userSearchRequest =
      [[[BUserSearchRequest builderWithPrototype:resultRequestType.userSearchRequest] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.userSearchRequest = value;
  }
  resultRequestType.hasUserSearchRequest = YES;
  return self;
}
- (BRequestTypeBuilder*) clearUserSearchRequest {
  resultRequestType.hasUserSearchRequest = NO;
  resultRequestType.userSearchRequest = [BUserSearchRequest defaultInstance];
  return self;
}
- (BOOL) hasPushConnect {
  return resultRequestType.hasPushConnect;
}
- (BPushConnect*) pushConnect {
  return resultRequestType.pushConnect;
}
- (BRequestTypeBuilder*) setPushConnect:(BPushConnect*) value {
  resultRequestType.hasPushConnect = YES;
  resultRequestType.pushConnect = value;
  return self;
}
- (BRequestTypeBuilder*) setPushConnectBuilder:(BPushConnectBuilder*) builderForValue {
  return [self setPushConnect:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergePushConnect:(BPushConnect*) value {
  if (resultRequestType.hasPushConnect &&
      resultRequestType.pushConnect != [BPushConnect defaultInstance]) {
    resultRequestType.pushConnect =
      [[[BPushConnect builderWithPrototype:resultRequestType.pushConnect] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.pushConnect = value;
  }
  resultRequestType.hasPushConnect = YES;
  return self;
}
- (BRequestTypeBuilder*) clearPushConnect {
  resultRequestType.hasPushConnect = NO;
  resultRequestType.pushConnect = [BPushConnect defaultInstance];
  return self;
}
- (BOOL) hasPushDisconnect {
  return resultRequestType.hasPushDisconnect;
}
- (BPushDisconnect*) pushDisconnect {
  return resultRequestType.pushDisconnect;
}
- (BRequestTypeBuilder*) setPushDisconnect:(BPushDisconnect*) value {
  resultRequestType.hasPushDisconnect = YES;
  resultRequestType.pushDisconnect = value;
  return self;
}
- (BRequestTypeBuilder*) setPushDisconnectBuilder:(BPushDisconnectBuilder*) builderForValue {
  return [self setPushDisconnect:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergePushDisconnect:(BPushDisconnect*) value {
  if (resultRequestType.hasPushDisconnect &&
      resultRequestType.pushDisconnect != [BPushDisconnect defaultInstance]) {
    resultRequestType.pushDisconnect =
      [[[BPushDisconnect builderWithPrototype:resultRequestType.pushDisconnect] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.pushDisconnect = value;
  }
  resultRequestType.hasPushDisconnect = YES;
  return self;
}
- (BRequestTypeBuilder*) clearPushDisconnect {
  resultRequestType.hasPushDisconnect = NO;
  resultRequestType.pushDisconnect = [BPushDisconnect defaultInstance];
  return self;
}
- (BOOL) hasConversationRequest {
  return resultRequestType.hasConversationRequest;
}
- (BConversationRequest*) conversationRequest {
  return resultRequestType.conversationRequest;
}
- (BRequestTypeBuilder*) setConversationRequest:(BConversationRequest*) value {
  resultRequestType.hasConversationRequest = YES;
  resultRequestType.conversationRequest = value;
  return self;
}
- (BRequestTypeBuilder*) setConversationRequestBuilder:(BConversationRequestBuilder*) builderForValue {
  return [self setConversationRequest:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeConversationRequest:(BConversationRequest*) value {
  if (resultRequestType.hasConversationRequest &&
      resultRequestType.conversationRequest != [BConversationRequest defaultInstance]) {
    resultRequestType.conversationRequest =
      [[[BConversationRequest builderWithPrototype:resultRequestType.conversationRequest] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.conversationRequest = value;
  }
  resultRequestType.hasConversationRequest = YES;
  return self;
}
- (BRequestTypeBuilder*) clearConversationRequest {
  resultRequestType.hasConversationRequest = NO;
  resultRequestType.conversationRequest = [BConversationRequest defaultInstance];
  return self;
}
- (BOOL) hasFetchConversations {
  return resultRequestType.hasFetchConversations;
}
- (BFetchConversations*) fetchConversations {
  return resultRequestType.fetchConversations;
}
- (BRequestTypeBuilder*) setFetchConversations:(BFetchConversations*) value {
  resultRequestType.hasFetchConversations = YES;
  resultRequestType.fetchConversations = value;
  return self;
}
- (BRequestTypeBuilder*) setFetchConversationsBuilder:(BFetchConversationsBuilder*) builderForValue {
  return [self setFetchConversations:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeFetchConversations:(BFetchConversations*) value {
  if (resultRequestType.hasFetchConversations &&
      resultRequestType.fetchConversations != [BFetchConversations defaultInstance]) {
    resultRequestType.fetchConversations =
      [[[BFetchConversations builderWithPrototype:resultRequestType.fetchConversations] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.fetchConversations = value;
  }
  resultRequestType.hasFetchConversations = YES;
  return self;
}
- (BRequestTypeBuilder*) clearFetchConversations {
  resultRequestType.hasFetchConversations = NO;
  resultRequestType.fetchConversations = [BFetchConversations defaultInstance];
  return self;
}
- (BOOL) hasUserReview {
  return resultRequestType.hasUserReview;
}
- (BUserReview*) userReview {
  return resultRequestType.userReview;
}
- (BRequestTypeBuilder*) setUserReview:(BUserReview*) value {
  resultRequestType.hasUserReview = YES;
  resultRequestType.userReview = value;
  return self;
}
- (BRequestTypeBuilder*) setUserReviewBuilder:(BUserReviewBuilder*) builderForValue {
  return [self setUserReview:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeUserReview:(BUserReview*) value {
  if (resultRequestType.hasUserReview &&
      resultRequestType.userReview != [BUserReview defaultInstance]) {
    resultRequestType.userReview =
      [[[BUserReview builderWithPrototype:resultRequestType.userReview] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.userReview = value;
  }
  resultRequestType.hasUserReview = YES;
  return self;
}
- (BRequestTypeBuilder*) clearUserReview {
  resultRequestType.hasUserReview = NO;
  resultRequestType.userReview = [BUserReview defaultInstance];
  return self;
}
- (BOOL) hasUpdateConversationStatus {
  return resultRequestType.hasUpdateConversationStatus;
}
- (BUpdateConversationStatus*) updateConversationStatus {
  return resultRequestType.updateConversationStatus;
}
- (BRequestTypeBuilder*) setUpdateConversationStatus:(BUpdateConversationStatus*) value {
  resultRequestType.hasUpdateConversationStatus = YES;
  resultRequestType.updateConversationStatus = value;
  return self;
}
- (BRequestTypeBuilder*) setUpdateConversationStatusBuilder:(BUpdateConversationStatusBuilder*) builderForValue {
  return [self setUpdateConversationStatus:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeUpdateConversationStatus:(BUpdateConversationStatus*) value {
  if (resultRequestType.hasUpdateConversationStatus &&
      resultRequestType.updateConversationStatus != [BUpdateConversationStatus defaultInstance]) {
    resultRequestType.updateConversationStatus =
      [[[BUpdateConversationStatus builderWithPrototype:resultRequestType.updateConversationStatus] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.updateConversationStatus = value;
  }
  resultRequestType.hasUpdateConversationStatus = YES;
  return self;
}
- (BRequestTypeBuilder*) clearUpdateConversationStatus {
  resultRequestType.hasUpdateConversationStatus = NO;
  resultRequestType.updateConversationStatus = [BUpdateConversationStatus defaultInstance];
  return self;
}
- (BOOL) hasUserCardInfo {
  return resultRequestType.hasUserCardInfo;
}
- (BUserCardInfo*) userCardInfo {
  return resultRequestType.userCardInfo;
}
- (BRequestTypeBuilder*) setUserCardInfo:(BUserCardInfo*) value {
  resultRequestType.hasUserCardInfo = YES;
  resultRequestType.userCardInfo = value;
  return self;
}
- (BRequestTypeBuilder*) setUserCardInfoBuilder:(BUserCardInfoBuilder*) builderForValue {
  return [self setUserCardInfo:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeUserCardInfo:(BUserCardInfo*) value {
  if (resultRequestType.hasUserCardInfo &&
      resultRequestType.userCardInfo != [BUserCardInfo defaultInstance]) {
    resultRequestType.userCardInfo =
      [[[BUserCardInfo builderWithPrototype:resultRequestType.userCardInfo] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.userCardInfo = value;
  }
  resultRequestType.hasUserCardInfo = YES;
  return self;
}
- (BRequestTypeBuilder*) clearUserCardInfo {
  resultRequestType.hasUserCardInfo = NO;
  resultRequestType.userCardInfo = [BUserCardInfo defaultInstance];
  return self;
}
- (BOOL) hasChargeRequest {
  return resultRequestType.hasChargeRequest;
}
- (BCharge*) chargeRequest {
  return resultRequestType.chargeRequest;
}
- (BRequestTypeBuilder*) setChargeRequest:(BCharge*) value {
  resultRequestType.hasChargeRequest = YES;
  resultRequestType.chargeRequest = value;
  return self;
}
- (BRequestTypeBuilder*) setChargeRequestBuilder:(BChargeBuilder*) builderForValue {
  return [self setChargeRequest:[builderForValue build]];
}
- (BRequestTypeBuilder*) mergeChargeRequest:(BCharge*) value {
  if (resultRequestType.hasChargeRequest &&
      resultRequestType.chargeRequest != [BCharge defaultInstance]) {
    resultRequestType.chargeRequest =
      [[[BCharge builderWithPrototype:resultRequestType.chargeRequest] mergeFrom:value] buildPartial];
  } else {
    resultRequestType.chargeRequest = value;
  }
  resultRequestType.hasChargeRequest = YES;
  return self;
}
- (BRequestTypeBuilder*) clearChargeRequest {
  resultRequestType.hasChargeRequest = NO;
  resultRequestType.chargeRequest = [BCharge defaultInstance];
  return self;
}
@end

@interface BServerRequest ()
@property (strong) NSString* sessionToken;
@property (strong) BRequestType* requestType;
@end

@implementation BServerRequest

- (BOOL) hasSessionToken {
  return !!hasSessionToken_;
}
- (void) setHasSessionToken:(BOOL) _value_ {
  hasSessionToken_ = !!_value_;
}
@synthesize sessionToken;
- (BOOL) hasRequestType {
  return !!hasRequestType_;
}
- (void) setHasRequestType:(BOOL) _value_ {
  hasRequestType_ = !!_value_;
}
@synthesize requestType;
- (instancetype) init {
  if ((self = [super init])) {
    self.sessionToken = @"";
    self.requestType = [BRequestType defaultInstance];
  }
  return self;
}
static BServerRequest* defaultBServerRequestInstance = nil;
+ (void) initialize {
  if (self == [BServerRequest class]) {
    defaultBServerRequestInstance = [[BServerRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBServerRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBServerRequestInstance;
}
- (BOOL) isInitialized {
  if (self.hasRequestType) {
    if (!self.requestType.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionToken) {
    [output writeString:1 value:self.sessionToken];
  }
  if (self.hasRequestType) {
    [output writeMessage:2 value:self.requestType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSessionToken) {
    size_ += computeStringSize(1, self.sessionToken);
  }
  if (self.hasRequestType) {
    size_ += computeMessageSize(2, self.requestType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BServerRequest*) parseFromData:(NSData*) data {
  return (BServerRequest*)[[[BServerRequest builder] mergeFromData:data] build];
}
+ (BServerRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BServerRequest*)[[[BServerRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BServerRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BServerRequest*)[[[BServerRequest builder] mergeFromInputStream:input] build];
}
+ (BServerRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BServerRequest*)[[[BServerRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BServerRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BServerRequest*)[[[BServerRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BServerRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BServerRequest*)[[[BServerRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BServerRequestBuilder*) builder {
  return [[BServerRequestBuilder alloc] init];
}
+ (BServerRequestBuilder*) builderWithPrototype:(BServerRequest*) prototype {
  return [[BServerRequest builder] mergeFrom:prototype];
}
- (BServerRequestBuilder*) builder {
  return [BServerRequest builder];
}
- (BServerRequestBuilder*) toBuilder {
  return [BServerRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSessionToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionToken", self.sessionToken];
  }
  if (self.hasRequestType) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestType"];
    [self.requestType writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSessionToken) {
    [dictionary setObject: self.sessionToken forKey: @"sessionToken"];
  }
  if (self.hasRequestType) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requestType storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requestType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BServerRequest class]]) {
    return NO;
  }
  BServerRequest *otherMessage = other;
  return
      self.hasSessionToken == otherMessage.hasSessionToken &&
      (!self.hasSessionToken || [self.sessionToken isEqual:otherMessage.sessionToken]) &&
      self.hasRequestType == otherMessage.hasRequestType &&
      (!self.hasRequestType || [self.requestType isEqual:otherMessage.requestType]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSessionToken) {
    hashCode = hashCode * 31 + [self.sessionToken hash];
  }
  if (self.hasRequestType) {
    hashCode = hashCode * 31 + [self.requestType hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BServerRequestBuilder()
@property (strong) BServerRequest* resultServerRequest;
@end

@implementation BServerRequestBuilder
@synthesize resultServerRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultServerRequest = [[BServerRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultServerRequest;
}
- (BServerRequestBuilder*) clear {
  self.resultServerRequest = [[BServerRequest alloc] init];
  return self;
}
- (BServerRequestBuilder*) clone {
  return [BServerRequest builderWithPrototype:resultServerRequest];
}
- (BServerRequest*) defaultInstance {
  return [BServerRequest defaultInstance];
}
- (BServerRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BServerRequest*) buildPartial {
  BServerRequest* returnMe = resultServerRequest;
  self.resultServerRequest = nil;
  return returnMe;
}
- (BServerRequestBuilder*) mergeFrom:(BServerRequest*) other {
  if (other == [BServerRequest defaultInstance]) {
    return self;
  }
  if (other.hasSessionToken) {
    [self setSessionToken:other.sessionToken];
  }
  if (other.hasRequestType) {
    [self mergeRequestType:other.requestType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BServerRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BServerRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSessionToken:[input readString]];
        break;
      }
      case 18: {
        BRequestTypeBuilder* subBuilder = [BRequestType builder];
        if (self.hasRequestType) {
          [subBuilder mergeFrom:self.requestType];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequestType:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionToken {
  return resultServerRequest.hasSessionToken;
}
- (NSString*) sessionToken {
  return resultServerRequest.sessionToken;
}
- (BServerRequestBuilder*) setSessionToken:(NSString*) value {
  resultServerRequest.hasSessionToken = YES;
  resultServerRequest.sessionToken = value;
  return self;
}
- (BServerRequestBuilder*) clearSessionToken {
  resultServerRequest.hasSessionToken = NO;
  resultServerRequest.sessionToken = @"";
  return self;
}
- (BOOL) hasRequestType {
  return resultServerRequest.hasRequestType;
}
- (BRequestType*) requestType {
  return resultServerRequest.requestType;
}
- (BServerRequestBuilder*) setRequestType:(BRequestType*) value {
  resultServerRequest.hasRequestType = YES;
  resultServerRequest.requestType = value;
  return self;
}
- (BServerRequestBuilder*) setRequestTypeBuilder:(BRequestTypeBuilder*) builderForValue {
  return [self setRequestType:[builderForValue build]];
}
- (BServerRequestBuilder*) mergeRequestType:(BRequestType*) value {
  if (resultServerRequest.hasRequestType &&
      resultServerRequest.requestType != [BRequestType defaultInstance]) {
    resultServerRequest.requestType =
      [[[BRequestType builderWithPrototype:resultServerRequest.requestType] mergeFrom:value] buildPartial];
  } else {
    resultServerRequest.requestType = value;
  }
  resultServerRequest.hasRequestType = YES;
  return self;
}
- (BServerRequestBuilder*) clearRequestType {
  resultServerRequest.hasRequestType = NO;
  resultServerRequest.requestType = [BRequestType defaultInstance];
  return self;
}
@end

@interface BResponseType ()
@property (strong) BSessionResponse* sessionResponse;
@property (strong) BUserEventBatchResponse* userEventBatchResponse;
@property (strong) BUserProfileUpdate* userProfileUpdate;
@property (strong) BUserProfileQuery* userProfileQuery;
@property (strong) BConfirmationRequest* confirmationRequest;
@property (strong) BUserMessageUpdate* userMessageUpdate;
@property (strong) BDebugMessage* debugMessage;
@property (strong) BImageUpload* imageUploadReply;
@property (strong) BAcceptInviteResponse* acceptInviteResponse;
@property (strong) BFeedPostFetchResponse* feedPostFetchResponse;
@property (strong) BFeedPostUpdateResponse* feedPostUpdateResponse;
@property (strong) BAutocompleteResponse* autocompleteResponse;
@property (strong) BUserSearchResponse* userSearchResponse;
@property (strong) BConversationResponse* conversationResponse;
@property (strong) BFetchConversations* fetchConversations;
@property (strong) BUserCardInfo* userCardInfo;
@property (strong) BCharge* chargeResponse;
@end

@implementation BResponseType

- (BOOL) hasSessionResponse {
  return !!hasSessionResponse_;
}
- (void) setHasSessionResponse:(BOOL) _value_ {
  hasSessionResponse_ = !!_value_;
}
@synthesize sessionResponse;
- (BOOL) hasUserEventBatchResponse {
  return !!hasUserEventBatchResponse_;
}
- (void) setHasUserEventBatchResponse:(BOOL) _value_ {
  hasUserEventBatchResponse_ = !!_value_;
}
@synthesize userEventBatchResponse;
- (BOOL) hasUserProfileUpdate {
  return !!hasUserProfileUpdate_;
}
- (void) setHasUserProfileUpdate:(BOOL) _value_ {
  hasUserProfileUpdate_ = !!_value_;
}
@synthesize userProfileUpdate;
- (BOOL) hasUserProfileQuery {
  return !!hasUserProfileQuery_;
}
- (void) setHasUserProfileQuery:(BOOL) _value_ {
  hasUserProfileQuery_ = !!_value_;
}
@synthesize userProfileQuery;
- (BOOL) hasConfirmationRequest {
  return !!hasConfirmationRequest_;
}
- (void) setHasConfirmationRequest:(BOOL) _value_ {
  hasConfirmationRequest_ = !!_value_;
}
@synthesize confirmationRequest;
- (BOOL) hasUserMessageUpdate {
  return !!hasUserMessageUpdate_;
}
- (void) setHasUserMessageUpdate:(BOOL) _value_ {
  hasUserMessageUpdate_ = !!_value_;
}
@synthesize userMessageUpdate;
- (BOOL) hasDebugMessage {
  return !!hasDebugMessage_;
}
- (void) setHasDebugMessage:(BOOL) _value_ {
  hasDebugMessage_ = !!_value_;
}
@synthesize debugMessage;
- (BOOL) hasImageUploadReply {
  return !!hasImageUploadReply_;
}
- (void) setHasImageUploadReply:(BOOL) _value_ {
  hasImageUploadReply_ = !!_value_;
}
@synthesize imageUploadReply;
- (BOOL) hasAcceptInviteResponse {
  return !!hasAcceptInviteResponse_;
}
- (void) setHasAcceptInviteResponse:(BOOL) _value_ {
  hasAcceptInviteResponse_ = !!_value_;
}
@synthesize acceptInviteResponse;
- (BOOL) hasFeedPostFetchResponse {
  return !!hasFeedPostFetchResponse_;
}
- (void) setHasFeedPostFetchResponse:(BOOL) _value_ {
  hasFeedPostFetchResponse_ = !!_value_;
}
@synthesize feedPostFetchResponse;
- (BOOL) hasFeedPostUpdateResponse {
  return !!hasFeedPostUpdateResponse_;
}
- (void) setHasFeedPostUpdateResponse:(BOOL) _value_ {
  hasFeedPostUpdateResponse_ = !!_value_;
}
@synthesize feedPostUpdateResponse;
- (BOOL) hasAutocompleteResponse {
  return !!hasAutocompleteResponse_;
}
- (void) setHasAutocompleteResponse:(BOOL) _value_ {
  hasAutocompleteResponse_ = !!_value_;
}
@synthesize autocompleteResponse;
- (BOOL) hasUserSearchResponse {
  return !!hasUserSearchResponse_;
}
- (void) setHasUserSearchResponse:(BOOL) _value_ {
  hasUserSearchResponse_ = !!_value_;
}
@synthesize userSearchResponse;
- (BOOL) hasConversationResponse {
  return !!hasConversationResponse_;
}
- (void) setHasConversationResponse:(BOOL) _value_ {
  hasConversationResponse_ = !!_value_;
}
@synthesize conversationResponse;
- (BOOL) hasFetchConversations {
  return !!hasFetchConversations_;
}
- (void) setHasFetchConversations:(BOOL) _value_ {
  hasFetchConversations_ = !!_value_;
}
@synthesize fetchConversations;
- (BOOL) hasUserCardInfo {
  return !!hasUserCardInfo_;
}
- (void) setHasUserCardInfo:(BOOL) _value_ {
  hasUserCardInfo_ = !!_value_;
}
@synthesize userCardInfo;
- (BOOL) hasChargeResponse {
  return !!hasChargeResponse_;
}
- (void) setHasChargeResponse:(BOOL) _value_ {
  hasChargeResponse_ = !!_value_;
}
@synthesize chargeResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.sessionResponse = [BSessionResponse defaultInstance];
    self.userEventBatchResponse = [BUserEventBatchResponse defaultInstance];
    self.userProfileUpdate = [BUserProfileUpdate defaultInstance];
    self.userProfileQuery = [BUserProfileQuery defaultInstance];
    self.confirmationRequest = [BConfirmationRequest defaultInstance];
    self.userMessageUpdate = [BUserMessageUpdate defaultInstance];
    self.debugMessage = [BDebugMessage defaultInstance];
    self.imageUploadReply = [BImageUpload defaultInstance];
    self.acceptInviteResponse = [BAcceptInviteResponse defaultInstance];
    self.feedPostFetchResponse = [BFeedPostFetchResponse defaultInstance];
    self.feedPostUpdateResponse = [BFeedPostUpdateResponse defaultInstance];
    self.autocompleteResponse = [BAutocompleteResponse defaultInstance];
    self.userSearchResponse = [BUserSearchResponse defaultInstance];
    self.conversationResponse = [BConversationResponse defaultInstance];
    self.fetchConversations = [BFetchConversations defaultInstance];
    self.userCardInfo = [BUserCardInfo defaultInstance];
    self.chargeResponse = [BCharge defaultInstance];
  }
  return self;
}
static BResponseType* defaultBResponseTypeInstance = nil;
+ (void) initialize {
  if (self == [BResponseType class]) {
    defaultBResponseTypeInstance = [[BResponseType alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBResponseTypeInstance;
}
- (instancetype) defaultInstance {
  return defaultBResponseTypeInstance;
}
- (BOOL) isInitialized {
  if (self.hasSessionResponse) {
    if (!self.sessionResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserEventBatchResponse) {
    if (!self.userEventBatchResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserProfileUpdate) {
    if (!self.userProfileUpdate.isInitialized) {
      return NO;
    }
  }
  if (self.hasConfirmationRequest) {
    if (!self.confirmationRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserMessageUpdate) {
    if (!self.userMessageUpdate.isInitialized) {
      return NO;
    }
  }
  if (self.hasImageUploadReply) {
    if (!self.imageUploadReply.isInitialized) {
      return NO;
    }
  }
  if (self.hasAcceptInviteResponse) {
    if (!self.acceptInviteResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasFeedPostFetchResponse) {
    if (!self.feedPostFetchResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasFeedPostUpdateResponse) {
    if (!self.feedPostUpdateResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserSearchResponse) {
    if (!self.userSearchResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasConversationResponse) {
    if (!self.conversationResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasFetchConversations) {
    if (!self.fetchConversations.isInitialized) {
      return NO;
    }
  }
  if (self.hasChargeResponse) {
    if (!self.chargeResponse.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionResponse) {
    [output writeMessage:1 value:self.sessionResponse];
  }
  if (self.hasUserEventBatchResponse) {
    [output writeMessage:2 value:self.userEventBatchResponse];
  }
  if (self.hasUserProfileUpdate) {
    [output writeMessage:3 value:self.userProfileUpdate];
  }
  if (self.hasUserProfileQuery) {
    [output writeMessage:4 value:self.userProfileQuery];
  }
  if (self.hasConfirmationRequest) {
    [output writeMessage:5 value:self.confirmationRequest];
  }
  if (self.hasUserMessageUpdate) {
    [output writeMessage:6 value:self.userMessageUpdate];
  }
  if (self.hasDebugMessage) {
    [output writeMessage:7 value:self.debugMessage];
  }
  if (self.hasImageUploadReply) {
    [output writeMessage:8 value:self.imageUploadReply];
  }
  if (self.hasAcceptInviteResponse) {
    [output writeMessage:9 value:self.acceptInviteResponse];
  }
  if (self.hasFeedPostFetchResponse) {
    [output writeMessage:10 value:self.feedPostFetchResponse];
  }
  if (self.hasFeedPostUpdateResponse) {
    [output writeMessage:11 value:self.feedPostUpdateResponse];
  }
  if (self.hasAutocompleteResponse) {
    [output writeMessage:12 value:self.autocompleteResponse];
  }
  if (self.hasUserSearchResponse) {
    [output writeMessage:13 value:self.userSearchResponse];
  }
  if (self.hasConversationResponse) {
    [output writeMessage:14 value:self.conversationResponse];
  }
  if (self.hasFetchConversations) {
    [output writeMessage:15 value:self.fetchConversations];
  }
  if (self.hasUserCardInfo) {
    [output writeMessage:16 value:self.userCardInfo];
  }
  if (self.hasChargeResponse) {
    [output writeMessage:17 value:self.chargeResponse];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSessionResponse) {
    size_ += computeMessageSize(1, self.sessionResponse);
  }
  if (self.hasUserEventBatchResponse) {
    size_ += computeMessageSize(2, self.userEventBatchResponse);
  }
  if (self.hasUserProfileUpdate) {
    size_ += computeMessageSize(3, self.userProfileUpdate);
  }
  if (self.hasUserProfileQuery) {
    size_ += computeMessageSize(4, self.userProfileQuery);
  }
  if (self.hasConfirmationRequest) {
    size_ += computeMessageSize(5, self.confirmationRequest);
  }
  if (self.hasUserMessageUpdate) {
    size_ += computeMessageSize(6, self.userMessageUpdate);
  }
  if (self.hasDebugMessage) {
    size_ += computeMessageSize(7, self.debugMessage);
  }
  if (self.hasImageUploadReply) {
    size_ += computeMessageSize(8, self.imageUploadReply);
  }
  if (self.hasAcceptInviteResponse) {
    size_ += computeMessageSize(9, self.acceptInviteResponse);
  }
  if (self.hasFeedPostFetchResponse) {
    size_ += computeMessageSize(10, self.feedPostFetchResponse);
  }
  if (self.hasFeedPostUpdateResponse) {
    size_ += computeMessageSize(11, self.feedPostUpdateResponse);
  }
  if (self.hasAutocompleteResponse) {
    size_ += computeMessageSize(12, self.autocompleteResponse);
  }
  if (self.hasUserSearchResponse) {
    size_ += computeMessageSize(13, self.userSearchResponse);
  }
  if (self.hasConversationResponse) {
    size_ += computeMessageSize(14, self.conversationResponse);
  }
  if (self.hasFetchConversations) {
    size_ += computeMessageSize(15, self.fetchConversations);
  }
  if (self.hasUserCardInfo) {
    size_ += computeMessageSize(16, self.userCardInfo);
  }
  if (self.hasChargeResponse) {
    size_ += computeMessageSize(17, self.chargeResponse);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BResponseType*) parseFromData:(NSData*) data {
  return (BResponseType*)[[[BResponseType builder] mergeFromData:data] build];
}
+ (BResponseType*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BResponseType*)[[[BResponseType builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BResponseType*) parseFromInputStream:(NSInputStream*) input {
  return (BResponseType*)[[[BResponseType builder] mergeFromInputStream:input] build];
}
+ (BResponseType*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BResponseType*)[[[BResponseType builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BResponseType*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BResponseType*)[[[BResponseType builder] mergeFromCodedInputStream:input] build];
}
+ (BResponseType*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BResponseType*)[[[BResponseType builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BResponseTypeBuilder*) builder {
  return [[BResponseTypeBuilder alloc] init];
}
+ (BResponseTypeBuilder*) builderWithPrototype:(BResponseType*) prototype {
  return [[BResponseType builder] mergeFrom:prototype];
}
- (BResponseTypeBuilder*) builder {
  return [BResponseType builder];
}
- (BResponseTypeBuilder*) toBuilder {
  return [BResponseType builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSessionResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"sessionResponse"];
    [self.sessionResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserEventBatchResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"userEventBatchResponse"];
    [self.userEventBatchResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserProfileUpdate) {
    [output appendFormat:@"%@%@ {\n", indent, @"userProfileUpdate"];
    [self.userProfileUpdate writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserProfileQuery) {
    [output appendFormat:@"%@%@ {\n", indent, @"userProfileQuery"];
    [self.userProfileQuery writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasConfirmationRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"confirmationRequest"];
    [self.confirmationRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserMessageUpdate) {
    [output appendFormat:@"%@%@ {\n", indent, @"userMessageUpdate"];
    [self.userMessageUpdate writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDebugMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"debugMessage"];
    [self.debugMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasImageUploadReply) {
    [output appendFormat:@"%@%@ {\n", indent, @"imageUploadReply"];
    [self.imageUploadReply writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAcceptInviteResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"acceptInviteResponse"];
    [self.acceptInviteResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFeedPostFetchResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"feedPostFetchResponse"];
    [self.feedPostFetchResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFeedPostUpdateResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"feedPostUpdateResponse"];
    [self.feedPostUpdateResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAutocompleteResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"autocompleteResponse"];
    [self.autocompleteResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserSearchResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"userSearchResponse"];
    [self.userSearchResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasConversationResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"conversationResponse"];
    [self.conversationResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFetchConversations) {
    [output appendFormat:@"%@%@ {\n", indent, @"fetchConversations"];
    [self.fetchConversations writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserCardInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"userCardInfo"];
    [self.userCardInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasChargeResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"chargeResponse"];
    [self.chargeResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSessionResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.sessionResponse storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"sessionResponse"];
  }
  if (self.hasUserEventBatchResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userEventBatchResponse storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userEventBatchResponse"];
  }
  if (self.hasUserProfileUpdate) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userProfileUpdate storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userProfileUpdate"];
  }
  if (self.hasUserProfileQuery) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userProfileQuery storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userProfileQuery"];
  }
  if (self.hasConfirmationRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.confirmationRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"confirmationRequest"];
  }
  if (self.hasUserMessageUpdate) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userMessageUpdate storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userMessageUpdate"];
  }
  if (self.hasDebugMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.debugMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"debugMessage"];
  }
  if (self.hasImageUploadReply) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.imageUploadReply storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"imageUploadReply"];
  }
  if (self.hasAcceptInviteResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.acceptInviteResponse storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"acceptInviteResponse"];
  }
  if (self.hasFeedPostFetchResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.feedPostFetchResponse storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"feedPostFetchResponse"];
  }
  if (self.hasFeedPostUpdateResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.feedPostUpdateResponse storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"feedPostUpdateResponse"];
  }
  if (self.hasAutocompleteResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.autocompleteResponse storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"autocompleteResponse"];
  }
  if (self.hasUserSearchResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userSearchResponse storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userSearchResponse"];
  }
  if (self.hasConversationResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.conversationResponse storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"conversationResponse"];
  }
  if (self.hasFetchConversations) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.fetchConversations storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"fetchConversations"];
  }
  if (self.hasUserCardInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userCardInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userCardInfo"];
  }
  if (self.hasChargeResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.chargeResponse storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"chargeResponse"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BResponseType class]]) {
    return NO;
  }
  BResponseType *otherMessage = other;
  return
      self.hasSessionResponse == otherMessage.hasSessionResponse &&
      (!self.hasSessionResponse || [self.sessionResponse isEqual:otherMessage.sessionResponse]) &&
      self.hasUserEventBatchResponse == otherMessage.hasUserEventBatchResponse &&
      (!self.hasUserEventBatchResponse || [self.userEventBatchResponse isEqual:otherMessage.userEventBatchResponse]) &&
      self.hasUserProfileUpdate == otherMessage.hasUserProfileUpdate &&
      (!self.hasUserProfileUpdate || [self.userProfileUpdate isEqual:otherMessage.userProfileUpdate]) &&
      self.hasUserProfileQuery == otherMessage.hasUserProfileQuery &&
      (!self.hasUserProfileQuery || [self.userProfileQuery isEqual:otherMessage.userProfileQuery]) &&
      self.hasConfirmationRequest == otherMessage.hasConfirmationRequest &&
      (!self.hasConfirmationRequest || [self.confirmationRequest isEqual:otherMessage.confirmationRequest]) &&
      self.hasUserMessageUpdate == otherMessage.hasUserMessageUpdate &&
      (!self.hasUserMessageUpdate || [self.userMessageUpdate isEqual:otherMessage.userMessageUpdate]) &&
      self.hasDebugMessage == otherMessage.hasDebugMessage &&
      (!self.hasDebugMessage || [self.debugMessage isEqual:otherMessage.debugMessage]) &&
      self.hasImageUploadReply == otherMessage.hasImageUploadReply &&
      (!self.hasImageUploadReply || [self.imageUploadReply isEqual:otherMessage.imageUploadReply]) &&
      self.hasAcceptInviteResponse == otherMessage.hasAcceptInviteResponse &&
      (!self.hasAcceptInviteResponse || [self.acceptInviteResponse isEqual:otherMessage.acceptInviteResponse]) &&
      self.hasFeedPostFetchResponse == otherMessage.hasFeedPostFetchResponse &&
      (!self.hasFeedPostFetchResponse || [self.feedPostFetchResponse isEqual:otherMessage.feedPostFetchResponse]) &&
      self.hasFeedPostUpdateResponse == otherMessage.hasFeedPostUpdateResponse &&
      (!self.hasFeedPostUpdateResponse || [self.feedPostUpdateResponse isEqual:otherMessage.feedPostUpdateResponse]) &&
      self.hasAutocompleteResponse == otherMessage.hasAutocompleteResponse &&
      (!self.hasAutocompleteResponse || [self.autocompleteResponse isEqual:otherMessage.autocompleteResponse]) &&
      self.hasUserSearchResponse == otherMessage.hasUserSearchResponse &&
      (!self.hasUserSearchResponse || [self.userSearchResponse isEqual:otherMessage.userSearchResponse]) &&
      self.hasConversationResponse == otherMessage.hasConversationResponse &&
      (!self.hasConversationResponse || [self.conversationResponse isEqual:otherMessage.conversationResponse]) &&
      self.hasFetchConversations == otherMessage.hasFetchConversations &&
      (!self.hasFetchConversations || [self.fetchConversations isEqual:otherMessage.fetchConversations]) &&
      self.hasUserCardInfo == otherMessage.hasUserCardInfo &&
      (!self.hasUserCardInfo || [self.userCardInfo isEqual:otherMessage.userCardInfo]) &&
      self.hasChargeResponse == otherMessage.hasChargeResponse &&
      (!self.hasChargeResponse || [self.chargeResponse isEqual:otherMessage.chargeResponse]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSessionResponse) {
    hashCode = hashCode * 31 + [self.sessionResponse hash];
  }
  if (self.hasUserEventBatchResponse) {
    hashCode = hashCode * 31 + [self.userEventBatchResponse hash];
  }
  if (self.hasUserProfileUpdate) {
    hashCode = hashCode * 31 + [self.userProfileUpdate hash];
  }
  if (self.hasUserProfileQuery) {
    hashCode = hashCode * 31 + [self.userProfileQuery hash];
  }
  if (self.hasConfirmationRequest) {
    hashCode = hashCode * 31 + [self.confirmationRequest hash];
  }
  if (self.hasUserMessageUpdate) {
    hashCode = hashCode * 31 + [self.userMessageUpdate hash];
  }
  if (self.hasDebugMessage) {
    hashCode = hashCode * 31 + [self.debugMessage hash];
  }
  if (self.hasImageUploadReply) {
    hashCode = hashCode * 31 + [self.imageUploadReply hash];
  }
  if (self.hasAcceptInviteResponse) {
    hashCode = hashCode * 31 + [self.acceptInviteResponse hash];
  }
  if (self.hasFeedPostFetchResponse) {
    hashCode = hashCode * 31 + [self.feedPostFetchResponse hash];
  }
  if (self.hasFeedPostUpdateResponse) {
    hashCode = hashCode * 31 + [self.feedPostUpdateResponse hash];
  }
  if (self.hasAutocompleteResponse) {
    hashCode = hashCode * 31 + [self.autocompleteResponse hash];
  }
  if (self.hasUserSearchResponse) {
    hashCode = hashCode * 31 + [self.userSearchResponse hash];
  }
  if (self.hasConversationResponse) {
    hashCode = hashCode * 31 + [self.conversationResponse hash];
  }
  if (self.hasFetchConversations) {
    hashCode = hashCode * 31 + [self.fetchConversations hash];
  }
  if (self.hasUserCardInfo) {
    hashCode = hashCode * 31 + [self.userCardInfo hash];
  }
  if (self.hasChargeResponse) {
    hashCode = hashCode * 31 + [self.chargeResponse hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BResponseTypeBuilder()
@property (strong) BResponseType* resultResponseType;
@end

@implementation BResponseTypeBuilder
@synthesize resultResponseType;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseType = [[BResponseType alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseType;
}
- (BResponseTypeBuilder*) clear {
  self.resultResponseType = [[BResponseType alloc] init];
  return self;
}
- (BResponseTypeBuilder*) clone {
  return [BResponseType builderWithPrototype:resultResponseType];
}
- (BResponseType*) defaultInstance {
  return [BResponseType defaultInstance];
}
- (BResponseType*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BResponseType*) buildPartial {
  BResponseType* returnMe = resultResponseType;
  self.resultResponseType = nil;
  return returnMe;
}
- (BResponseTypeBuilder*) mergeFrom:(BResponseType*) other {
  if (other == [BResponseType defaultInstance]) {
    return self;
  }
  if (other.hasSessionResponse) {
    [self mergeSessionResponse:other.sessionResponse];
  }
  if (other.hasUserEventBatchResponse) {
    [self mergeUserEventBatchResponse:other.userEventBatchResponse];
  }
  if (other.hasUserProfileUpdate) {
    [self mergeUserProfileUpdate:other.userProfileUpdate];
  }
  if (other.hasUserProfileQuery) {
    [self mergeUserProfileQuery:other.userProfileQuery];
  }
  if (other.hasConfirmationRequest) {
    [self mergeConfirmationRequest:other.confirmationRequest];
  }
  if (other.hasUserMessageUpdate) {
    [self mergeUserMessageUpdate:other.userMessageUpdate];
  }
  if (other.hasDebugMessage) {
    [self mergeDebugMessage:other.debugMessage];
  }
  if (other.hasImageUploadReply) {
    [self mergeImageUploadReply:other.imageUploadReply];
  }
  if (other.hasAcceptInviteResponse) {
    [self mergeAcceptInviteResponse:other.acceptInviteResponse];
  }
  if (other.hasFeedPostFetchResponse) {
    [self mergeFeedPostFetchResponse:other.feedPostFetchResponse];
  }
  if (other.hasFeedPostUpdateResponse) {
    [self mergeFeedPostUpdateResponse:other.feedPostUpdateResponse];
  }
  if (other.hasAutocompleteResponse) {
    [self mergeAutocompleteResponse:other.autocompleteResponse];
  }
  if (other.hasUserSearchResponse) {
    [self mergeUserSearchResponse:other.userSearchResponse];
  }
  if (other.hasConversationResponse) {
    [self mergeConversationResponse:other.conversationResponse];
  }
  if (other.hasFetchConversations) {
    [self mergeFetchConversations:other.fetchConversations];
  }
  if (other.hasUserCardInfo) {
    [self mergeUserCardInfo:other.userCardInfo];
  }
  if (other.hasChargeResponse) {
    [self mergeChargeResponse:other.chargeResponse];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BResponseTypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BResponseTypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BSessionResponseBuilder* subBuilder = [BSessionResponse builder];
        if (self.hasSessionResponse) {
          [subBuilder mergeFrom:self.sessionResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSessionResponse:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        BUserEventBatchResponseBuilder* subBuilder = [BUserEventBatchResponse builder];
        if (self.hasUserEventBatchResponse) {
          [subBuilder mergeFrom:self.userEventBatchResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserEventBatchResponse:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        BUserProfileUpdateBuilder* subBuilder = [BUserProfileUpdate builder];
        if (self.hasUserProfileUpdate) {
          [subBuilder mergeFrom:self.userProfileUpdate];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserProfileUpdate:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        BUserProfileQueryBuilder* subBuilder = [BUserProfileQuery builder];
        if (self.hasUserProfileQuery) {
          [subBuilder mergeFrom:self.userProfileQuery];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserProfileQuery:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        BConfirmationRequestBuilder* subBuilder = [BConfirmationRequest builder];
        if (self.hasConfirmationRequest) {
          [subBuilder mergeFrom:self.confirmationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setConfirmationRequest:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        BUserMessageUpdateBuilder* subBuilder = [BUserMessageUpdate builder];
        if (self.hasUserMessageUpdate) {
          [subBuilder mergeFrom:self.userMessageUpdate];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserMessageUpdate:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        BDebugMessageBuilder* subBuilder = [BDebugMessage builder];
        if (self.hasDebugMessage) {
          [subBuilder mergeFrom:self.debugMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDebugMessage:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        BImageUploadBuilder* subBuilder = [BImageUpload builder];
        if (self.hasImageUploadReply) {
          [subBuilder mergeFrom:self.imageUploadReply];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setImageUploadReply:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        BAcceptInviteResponseBuilder* subBuilder = [BAcceptInviteResponse builder];
        if (self.hasAcceptInviteResponse) {
          [subBuilder mergeFrom:self.acceptInviteResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAcceptInviteResponse:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        BFeedPostFetchResponseBuilder* subBuilder = [BFeedPostFetchResponse builder];
        if (self.hasFeedPostFetchResponse) {
          [subBuilder mergeFrom:self.feedPostFetchResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFeedPostFetchResponse:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        BFeedPostUpdateResponseBuilder* subBuilder = [BFeedPostUpdateResponse builder];
        if (self.hasFeedPostUpdateResponse) {
          [subBuilder mergeFrom:self.feedPostUpdateResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFeedPostUpdateResponse:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        BAutocompleteResponseBuilder* subBuilder = [BAutocompleteResponse builder];
        if (self.hasAutocompleteResponse) {
          [subBuilder mergeFrom:self.autocompleteResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAutocompleteResponse:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        BUserSearchResponseBuilder* subBuilder = [BUserSearchResponse builder];
        if (self.hasUserSearchResponse) {
          [subBuilder mergeFrom:self.userSearchResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserSearchResponse:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        BConversationResponseBuilder* subBuilder = [BConversationResponse builder];
        if (self.hasConversationResponse) {
          [subBuilder mergeFrom:self.conversationResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setConversationResponse:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        BFetchConversationsBuilder* subBuilder = [BFetchConversations builder];
        if (self.hasFetchConversations) {
          [subBuilder mergeFrom:self.fetchConversations];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFetchConversations:[subBuilder buildPartial]];
        break;
      }
      case 130: {
        BUserCardInfoBuilder* subBuilder = [BUserCardInfo builder];
        if (self.hasUserCardInfo) {
          [subBuilder mergeFrom:self.userCardInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserCardInfo:[subBuilder buildPartial]];
        break;
      }
      case 138: {
        BChargeBuilder* subBuilder = [BCharge builder];
        if (self.hasChargeResponse) {
          [subBuilder mergeFrom:self.chargeResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChargeResponse:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionResponse {
  return resultResponseType.hasSessionResponse;
}
- (BSessionResponse*) sessionResponse {
  return resultResponseType.sessionResponse;
}
- (BResponseTypeBuilder*) setSessionResponse:(BSessionResponse*) value {
  resultResponseType.hasSessionResponse = YES;
  resultResponseType.sessionResponse = value;
  return self;
}
- (BResponseTypeBuilder*) setSessionResponseBuilder:(BSessionResponseBuilder*) builderForValue {
  return [self setSessionResponse:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeSessionResponse:(BSessionResponse*) value {
  if (resultResponseType.hasSessionResponse &&
      resultResponseType.sessionResponse != [BSessionResponse defaultInstance]) {
    resultResponseType.sessionResponse =
      [[[BSessionResponse builderWithPrototype:resultResponseType.sessionResponse] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.sessionResponse = value;
  }
  resultResponseType.hasSessionResponse = YES;
  return self;
}
- (BResponseTypeBuilder*) clearSessionResponse {
  resultResponseType.hasSessionResponse = NO;
  resultResponseType.sessionResponse = [BSessionResponse defaultInstance];
  return self;
}
- (BOOL) hasUserEventBatchResponse {
  return resultResponseType.hasUserEventBatchResponse;
}
- (BUserEventBatchResponse*) userEventBatchResponse {
  return resultResponseType.userEventBatchResponse;
}
- (BResponseTypeBuilder*) setUserEventBatchResponse:(BUserEventBatchResponse*) value {
  resultResponseType.hasUserEventBatchResponse = YES;
  resultResponseType.userEventBatchResponse = value;
  return self;
}
- (BResponseTypeBuilder*) setUserEventBatchResponseBuilder:(BUserEventBatchResponseBuilder*) builderForValue {
  return [self setUserEventBatchResponse:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeUserEventBatchResponse:(BUserEventBatchResponse*) value {
  if (resultResponseType.hasUserEventBatchResponse &&
      resultResponseType.userEventBatchResponse != [BUserEventBatchResponse defaultInstance]) {
    resultResponseType.userEventBatchResponse =
      [[[BUserEventBatchResponse builderWithPrototype:resultResponseType.userEventBatchResponse] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.userEventBatchResponse = value;
  }
  resultResponseType.hasUserEventBatchResponse = YES;
  return self;
}
- (BResponseTypeBuilder*) clearUserEventBatchResponse {
  resultResponseType.hasUserEventBatchResponse = NO;
  resultResponseType.userEventBatchResponse = [BUserEventBatchResponse defaultInstance];
  return self;
}
- (BOOL) hasUserProfileUpdate {
  return resultResponseType.hasUserProfileUpdate;
}
- (BUserProfileUpdate*) userProfileUpdate {
  return resultResponseType.userProfileUpdate;
}
- (BResponseTypeBuilder*) setUserProfileUpdate:(BUserProfileUpdate*) value {
  resultResponseType.hasUserProfileUpdate = YES;
  resultResponseType.userProfileUpdate = value;
  return self;
}
- (BResponseTypeBuilder*) setUserProfileUpdateBuilder:(BUserProfileUpdateBuilder*) builderForValue {
  return [self setUserProfileUpdate:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeUserProfileUpdate:(BUserProfileUpdate*) value {
  if (resultResponseType.hasUserProfileUpdate &&
      resultResponseType.userProfileUpdate != [BUserProfileUpdate defaultInstance]) {
    resultResponseType.userProfileUpdate =
      [[[BUserProfileUpdate builderWithPrototype:resultResponseType.userProfileUpdate] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.userProfileUpdate = value;
  }
  resultResponseType.hasUserProfileUpdate = YES;
  return self;
}
- (BResponseTypeBuilder*) clearUserProfileUpdate {
  resultResponseType.hasUserProfileUpdate = NO;
  resultResponseType.userProfileUpdate = [BUserProfileUpdate defaultInstance];
  return self;
}
- (BOOL) hasUserProfileQuery {
  return resultResponseType.hasUserProfileQuery;
}
- (BUserProfileQuery*) userProfileQuery {
  return resultResponseType.userProfileQuery;
}
- (BResponseTypeBuilder*) setUserProfileQuery:(BUserProfileQuery*) value {
  resultResponseType.hasUserProfileQuery = YES;
  resultResponseType.userProfileQuery = value;
  return self;
}
- (BResponseTypeBuilder*) setUserProfileQueryBuilder:(BUserProfileQueryBuilder*) builderForValue {
  return [self setUserProfileQuery:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeUserProfileQuery:(BUserProfileQuery*) value {
  if (resultResponseType.hasUserProfileQuery &&
      resultResponseType.userProfileQuery != [BUserProfileQuery defaultInstance]) {
    resultResponseType.userProfileQuery =
      [[[BUserProfileQuery builderWithPrototype:resultResponseType.userProfileQuery] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.userProfileQuery = value;
  }
  resultResponseType.hasUserProfileQuery = YES;
  return self;
}
- (BResponseTypeBuilder*) clearUserProfileQuery {
  resultResponseType.hasUserProfileQuery = NO;
  resultResponseType.userProfileQuery = [BUserProfileQuery defaultInstance];
  return self;
}
- (BOOL) hasConfirmationRequest {
  return resultResponseType.hasConfirmationRequest;
}
- (BConfirmationRequest*) confirmationRequest {
  return resultResponseType.confirmationRequest;
}
- (BResponseTypeBuilder*) setConfirmationRequest:(BConfirmationRequest*) value {
  resultResponseType.hasConfirmationRequest = YES;
  resultResponseType.confirmationRequest = value;
  return self;
}
- (BResponseTypeBuilder*) setConfirmationRequestBuilder:(BConfirmationRequestBuilder*) builderForValue {
  return [self setConfirmationRequest:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeConfirmationRequest:(BConfirmationRequest*) value {
  if (resultResponseType.hasConfirmationRequest &&
      resultResponseType.confirmationRequest != [BConfirmationRequest defaultInstance]) {
    resultResponseType.confirmationRequest =
      [[[BConfirmationRequest builderWithPrototype:resultResponseType.confirmationRequest] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.confirmationRequest = value;
  }
  resultResponseType.hasConfirmationRequest = YES;
  return self;
}
- (BResponseTypeBuilder*) clearConfirmationRequest {
  resultResponseType.hasConfirmationRequest = NO;
  resultResponseType.confirmationRequest = [BConfirmationRequest defaultInstance];
  return self;
}
- (BOOL) hasUserMessageUpdate {
  return resultResponseType.hasUserMessageUpdate;
}
- (BUserMessageUpdate*) userMessageUpdate {
  return resultResponseType.userMessageUpdate;
}
- (BResponseTypeBuilder*) setUserMessageUpdate:(BUserMessageUpdate*) value {
  resultResponseType.hasUserMessageUpdate = YES;
  resultResponseType.userMessageUpdate = value;
  return self;
}
- (BResponseTypeBuilder*) setUserMessageUpdateBuilder:(BUserMessageUpdateBuilder*) builderForValue {
  return [self setUserMessageUpdate:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeUserMessageUpdate:(BUserMessageUpdate*) value {
  if (resultResponseType.hasUserMessageUpdate &&
      resultResponseType.userMessageUpdate != [BUserMessageUpdate defaultInstance]) {
    resultResponseType.userMessageUpdate =
      [[[BUserMessageUpdate builderWithPrototype:resultResponseType.userMessageUpdate] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.userMessageUpdate = value;
  }
  resultResponseType.hasUserMessageUpdate = YES;
  return self;
}
- (BResponseTypeBuilder*) clearUserMessageUpdate {
  resultResponseType.hasUserMessageUpdate = NO;
  resultResponseType.userMessageUpdate = [BUserMessageUpdate defaultInstance];
  return self;
}
- (BOOL) hasDebugMessage {
  return resultResponseType.hasDebugMessage;
}
- (BDebugMessage*) debugMessage {
  return resultResponseType.debugMessage;
}
- (BResponseTypeBuilder*) setDebugMessage:(BDebugMessage*) value {
  resultResponseType.hasDebugMessage = YES;
  resultResponseType.debugMessage = value;
  return self;
}
- (BResponseTypeBuilder*) setDebugMessageBuilder:(BDebugMessageBuilder*) builderForValue {
  return [self setDebugMessage:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeDebugMessage:(BDebugMessage*) value {
  if (resultResponseType.hasDebugMessage &&
      resultResponseType.debugMessage != [BDebugMessage defaultInstance]) {
    resultResponseType.debugMessage =
      [[[BDebugMessage builderWithPrototype:resultResponseType.debugMessage] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.debugMessage = value;
  }
  resultResponseType.hasDebugMessage = YES;
  return self;
}
- (BResponseTypeBuilder*) clearDebugMessage {
  resultResponseType.hasDebugMessage = NO;
  resultResponseType.debugMessage = [BDebugMessage defaultInstance];
  return self;
}
- (BOOL) hasImageUploadReply {
  return resultResponseType.hasImageUploadReply;
}
- (BImageUpload*) imageUploadReply {
  return resultResponseType.imageUploadReply;
}
- (BResponseTypeBuilder*) setImageUploadReply:(BImageUpload*) value {
  resultResponseType.hasImageUploadReply = YES;
  resultResponseType.imageUploadReply = value;
  return self;
}
- (BResponseTypeBuilder*) setImageUploadReplyBuilder:(BImageUploadBuilder*) builderForValue {
  return [self setImageUploadReply:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeImageUploadReply:(BImageUpload*) value {
  if (resultResponseType.hasImageUploadReply &&
      resultResponseType.imageUploadReply != [BImageUpload defaultInstance]) {
    resultResponseType.imageUploadReply =
      [[[BImageUpload builderWithPrototype:resultResponseType.imageUploadReply] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.imageUploadReply = value;
  }
  resultResponseType.hasImageUploadReply = YES;
  return self;
}
- (BResponseTypeBuilder*) clearImageUploadReply {
  resultResponseType.hasImageUploadReply = NO;
  resultResponseType.imageUploadReply = [BImageUpload defaultInstance];
  return self;
}
- (BOOL) hasAcceptInviteResponse {
  return resultResponseType.hasAcceptInviteResponse;
}
- (BAcceptInviteResponse*) acceptInviteResponse {
  return resultResponseType.acceptInviteResponse;
}
- (BResponseTypeBuilder*) setAcceptInviteResponse:(BAcceptInviteResponse*) value {
  resultResponseType.hasAcceptInviteResponse = YES;
  resultResponseType.acceptInviteResponse = value;
  return self;
}
- (BResponseTypeBuilder*) setAcceptInviteResponseBuilder:(BAcceptInviteResponseBuilder*) builderForValue {
  return [self setAcceptInviteResponse:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeAcceptInviteResponse:(BAcceptInviteResponse*) value {
  if (resultResponseType.hasAcceptInviteResponse &&
      resultResponseType.acceptInviteResponse != [BAcceptInviteResponse defaultInstance]) {
    resultResponseType.acceptInviteResponse =
      [[[BAcceptInviteResponse builderWithPrototype:resultResponseType.acceptInviteResponse] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.acceptInviteResponse = value;
  }
  resultResponseType.hasAcceptInviteResponse = YES;
  return self;
}
- (BResponseTypeBuilder*) clearAcceptInviteResponse {
  resultResponseType.hasAcceptInviteResponse = NO;
  resultResponseType.acceptInviteResponse = [BAcceptInviteResponse defaultInstance];
  return self;
}
- (BOOL) hasFeedPostFetchResponse {
  return resultResponseType.hasFeedPostFetchResponse;
}
- (BFeedPostFetchResponse*) feedPostFetchResponse {
  return resultResponseType.feedPostFetchResponse;
}
- (BResponseTypeBuilder*) setFeedPostFetchResponse:(BFeedPostFetchResponse*) value {
  resultResponseType.hasFeedPostFetchResponse = YES;
  resultResponseType.feedPostFetchResponse = value;
  return self;
}
- (BResponseTypeBuilder*) setFeedPostFetchResponseBuilder:(BFeedPostFetchResponseBuilder*) builderForValue {
  return [self setFeedPostFetchResponse:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeFeedPostFetchResponse:(BFeedPostFetchResponse*) value {
  if (resultResponseType.hasFeedPostFetchResponse &&
      resultResponseType.feedPostFetchResponse != [BFeedPostFetchResponse defaultInstance]) {
    resultResponseType.feedPostFetchResponse =
      [[[BFeedPostFetchResponse builderWithPrototype:resultResponseType.feedPostFetchResponse] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.feedPostFetchResponse = value;
  }
  resultResponseType.hasFeedPostFetchResponse = YES;
  return self;
}
- (BResponseTypeBuilder*) clearFeedPostFetchResponse {
  resultResponseType.hasFeedPostFetchResponse = NO;
  resultResponseType.feedPostFetchResponse = [BFeedPostFetchResponse defaultInstance];
  return self;
}
- (BOOL) hasFeedPostUpdateResponse {
  return resultResponseType.hasFeedPostUpdateResponse;
}
- (BFeedPostUpdateResponse*) feedPostUpdateResponse {
  return resultResponseType.feedPostUpdateResponse;
}
- (BResponseTypeBuilder*) setFeedPostUpdateResponse:(BFeedPostUpdateResponse*) value {
  resultResponseType.hasFeedPostUpdateResponse = YES;
  resultResponseType.feedPostUpdateResponse = value;
  return self;
}
- (BResponseTypeBuilder*) setFeedPostUpdateResponseBuilder:(BFeedPostUpdateResponseBuilder*) builderForValue {
  return [self setFeedPostUpdateResponse:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeFeedPostUpdateResponse:(BFeedPostUpdateResponse*) value {
  if (resultResponseType.hasFeedPostUpdateResponse &&
      resultResponseType.feedPostUpdateResponse != [BFeedPostUpdateResponse defaultInstance]) {
    resultResponseType.feedPostUpdateResponse =
      [[[BFeedPostUpdateResponse builderWithPrototype:resultResponseType.feedPostUpdateResponse] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.feedPostUpdateResponse = value;
  }
  resultResponseType.hasFeedPostUpdateResponse = YES;
  return self;
}
- (BResponseTypeBuilder*) clearFeedPostUpdateResponse {
  resultResponseType.hasFeedPostUpdateResponse = NO;
  resultResponseType.feedPostUpdateResponse = [BFeedPostUpdateResponse defaultInstance];
  return self;
}
- (BOOL) hasAutocompleteResponse {
  return resultResponseType.hasAutocompleteResponse;
}
- (BAutocompleteResponse*) autocompleteResponse {
  return resultResponseType.autocompleteResponse;
}
- (BResponseTypeBuilder*) setAutocompleteResponse:(BAutocompleteResponse*) value {
  resultResponseType.hasAutocompleteResponse = YES;
  resultResponseType.autocompleteResponse = value;
  return self;
}
- (BResponseTypeBuilder*) setAutocompleteResponseBuilder:(BAutocompleteResponseBuilder*) builderForValue {
  return [self setAutocompleteResponse:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeAutocompleteResponse:(BAutocompleteResponse*) value {
  if (resultResponseType.hasAutocompleteResponse &&
      resultResponseType.autocompleteResponse != [BAutocompleteResponse defaultInstance]) {
    resultResponseType.autocompleteResponse =
      [[[BAutocompleteResponse builderWithPrototype:resultResponseType.autocompleteResponse] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.autocompleteResponse = value;
  }
  resultResponseType.hasAutocompleteResponse = YES;
  return self;
}
- (BResponseTypeBuilder*) clearAutocompleteResponse {
  resultResponseType.hasAutocompleteResponse = NO;
  resultResponseType.autocompleteResponse = [BAutocompleteResponse defaultInstance];
  return self;
}
- (BOOL) hasUserSearchResponse {
  return resultResponseType.hasUserSearchResponse;
}
- (BUserSearchResponse*) userSearchResponse {
  return resultResponseType.userSearchResponse;
}
- (BResponseTypeBuilder*) setUserSearchResponse:(BUserSearchResponse*) value {
  resultResponseType.hasUserSearchResponse = YES;
  resultResponseType.userSearchResponse = value;
  return self;
}
- (BResponseTypeBuilder*) setUserSearchResponseBuilder:(BUserSearchResponseBuilder*) builderForValue {
  return [self setUserSearchResponse:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeUserSearchResponse:(BUserSearchResponse*) value {
  if (resultResponseType.hasUserSearchResponse &&
      resultResponseType.userSearchResponse != [BUserSearchResponse defaultInstance]) {
    resultResponseType.userSearchResponse =
      [[[BUserSearchResponse builderWithPrototype:resultResponseType.userSearchResponse] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.userSearchResponse = value;
  }
  resultResponseType.hasUserSearchResponse = YES;
  return self;
}
- (BResponseTypeBuilder*) clearUserSearchResponse {
  resultResponseType.hasUserSearchResponse = NO;
  resultResponseType.userSearchResponse = [BUserSearchResponse defaultInstance];
  return self;
}
- (BOOL) hasConversationResponse {
  return resultResponseType.hasConversationResponse;
}
- (BConversationResponse*) conversationResponse {
  return resultResponseType.conversationResponse;
}
- (BResponseTypeBuilder*) setConversationResponse:(BConversationResponse*) value {
  resultResponseType.hasConversationResponse = YES;
  resultResponseType.conversationResponse = value;
  return self;
}
- (BResponseTypeBuilder*) setConversationResponseBuilder:(BConversationResponseBuilder*) builderForValue {
  return [self setConversationResponse:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeConversationResponse:(BConversationResponse*) value {
  if (resultResponseType.hasConversationResponse &&
      resultResponseType.conversationResponse != [BConversationResponse defaultInstance]) {
    resultResponseType.conversationResponse =
      [[[BConversationResponse builderWithPrototype:resultResponseType.conversationResponse] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.conversationResponse = value;
  }
  resultResponseType.hasConversationResponse = YES;
  return self;
}
- (BResponseTypeBuilder*) clearConversationResponse {
  resultResponseType.hasConversationResponse = NO;
  resultResponseType.conversationResponse = [BConversationResponse defaultInstance];
  return self;
}
- (BOOL) hasFetchConversations {
  return resultResponseType.hasFetchConversations;
}
- (BFetchConversations*) fetchConversations {
  return resultResponseType.fetchConversations;
}
- (BResponseTypeBuilder*) setFetchConversations:(BFetchConversations*) value {
  resultResponseType.hasFetchConversations = YES;
  resultResponseType.fetchConversations = value;
  return self;
}
- (BResponseTypeBuilder*) setFetchConversationsBuilder:(BFetchConversationsBuilder*) builderForValue {
  return [self setFetchConversations:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeFetchConversations:(BFetchConversations*) value {
  if (resultResponseType.hasFetchConversations &&
      resultResponseType.fetchConversations != [BFetchConversations defaultInstance]) {
    resultResponseType.fetchConversations =
      [[[BFetchConversations builderWithPrototype:resultResponseType.fetchConversations] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.fetchConversations = value;
  }
  resultResponseType.hasFetchConversations = YES;
  return self;
}
- (BResponseTypeBuilder*) clearFetchConversations {
  resultResponseType.hasFetchConversations = NO;
  resultResponseType.fetchConversations = [BFetchConversations defaultInstance];
  return self;
}
- (BOOL) hasUserCardInfo {
  return resultResponseType.hasUserCardInfo;
}
- (BUserCardInfo*) userCardInfo {
  return resultResponseType.userCardInfo;
}
- (BResponseTypeBuilder*) setUserCardInfo:(BUserCardInfo*) value {
  resultResponseType.hasUserCardInfo = YES;
  resultResponseType.userCardInfo = value;
  return self;
}
- (BResponseTypeBuilder*) setUserCardInfoBuilder:(BUserCardInfoBuilder*) builderForValue {
  return [self setUserCardInfo:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeUserCardInfo:(BUserCardInfo*) value {
  if (resultResponseType.hasUserCardInfo &&
      resultResponseType.userCardInfo != [BUserCardInfo defaultInstance]) {
    resultResponseType.userCardInfo =
      [[[BUserCardInfo builderWithPrototype:resultResponseType.userCardInfo] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.userCardInfo = value;
  }
  resultResponseType.hasUserCardInfo = YES;
  return self;
}
- (BResponseTypeBuilder*) clearUserCardInfo {
  resultResponseType.hasUserCardInfo = NO;
  resultResponseType.userCardInfo = [BUserCardInfo defaultInstance];
  return self;
}
- (BOOL) hasChargeResponse {
  return resultResponseType.hasChargeResponse;
}
- (BCharge*) chargeResponse {
  return resultResponseType.chargeResponse;
}
- (BResponseTypeBuilder*) setChargeResponse:(BCharge*) value {
  resultResponseType.hasChargeResponse = YES;
  resultResponseType.chargeResponse = value;
  return self;
}
- (BResponseTypeBuilder*) setChargeResponseBuilder:(BChargeBuilder*) builderForValue {
  return [self setChargeResponse:[builderForValue build]];
}
- (BResponseTypeBuilder*) mergeChargeResponse:(BCharge*) value {
  if (resultResponseType.hasChargeResponse &&
      resultResponseType.chargeResponse != [BCharge defaultInstance]) {
    resultResponseType.chargeResponse =
      [[[BCharge builderWithPrototype:resultResponseType.chargeResponse] mergeFrom:value] buildPartial];
  } else {
    resultResponseType.chargeResponse = value;
  }
  resultResponseType.hasChargeResponse = YES;
  return self;
}
- (BResponseTypeBuilder*) clearChargeResponse {
  resultResponseType.hasChargeResponse = NO;
  resultResponseType.chargeResponse = [BCharge defaultInstance];
  return self;
}
@end

@interface BServerResponse ()
@property BResponseCode responseCode;
@property (strong) NSString* responseMessage;
@property (strong) BResponseType* responseType;
@end

@implementation BServerResponse

- (BOOL) hasResponseCode {
  return !!hasResponseCode_;
}
- (void) setHasResponseCode:(BOOL) _value_ {
  hasResponseCode_ = !!_value_;
}
@synthesize responseCode;
- (BOOL) hasResponseMessage {
  return !!hasResponseMessage_;
}
- (void) setHasResponseMessage:(BOOL) _value_ {
  hasResponseMessage_ = !!_value_;
}
@synthesize responseMessage;
- (BOOL) hasResponseType {
  return !!hasResponseType_;
}
- (void) setHasResponseType:(BOOL) _value_ {
  hasResponseType_ = !!_value_;
}
@synthesize responseType;
- (instancetype) init {
  if ((self = [super init])) {
    self.responseCode = BResponseCodeRCSuccess;
    self.responseMessage = @"";
    self.responseType = [BResponseType defaultInstance];
  }
  return self;
}
static BServerResponse* defaultBServerResponseInstance = nil;
+ (void) initialize {
  if (self == [BServerResponse class]) {
    defaultBServerResponseInstance = [[BServerResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBServerResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultBServerResponseInstance;
}
- (BOOL) isInitialized {
  if (self.hasResponseType) {
    if (!self.responseType.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResponseCode) {
    [output writeEnum:1 value:self.responseCode];
  }
  if (self.hasResponseMessage) {
    [output writeString:2 value:self.responseMessage];
  }
  if (self.hasResponseType) {
    [output writeMessage:3 value:self.responseType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResponseCode) {
    size_ += computeEnumSize(1, self.responseCode);
  }
  if (self.hasResponseMessage) {
    size_ += computeStringSize(2, self.responseMessage);
  }
  if (self.hasResponseType) {
    size_ += computeMessageSize(3, self.responseType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BServerResponse*) parseFromData:(NSData*) data {
  return (BServerResponse*)[[[BServerResponse builder] mergeFromData:data] build];
}
+ (BServerResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BServerResponse*)[[[BServerResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BServerResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BServerResponse*)[[[BServerResponse builder] mergeFromInputStream:input] build];
}
+ (BServerResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BServerResponse*)[[[BServerResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BServerResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BServerResponse*)[[[BServerResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BServerResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BServerResponse*)[[[BServerResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BServerResponseBuilder*) builder {
  return [[BServerResponseBuilder alloc] init];
}
+ (BServerResponseBuilder*) builderWithPrototype:(BServerResponse*) prototype {
  return [[BServerResponse builder] mergeFrom:prototype];
}
- (BServerResponseBuilder*) builder {
  return [BServerResponse builder];
}
- (BServerResponseBuilder*) toBuilder {
  return [BServerResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResponseCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"responseCode", NSStringFromBResponseCode(self.responseCode)];
  }
  if (self.hasResponseMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"responseMessage", self.responseMessage];
  }
  if (self.hasResponseType) {
    [output appendFormat:@"%@%@ {\n", indent, @"responseType"];
    [self.responseType writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasResponseCode) {
    [dictionary setObject: @(self.responseCode) forKey: @"responseCode"];
  }
  if (self.hasResponseMessage) {
    [dictionary setObject: self.responseMessage forKey: @"responseMessage"];
  }
  if (self.hasResponseType) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responseType storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responseType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BServerResponse class]]) {
    return NO;
  }
  BServerResponse *otherMessage = other;
  return
      self.hasResponseCode == otherMessage.hasResponseCode &&
      (!self.hasResponseCode || self.responseCode == otherMessage.responseCode) &&
      self.hasResponseMessage == otherMessage.hasResponseMessage &&
      (!self.hasResponseMessage || [self.responseMessage isEqual:otherMessage.responseMessage]) &&
      self.hasResponseType == otherMessage.hasResponseType &&
      (!self.hasResponseType || [self.responseType isEqual:otherMessage.responseType]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResponseCode) {
    hashCode = hashCode * 31 + self.responseCode;
  }
  if (self.hasResponseMessage) {
    hashCode = hashCode * 31 + [self.responseMessage hash];
  }
  if (self.hasResponseType) {
    hashCode = hashCode * 31 + [self.responseType hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BServerResponseBuilder()
@property (strong) BServerResponse* resultServerResponse;
@end

@implementation BServerResponseBuilder
@synthesize resultServerResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultServerResponse = [[BServerResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultServerResponse;
}
- (BServerResponseBuilder*) clear {
  self.resultServerResponse = [[BServerResponse alloc] init];
  return self;
}
- (BServerResponseBuilder*) clone {
  return [BServerResponse builderWithPrototype:resultServerResponse];
}
- (BServerResponse*) defaultInstance {
  return [BServerResponse defaultInstance];
}
- (BServerResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BServerResponse*) buildPartial {
  BServerResponse* returnMe = resultServerResponse;
  self.resultServerResponse = nil;
  return returnMe;
}
- (BServerResponseBuilder*) mergeFrom:(BServerResponse*) other {
  if (other == [BServerResponse defaultInstance]) {
    return self;
  }
  if (other.hasResponseCode) {
    [self setResponseCode:other.responseCode];
  }
  if (other.hasResponseMessage) {
    [self setResponseMessage:other.responseMessage];
  }
  if (other.hasResponseType) {
    [self mergeResponseType:other.responseType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BServerResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BServerResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        BResponseCode value = (BResponseCode)[input readEnum];
        if (BResponseCodeIsValidValue(value)) {
          [self setResponseCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setResponseMessage:[input readString]];
        break;
      }
      case 26: {
        BResponseTypeBuilder* subBuilder = [BResponseType builder];
        if (self.hasResponseType) {
          [subBuilder mergeFrom:self.responseType];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponseType:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasResponseCode {
  return resultServerResponse.hasResponseCode;
}
- (BResponseCode) responseCode {
  return resultServerResponse.responseCode;
}
- (BServerResponseBuilder*) setResponseCode:(BResponseCode) value {
  resultServerResponse.hasResponseCode = YES;
  resultServerResponse.responseCode = value;
  return self;
}
- (BServerResponseBuilder*) clearResponseCode {
  resultServerResponse.hasResponseCode = NO;
  resultServerResponse.responseCode = BResponseCodeRCSuccess;
  return self;
}
- (BOOL) hasResponseMessage {
  return resultServerResponse.hasResponseMessage;
}
- (NSString*) responseMessage {
  return resultServerResponse.responseMessage;
}
- (BServerResponseBuilder*) setResponseMessage:(NSString*) value {
  resultServerResponse.hasResponseMessage = YES;
  resultServerResponse.responseMessage = value;
  return self;
}
- (BServerResponseBuilder*) clearResponseMessage {
  resultServerResponse.hasResponseMessage = NO;
  resultServerResponse.responseMessage = @"";
  return self;
}
- (BOOL) hasResponseType {
  return resultServerResponse.hasResponseType;
}
- (BResponseType*) responseType {
  return resultServerResponse.responseType;
}
- (BServerResponseBuilder*) setResponseType:(BResponseType*) value {
  resultServerResponse.hasResponseType = YES;
  resultServerResponse.responseType = value;
  return self;
}
- (BServerResponseBuilder*) setResponseTypeBuilder:(BResponseTypeBuilder*) builderForValue {
  return [self setResponseType:[builderForValue build]];
}
- (BServerResponseBuilder*) mergeResponseType:(BResponseType*) value {
  if (resultServerResponse.hasResponseType &&
      resultServerResponse.responseType != [BResponseType defaultInstance]) {
    resultServerResponse.responseType =
      [[[BResponseType builderWithPrototype:resultServerResponse.responseType] mergeFrom:value] buildPartial];
  } else {
    resultServerResponse.responseType = value;
  }
  resultServerResponse.hasResponseType = YES;
  return self;
}
- (BServerResponseBuilder*) clearResponseType {
  resultServerResponse.hasResponseType = NO;
  resultServerResponse.responseType = [BResponseType defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
