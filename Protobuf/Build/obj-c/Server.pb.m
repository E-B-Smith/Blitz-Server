// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Server.pb.h"
// @@protoc_insertion_point(imports)

@implementation BServerRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BServerRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    [BTypesRoot registerAllExtensions:registry];
    [BDeviceRoot registerAllExtensions:registry];
    [BNotificationsRoot registerAllExtensions:registry];
    [BUserProfilesRoot registerAllExtensions:registry];
    [BUserTrackingRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL BResponseCodeIsValidValue(BResponseCode value) {
  switch (value) {
    case BResponseCodeRCSuccess:
    case BResponseCodeRCInputCorrupt:
    case BResponseCodeRCInputInvalid:
    case BResponseCodeRCServerWarning:
    case BResponseCodeRCServerError:
    case BResponseCodeRCNotAuthorized:
    case BResponseCodeRCClientTooOld:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBResponseCode(BResponseCode value) {
  switch (value) {
    case BResponseCodeRCSuccess:
      return @"BResponseCodeRCSuccess";
    case BResponseCodeRCInputCorrupt:
      return @"BResponseCodeRCInputCorrupt";
    case BResponseCodeRCInputInvalid:
      return @"BResponseCodeRCInputInvalid";
    case BResponseCodeRCServerWarning:
      return @"BResponseCodeRCServerWarning";
    case BResponseCodeRCServerError:
      return @"BResponseCodeRCServerError";
    case BResponseCodeRCNotAuthorized:
      return @"BResponseCodeRCNotAuthorized";
    case BResponseCodeRCClientTooOld:
      return @"BResponseCodeRCClientTooOld";
    default:
      return nil;
  }
}

@interface BDebugMessage ()
@property (strong) NSMutableArray * debugTextArray;
@end

@implementation BDebugMessage

@synthesize debugTextArray;
@dynamic debugText;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BDebugMessage* defaultBDebugMessageInstance = nil;
+ (void) initialize {
  if (self == [BDebugMessage class]) {
    defaultBDebugMessageInstance = [[BDebugMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBDebugMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultBDebugMessageInstance;
}
- (NSArray *)debugText {
  return debugTextArray;
}
- (NSString*)debugTextAtIndex:(NSUInteger)index {
  return [debugTextArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.debugTextArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.debugTextArray.count;
    [self.debugTextArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BDebugMessage*) parseFromData:(NSData*) data {
  return (BDebugMessage*)[[[BDebugMessage builder] mergeFromData:data] build];
}
+ (BDebugMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BDebugMessage*)[[[BDebugMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BDebugMessage*) parseFromInputStream:(NSInputStream*) input {
  return (BDebugMessage*)[[[BDebugMessage builder] mergeFromInputStream:input] build];
}
+ (BDebugMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BDebugMessage*)[[[BDebugMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BDebugMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BDebugMessage*)[[[BDebugMessage builder] mergeFromCodedInputStream:input] build];
}
+ (BDebugMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BDebugMessage*)[[[BDebugMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BDebugMessageBuilder*) builder {
  return [[BDebugMessageBuilder alloc] init];
}
+ (BDebugMessageBuilder*) builderWithPrototype:(BDebugMessage*) prototype {
  return [[BDebugMessage builder] mergeFrom:prototype];
}
- (BDebugMessageBuilder*) builder {
  return [BDebugMessage builder];
}
- (BDebugMessageBuilder*) toBuilder {
  return [BDebugMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.debugTextArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"debugText", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [dictionary setObject:self.debugText forKey: @"debugText"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BDebugMessage class]]) {
    return NO;
  }
  BDebugMessage *otherMessage = other;
  return
      [self.debugTextArray isEqualToArray:otherMessage.debugTextArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.debugTextArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BDebugMessageBuilder()
@property (strong) BDebugMessage* resultDebugMessage;
@end

@implementation BDebugMessageBuilder
@synthesize resultDebugMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDebugMessage = [[BDebugMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDebugMessage;
}
- (BDebugMessageBuilder*) clear {
  self.resultDebugMessage = [[BDebugMessage alloc] init];
  return self;
}
- (BDebugMessageBuilder*) clone {
  return [BDebugMessage builderWithPrototype:resultDebugMessage];
}
- (BDebugMessage*) defaultInstance {
  return [BDebugMessage defaultInstance];
}
- (BDebugMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BDebugMessage*) buildPartial {
  BDebugMessage* returnMe = resultDebugMessage;
  self.resultDebugMessage = nil;
  return returnMe;
}
- (BDebugMessageBuilder*) mergeFrom:(BDebugMessage*) other {
  if (other == [BDebugMessage defaultInstance]) {
    return self;
  }
  if (other.debugTextArray.count > 0) {
    if (resultDebugMessage.debugTextArray == nil) {
      resultDebugMessage.debugTextArray = [[NSMutableArray alloc] initWithArray:other.debugTextArray];
    } else {
      [resultDebugMessage.debugTextArray addObjectsFromArray:other.debugTextArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BDebugMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BDebugMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addDebugText:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray *)debugText {
  return resultDebugMessage.debugTextArray;
}
- (NSString*)debugTextAtIndex:(NSUInteger)index {
  return [resultDebugMessage debugTextAtIndex:index];
}
- (BDebugMessageBuilder *)addDebugText:(NSString*)value {
  if (resultDebugMessage.debugTextArray == nil) {
    resultDebugMessage.debugTextArray = [[NSMutableArray alloc]init];
  }
  [resultDebugMessage.debugTextArray addObject:value];
  return self;
}
- (BDebugMessageBuilder *)setDebugTextArray:(NSArray *)array {
  resultDebugMessage.debugTextArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (BDebugMessageBuilder *)clearDebugText {
  resultDebugMessage.debugTextArray = nil;
  return self;
}
@end

@interface BSessionRequest ()
@property (strong) BLocation* location;
@property (strong) BDeviceInfo* deviceInfo;
@property (strong) BUserProfile* profile;
@property (strong) BTimestamp* lastAppDataResetDate;
@end

@implementation BSessionRequest

- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (BOOL) hasDeviceInfo {
  return !!hasDeviceInfo_;
}
- (void) setHasDeviceInfo:(BOOL) _value_ {
  hasDeviceInfo_ = !!_value_;
}
@synthesize deviceInfo;
- (BOOL) hasProfile {
  return !!hasProfile_;
}
- (void) setHasProfile:(BOOL) _value_ {
  hasProfile_ = !!_value_;
}
@synthesize profile;
- (BOOL) hasLastAppDataResetDate {
  return !!hasLastAppDataResetDate_;
}
- (void) setHasLastAppDataResetDate:(BOOL) _value_ {
  hasLastAppDataResetDate_ = !!_value_;
}
@synthesize lastAppDataResetDate;
- (instancetype) init {
  if ((self = [super init])) {
    self.location = [BLocation defaultInstance];
    self.deviceInfo = [BDeviceInfo defaultInstance];
    self.profile = [BUserProfile defaultInstance];
    self.lastAppDataResetDate = [BTimestamp defaultInstance];
  }
  return self;
}
static BSessionRequest* defaultBSessionRequestInstance = nil;
+ (void) initialize {
  if (self == [BSessionRequest class]) {
    defaultBSessionRequestInstance = [[BSessionRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBSessionRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBSessionRequestInstance;
}
- (BOOL) isInitialized {
  if (self.hasDeviceInfo) {
    if (!self.deviceInfo.isInitialized) {
      return NO;
    }
  }
  if (self.hasProfile) {
    if (!self.profile.isInitialized) {
      return NO;
    }
  }
  if (self.hasLastAppDataResetDate) {
    if (!self.lastAppDataResetDate.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLocation) {
    [output writeMessage:1 value:self.location];
  }
  if (self.hasDeviceInfo) {
    [output writeMessage:2 value:self.deviceInfo];
  }
  if (self.hasProfile) {
    [output writeMessage:3 value:self.profile];
  }
  if (self.hasLastAppDataResetDate) {
    [output writeMessage:4 value:self.lastAppDataResetDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLocation) {
    size_ += computeMessageSize(1, self.location);
  }
  if (self.hasDeviceInfo) {
    size_ += computeMessageSize(2, self.deviceInfo);
  }
  if (self.hasProfile) {
    size_ += computeMessageSize(3, self.profile);
  }
  if (self.hasLastAppDataResetDate) {
    size_ += computeMessageSize(4, self.lastAppDataResetDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BSessionRequest*) parseFromData:(NSData*) data {
  return (BSessionRequest*)[[[BSessionRequest builder] mergeFromData:data] build];
}
+ (BSessionRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSessionRequest*)[[[BSessionRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BSessionRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BSessionRequest*)[[[BSessionRequest builder] mergeFromInputStream:input] build];
}
+ (BSessionRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSessionRequest*)[[[BSessionRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BSessionRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BSessionRequest*)[[[BSessionRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BSessionRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSessionRequest*)[[[BSessionRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BSessionRequestBuilder*) builder {
  return [[BSessionRequestBuilder alloc] init];
}
+ (BSessionRequestBuilder*) builderWithPrototype:(BSessionRequest*) prototype {
  return [[BSessionRequest builder] mergeFrom:prototype];
}
- (BSessionRequestBuilder*) builder {
  return [BSessionRequest builder];
}
- (BSessionRequestBuilder*) toBuilder {
  return [BSessionRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDeviceInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"deviceInfo"];
    [self.deviceInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasProfile) {
    [output appendFormat:@"%@%@ {\n", indent, @"profile"];
    [self.profile writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLastAppDataResetDate) {
    [output appendFormat:@"%@%@ {\n", indent, @"lastAppDataResetDate"];
    [self.lastAppDataResetDate writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLocation) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.location storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"location"];
  }
  if (self.hasDeviceInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.deviceInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"deviceInfo"];
  }
  if (self.hasProfile) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.profile storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"profile"];
  }
  if (self.hasLastAppDataResetDate) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.lastAppDataResetDate storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"lastAppDataResetDate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BSessionRequest class]]) {
    return NO;
  }
  BSessionRequest *otherMessage = other;
  return
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasDeviceInfo == otherMessage.hasDeviceInfo &&
      (!self.hasDeviceInfo || [self.deviceInfo isEqual:otherMessage.deviceInfo]) &&
      self.hasProfile == otherMessage.hasProfile &&
      (!self.hasProfile || [self.profile isEqual:otherMessage.profile]) &&
      self.hasLastAppDataResetDate == otherMessage.hasLastAppDataResetDate &&
      (!self.hasLastAppDataResetDate || [self.lastAppDataResetDate isEqual:otherMessage.lastAppDataResetDate]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasDeviceInfo) {
    hashCode = hashCode * 31 + [self.deviceInfo hash];
  }
  if (self.hasProfile) {
    hashCode = hashCode * 31 + [self.profile hash];
  }
  if (self.hasLastAppDataResetDate) {
    hashCode = hashCode * 31 + [self.lastAppDataResetDate hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BSessionRequestBuilder()
@property (strong) BSessionRequest* resultSessionRequest;
@end

@implementation BSessionRequestBuilder
@synthesize resultSessionRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSessionRequest = [[BSessionRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSessionRequest;
}
- (BSessionRequestBuilder*) clear {
  self.resultSessionRequest = [[BSessionRequest alloc] init];
  return self;
}
- (BSessionRequestBuilder*) clone {
  return [BSessionRequest builderWithPrototype:resultSessionRequest];
}
- (BSessionRequest*) defaultInstance {
  return [BSessionRequest defaultInstance];
}
- (BSessionRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BSessionRequest*) buildPartial {
  BSessionRequest* returnMe = resultSessionRequest;
  self.resultSessionRequest = nil;
  return returnMe;
}
- (BSessionRequestBuilder*) mergeFrom:(BSessionRequest*) other {
  if (other == [BSessionRequest defaultInstance]) {
    return self;
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  if (other.hasDeviceInfo) {
    [self mergeDeviceInfo:other.deviceInfo];
  }
  if (other.hasProfile) {
    [self mergeProfile:other.profile];
  }
  if (other.hasLastAppDataResetDate) {
    [self mergeLastAppDataResetDate:other.lastAppDataResetDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BSessionRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BSessionRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BLocationBuilder* subBuilder = [BLocation builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        BDeviceInfoBuilder* subBuilder = [BDeviceInfo builder];
        if (self.hasDeviceInfo) {
          [subBuilder mergeFrom:self.deviceInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDeviceInfo:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        BUserProfileBuilder* subBuilder = [BUserProfile builder];
        if (self.hasProfile) {
          [subBuilder mergeFrom:self.profile];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setProfile:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        BTimestampBuilder* subBuilder = [BTimestamp builder];
        if (self.hasLastAppDataResetDate) {
          [subBuilder mergeFrom:self.lastAppDataResetDate];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLastAppDataResetDate:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasLocation {
  return resultSessionRequest.hasLocation;
}
- (BLocation*) location {
  return resultSessionRequest.location;
}
- (BSessionRequestBuilder*) setLocation:(BLocation*) value {
  resultSessionRequest.hasLocation = YES;
  resultSessionRequest.location = value;
  return self;
}
- (BSessionRequestBuilder*) setLocationBuilder:(BLocationBuilder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (BSessionRequestBuilder*) mergeLocation:(BLocation*) value {
  if (resultSessionRequest.hasLocation &&
      resultSessionRequest.location != [BLocation defaultInstance]) {
    resultSessionRequest.location =
      [[[BLocation builderWithPrototype:resultSessionRequest.location] mergeFrom:value] buildPartial];
  } else {
    resultSessionRequest.location = value;
  }
  resultSessionRequest.hasLocation = YES;
  return self;
}
- (BSessionRequestBuilder*) clearLocation {
  resultSessionRequest.hasLocation = NO;
  resultSessionRequest.location = [BLocation defaultInstance];
  return self;
}
- (BOOL) hasDeviceInfo {
  return resultSessionRequest.hasDeviceInfo;
}
- (BDeviceInfo*) deviceInfo {
  return resultSessionRequest.deviceInfo;
}
- (BSessionRequestBuilder*) setDeviceInfo:(BDeviceInfo*) value {
  resultSessionRequest.hasDeviceInfo = YES;
  resultSessionRequest.deviceInfo = value;
  return self;
}
- (BSessionRequestBuilder*) setDeviceInfoBuilder:(BDeviceInfoBuilder*) builderForValue {
  return [self setDeviceInfo:[builderForValue build]];
}
- (BSessionRequestBuilder*) mergeDeviceInfo:(BDeviceInfo*) value {
  if (resultSessionRequest.hasDeviceInfo &&
      resultSessionRequest.deviceInfo != [BDeviceInfo defaultInstance]) {
    resultSessionRequest.deviceInfo =
      [[[BDeviceInfo builderWithPrototype:resultSessionRequest.deviceInfo] mergeFrom:value] buildPartial];
  } else {
    resultSessionRequest.deviceInfo = value;
  }
  resultSessionRequest.hasDeviceInfo = YES;
  return self;
}
- (BSessionRequestBuilder*) clearDeviceInfo {
  resultSessionRequest.hasDeviceInfo = NO;
  resultSessionRequest.deviceInfo = [BDeviceInfo defaultInstance];
  return self;
}
- (BOOL) hasProfile {
  return resultSessionRequest.hasProfile;
}
- (BUserProfile*) profile {
  return resultSessionRequest.profile;
}
- (BSessionRequestBuilder*) setProfile:(BUserProfile*) value {
  resultSessionRequest.hasProfile = YES;
  resultSessionRequest.profile = value;
  return self;
}
- (BSessionRequestBuilder*) setProfileBuilder:(BUserProfileBuilder*) builderForValue {
  return [self setProfile:[builderForValue build]];
}
- (BSessionRequestBuilder*) mergeProfile:(BUserProfile*) value {
  if (resultSessionRequest.hasProfile &&
      resultSessionRequest.profile != [BUserProfile defaultInstance]) {
    resultSessionRequest.profile =
      [[[BUserProfile builderWithPrototype:resultSessionRequest.profile] mergeFrom:value] buildPartial];
  } else {
    resultSessionRequest.profile = value;
  }
  resultSessionRequest.hasProfile = YES;
  return self;
}
- (BSessionRequestBuilder*) clearProfile {
  resultSessionRequest.hasProfile = NO;
  resultSessionRequest.profile = [BUserProfile defaultInstance];
  return self;
}
- (BOOL) hasLastAppDataResetDate {
  return resultSessionRequest.hasLastAppDataResetDate;
}
- (BTimestamp*) lastAppDataResetDate {
  return resultSessionRequest.lastAppDataResetDate;
}
- (BSessionRequestBuilder*) setLastAppDataResetDate:(BTimestamp*) value {
  resultSessionRequest.hasLastAppDataResetDate = YES;
  resultSessionRequest.lastAppDataResetDate = value;
  return self;
}
- (BSessionRequestBuilder*) setLastAppDataResetDateBuilder:(BTimestampBuilder*) builderForValue {
  return [self setLastAppDataResetDate:[builderForValue build]];
}
- (BSessionRequestBuilder*) mergeLastAppDataResetDate:(BTimestamp*) value {
  if (resultSessionRequest.hasLastAppDataResetDate &&
      resultSessionRequest.lastAppDataResetDate != [BTimestamp defaultInstance]) {
    resultSessionRequest.lastAppDataResetDate =
      [[[BTimestamp builderWithPrototype:resultSessionRequest.lastAppDataResetDate] mergeFrom:value] buildPartial];
  } else {
    resultSessionRequest.lastAppDataResetDate = value;
  }
  resultSessionRequest.hasLastAppDataResetDate = YES;
  return self;
}
- (BSessionRequestBuilder*) clearLastAppDataResetDate {
  resultSessionRequest.hasLastAppDataResetDate = NO;
  resultSessionRequest.lastAppDataResetDate = [BTimestamp defaultInstance];
  return self;
}
@end

@interface BBlitzHereOptions ()
@end

@implementation BBlitzHereOptions

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BBlitzHereOptions* defaultBBlitzHereOptionsInstance = nil;
+ (void) initialize {
  if (self == [BBlitzHereOptions class]) {
    defaultBBlitzHereOptionsInstance = [[BBlitzHereOptions alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBBlitzHereOptionsInstance;
}
- (instancetype) defaultInstance {
  return defaultBBlitzHereOptionsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BBlitzHereOptions*) parseFromData:(NSData*) data {
  return (BBlitzHereOptions*)[[[BBlitzHereOptions builder] mergeFromData:data] build];
}
+ (BBlitzHereOptions*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BBlitzHereOptions*)[[[BBlitzHereOptions builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BBlitzHereOptions*) parseFromInputStream:(NSInputStream*) input {
  return (BBlitzHereOptions*)[[[BBlitzHereOptions builder] mergeFromInputStream:input] build];
}
+ (BBlitzHereOptions*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BBlitzHereOptions*)[[[BBlitzHereOptions builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BBlitzHereOptions*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BBlitzHereOptions*)[[[BBlitzHereOptions builder] mergeFromCodedInputStream:input] build];
}
+ (BBlitzHereOptions*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BBlitzHereOptions*)[[[BBlitzHereOptions builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BBlitzHereOptionsBuilder*) builder {
  return [[BBlitzHereOptionsBuilder alloc] init];
}
+ (BBlitzHereOptionsBuilder*) builderWithPrototype:(BBlitzHereOptions*) prototype {
  return [[BBlitzHereOptions builder] mergeFrom:prototype];
}
- (BBlitzHereOptionsBuilder*) builder {
  return [BBlitzHereOptions builder];
}
- (BBlitzHereOptionsBuilder*) toBuilder {
  return [BBlitzHereOptions builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BBlitzHereOptions class]]) {
    return NO;
  }
  BBlitzHereOptions *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BBlitzHereOptionsBuilder()
@property (strong) BBlitzHereOptions* resultBlitzHereOptions;
@end

@implementation BBlitzHereOptionsBuilder
@synthesize resultBlitzHereOptions;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBlitzHereOptions = [[BBlitzHereOptions alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBlitzHereOptions;
}
- (BBlitzHereOptionsBuilder*) clear {
  self.resultBlitzHereOptions = [[BBlitzHereOptions alloc] init];
  return self;
}
- (BBlitzHereOptionsBuilder*) clone {
  return [BBlitzHereOptions builderWithPrototype:resultBlitzHereOptions];
}
- (BBlitzHereOptions*) defaultInstance {
  return [BBlitzHereOptions defaultInstance];
}
- (BBlitzHereOptions*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BBlitzHereOptions*) buildPartial {
  BBlitzHereOptions* returnMe = resultBlitzHereOptions;
  self.resultBlitzHereOptions = nil;
  return returnMe;
}
- (BBlitzHereOptionsBuilder*) mergeFrom:(BBlitzHereOptions*) other {
  if (other == [BBlitzHereOptions defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BBlitzHereOptionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BBlitzHereOptionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface BAppOptions ()
@property (strong) BBlitzHereOptions* blitzHereOptions;
@end

@implementation BAppOptions

- (BOOL) hasBlitzHereOptions {
  return !!hasBlitzHereOptions_;
}
- (void) setHasBlitzHereOptions:(BOOL) _value_ {
  hasBlitzHereOptions_ = !!_value_;
}
@synthesize blitzHereOptions;
- (instancetype) init {
  if ((self = [super init])) {
    self.blitzHereOptions = [BBlitzHereOptions defaultInstance];
  }
  return self;
}
static BAppOptions* defaultBAppOptionsInstance = nil;
+ (void) initialize {
  if (self == [BAppOptions class]) {
    defaultBAppOptionsInstance = [[BAppOptions alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBAppOptionsInstance;
}
- (instancetype) defaultInstance {
  return defaultBAppOptionsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBlitzHereOptions) {
    [output writeMessage:1 value:self.blitzHereOptions];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBlitzHereOptions) {
    size_ += computeMessageSize(1, self.blitzHereOptions);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BAppOptions*) parseFromData:(NSData*) data {
  return (BAppOptions*)[[[BAppOptions builder] mergeFromData:data] build];
}
+ (BAppOptions*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAppOptions*)[[[BAppOptions builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BAppOptions*) parseFromInputStream:(NSInputStream*) input {
  return (BAppOptions*)[[[BAppOptions builder] mergeFromInputStream:input] build];
}
+ (BAppOptions*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAppOptions*)[[[BAppOptions builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAppOptions*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BAppOptions*)[[[BAppOptions builder] mergeFromCodedInputStream:input] build];
}
+ (BAppOptions*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BAppOptions*)[[[BAppOptions builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BAppOptionsBuilder*) builder {
  return [[BAppOptionsBuilder alloc] init];
}
+ (BAppOptionsBuilder*) builderWithPrototype:(BAppOptions*) prototype {
  return [[BAppOptions builder] mergeFrom:prototype];
}
- (BAppOptionsBuilder*) builder {
  return [BAppOptions builder];
}
- (BAppOptionsBuilder*) toBuilder {
  return [BAppOptions builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBlitzHereOptions) {
    [output appendFormat:@"%@%@ {\n", indent, @"blitzHereOptions"];
    [self.blitzHereOptions writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBlitzHereOptions) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.blitzHereOptions storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"blitzHereOptions"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BAppOptions class]]) {
    return NO;
  }
  BAppOptions *otherMessage = other;
  return
      self.hasBlitzHereOptions == otherMessage.hasBlitzHereOptions &&
      (!self.hasBlitzHereOptions || [self.blitzHereOptions isEqual:otherMessage.blitzHereOptions]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBlitzHereOptions) {
    hashCode = hashCode * 31 + [self.blitzHereOptions hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BAppOptionsBuilder()
@property (strong) BAppOptions* resultAppOptions;
@end

@implementation BAppOptionsBuilder
@synthesize resultAppOptions;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAppOptions = [[BAppOptions alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAppOptions;
}
- (BAppOptionsBuilder*) clear {
  self.resultAppOptions = [[BAppOptions alloc] init];
  return self;
}
- (BAppOptionsBuilder*) clone {
  return [BAppOptions builderWithPrototype:resultAppOptions];
}
- (BAppOptions*) defaultInstance {
  return [BAppOptions defaultInstance];
}
- (BAppOptions*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BAppOptions*) buildPartial {
  BAppOptions* returnMe = resultAppOptions;
  self.resultAppOptions = nil;
  return returnMe;
}
- (BAppOptionsBuilder*) mergeFrom:(BAppOptions*) other {
  if (other == [BAppOptions defaultInstance]) {
    return self;
  }
  if (other.hasBlitzHereOptions) {
    [self mergeBlitzHereOptions:other.blitzHereOptions];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BAppOptionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BAppOptionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BBlitzHereOptionsBuilder* subBuilder = [BBlitzHereOptions builder];
        if (self.hasBlitzHereOptions) {
          [subBuilder mergeFrom:self.blitzHereOptions];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBlitzHereOptions:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasBlitzHereOptions {
  return resultAppOptions.hasBlitzHereOptions;
}
- (BBlitzHereOptions*) blitzHereOptions {
  return resultAppOptions.blitzHereOptions;
}
- (BAppOptionsBuilder*) setBlitzHereOptions:(BBlitzHereOptions*) value {
  resultAppOptions.hasBlitzHereOptions = YES;
  resultAppOptions.blitzHereOptions = value;
  return self;
}
- (BAppOptionsBuilder*) setBlitzHereOptionsBuilder:(BBlitzHereOptionsBuilder*) builderForValue {
  return [self setBlitzHereOptions:[builderForValue build]];
}
- (BAppOptionsBuilder*) mergeBlitzHereOptions:(BBlitzHereOptions*) value {
  if (resultAppOptions.hasBlitzHereOptions &&
      resultAppOptions.blitzHereOptions != [BBlitzHereOptions defaultInstance]) {
    resultAppOptions.blitzHereOptions =
      [[[BBlitzHereOptions builderWithPrototype:resultAppOptions.blitzHereOptions] mergeFrom:value] buildPartial];
  } else {
    resultAppOptions.blitzHereOptions = value;
  }
  resultAppOptions.hasBlitzHereOptions = YES;
  return self;
}
- (BAppOptionsBuilder*) clearBlitzHereOptions {
  resultAppOptions.hasBlitzHereOptions = NO;
  resultAppOptions.blitzHereOptions = [BBlitzHereOptions defaultInstance];
  return self;
}
@end

@interface BSessionResponse ()
@property (strong) NSString* userID;
@property (strong) NSString* sessionToken;
@property (strong) NSString* serverURL;
@property (strong) NSMutableArray * userNotificationsArray;
@property (strong) BUserProfile* userProfile;
@property BOOL resetAllAppData;
@property (strong) BAppOptions* appOptions;
@end

@implementation BSessionResponse

- (BOOL) hasUserID {
  return !!hasUserID_;
}
- (void) setHasUserID:(BOOL) _value_ {
  hasUserID_ = !!_value_;
}
@synthesize userID;
- (BOOL) hasSessionToken {
  return !!hasSessionToken_;
}
- (void) setHasSessionToken:(BOOL) _value_ {
  hasSessionToken_ = !!_value_;
}
@synthesize sessionToken;
- (BOOL) hasServerURL {
  return !!hasServerURL_;
}
- (void) setHasServerURL:(BOOL) _value_ {
  hasServerURL_ = !!_value_;
}
@synthesize serverURL;
@synthesize userNotificationsArray;
@dynamic userNotifications;
- (BOOL) hasUserProfile {
  return !!hasUserProfile_;
}
- (void) setHasUserProfile:(BOOL) _value_ {
  hasUserProfile_ = !!_value_;
}
@synthesize userProfile;
- (BOOL) hasResetAllAppData {
  return !!hasResetAllAppData_;
}
- (void) setHasResetAllAppData:(BOOL) _value_ {
  hasResetAllAppData_ = !!_value_;
}
- (BOOL) resetAllAppData {
  return !!resetAllAppData_;
}
- (void) setResetAllAppData:(BOOL) _value_ {
  resetAllAppData_ = !!_value_;
}
- (BOOL) hasAppOptions {
  return !!hasAppOptions_;
}
- (void) setHasAppOptions:(BOOL) _value_ {
  hasAppOptions_ = !!_value_;
}
@synthesize appOptions;
- (instancetype) init {
  if ((self = [super init])) {
    self.userID = @"";
    self.sessionToken = @"";
    self.serverURL = @"";
    self.userProfile = [BUserProfile defaultInstance];
    self.resetAllAppData = NO;
    self.appOptions = [BAppOptions defaultInstance];
  }
  return self;
}
static BSessionResponse* defaultBSessionResponseInstance = nil;
+ (void) initialize {
  if (self == [BSessionResponse class]) {
    defaultBSessionResponseInstance = [[BSessionResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBSessionResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultBSessionResponseInstance;
}
- (NSArray *)userNotifications {
  return userNotificationsArray;
}
- (BNotification*)userNotificationsAtIndex:(NSUInteger)index {
  return [userNotificationsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInituserNotifications = YES;
   [self.userNotifications enumerateObjectsUsingBlock:^(BNotification *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserNotifications = NO;
      *stop = YES;
    }
  }];
  if (!isInituserNotifications) return isInituserNotifications;
  if (self.hasUserProfile) {
    if (!self.userProfile.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserID) {
    [output writeString:1 value:self.userID];
  }
  if (self.hasSessionToken) {
    [output writeString:2 value:self.sessionToken];
  }
  if (self.hasServerURL) {
    [output writeString:3 value:self.serverURL];
  }
  [self.userNotificationsArray enumerateObjectsUsingBlock:^(BNotification *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  if (self.hasUserProfile) {
    [output writeMessage:5 value:self.userProfile];
  }
  if (self.hasResetAllAppData) {
    [output writeBool:6 value:self.resetAllAppData];
  }
  if (self.hasAppOptions) {
    [output writeMessage:7 value:self.appOptions];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserID) {
    size_ += computeStringSize(1, self.userID);
  }
  if (self.hasSessionToken) {
    size_ += computeStringSize(2, self.sessionToken);
  }
  if (self.hasServerURL) {
    size_ += computeStringSize(3, self.serverURL);
  }
  [self.userNotificationsArray enumerateObjectsUsingBlock:^(BNotification *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  if (self.hasUserProfile) {
    size_ += computeMessageSize(5, self.userProfile);
  }
  if (self.hasResetAllAppData) {
    size_ += computeBoolSize(6, self.resetAllAppData);
  }
  if (self.hasAppOptions) {
    size_ += computeMessageSize(7, self.appOptions);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BSessionResponse*) parseFromData:(NSData*) data {
  return (BSessionResponse*)[[[BSessionResponse builder] mergeFromData:data] build];
}
+ (BSessionResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSessionResponse*)[[[BSessionResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BSessionResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BSessionResponse*)[[[BSessionResponse builder] mergeFromInputStream:input] build];
}
+ (BSessionResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSessionResponse*)[[[BSessionResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BSessionResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BSessionResponse*)[[[BSessionResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BSessionResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BSessionResponse*)[[[BSessionResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BSessionResponseBuilder*) builder {
  return [[BSessionResponseBuilder alloc] init];
}
+ (BSessionResponseBuilder*) builderWithPrototype:(BSessionResponse*) prototype {
  return [[BSessionResponse builder] mergeFrom:prototype];
}
- (BSessionResponseBuilder*) builder {
  return [BSessionResponse builder];
}
- (BSessionResponseBuilder*) toBuilder {
  return [BSessionResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userID", self.userID];
  }
  if (self.hasSessionToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionToken", self.sessionToken];
  }
  if (self.hasServerURL) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverURL", self.serverURL];
  }
  [self.userNotificationsArray enumerateObjectsUsingBlock:^(BNotification *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userNotifications"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasUserProfile) {
    [output appendFormat:@"%@%@ {\n", indent, @"userProfile"];
    [self.userProfile writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResetAllAppData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resetAllAppData", [NSNumber numberWithBool:self.resetAllAppData]];
  }
  if (self.hasAppOptions) {
    [output appendFormat:@"%@%@ {\n", indent, @"appOptions"];
    [self.appOptions writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserID) {
    [dictionary setObject: self.userID forKey: @"userID"];
  }
  if (self.hasSessionToken) {
    [dictionary setObject: self.sessionToken forKey: @"sessionToken"];
  }
  if (self.hasServerURL) {
    [dictionary setObject: self.serverURL forKey: @"serverURL"];
  }
  for (BNotification* element in self.userNotificationsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userNotifications"];
  }
  if (self.hasUserProfile) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userProfile storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userProfile"];
  }
  if (self.hasResetAllAppData) {
    [dictionary setObject: [NSNumber numberWithBool:self.resetAllAppData] forKey: @"resetAllAppData"];
  }
  if (self.hasAppOptions) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.appOptions storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"appOptions"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BSessionResponse class]]) {
    return NO;
  }
  BSessionResponse *otherMessage = other;
  return
      self.hasUserID == otherMessage.hasUserID &&
      (!self.hasUserID || [self.userID isEqual:otherMessage.userID]) &&
      self.hasSessionToken == otherMessage.hasSessionToken &&
      (!self.hasSessionToken || [self.sessionToken isEqual:otherMessage.sessionToken]) &&
      self.hasServerURL == otherMessage.hasServerURL &&
      (!self.hasServerURL || [self.serverURL isEqual:otherMessage.serverURL]) &&
      [self.userNotificationsArray isEqualToArray:otherMessage.userNotificationsArray] &&
      self.hasUserProfile == otherMessage.hasUserProfile &&
      (!self.hasUserProfile || [self.userProfile isEqual:otherMessage.userProfile]) &&
      self.hasResetAllAppData == otherMessage.hasResetAllAppData &&
      (!self.hasResetAllAppData || self.resetAllAppData == otherMessage.resetAllAppData) &&
      self.hasAppOptions == otherMessage.hasAppOptions &&
      (!self.hasAppOptions || [self.appOptions isEqual:otherMessage.appOptions]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserID) {
    hashCode = hashCode * 31 + [self.userID hash];
  }
  if (self.hasSessionToken) {
    hashCode = hashCode * 31 + [self.sessionToken hash];
  }
  if (self.hasServerURL) {
    hashCode = hashCode * 31 + [self.serverURL hash];
  }
  [self.userNotificationsArray enumerateObjectsUsingBlock:^(BNotification *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasUserProfile) {
    hashCode = hashCode * 31 + [self.userProfile hash];
  }
  if (self.hasResetAllAppData) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.resetAllAppData] hash];
  }
  if (self.hasAppOptions) {
    hashCode = hashCode * 31 + [self.appOptions hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BSessionResponseBuilder()
@property (strong) BSessionResponse* resultSessionResponse;
@end

@implementation BSessionResponseBuilder
@synthesize resultSessionResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSessionResponse = [[BSessionResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSessionResponse;
}
- (BSessionResponseBuilder*) clear {
  self.resultSessionResponse = [[BSessionResponse alloc] init];
  return self;
}
- (BSessionResponseBuilder*) clone {
  return [BSessionResponse builderWithPrototype:resultSessionResponse];
}
- (BSessionResponse*) defaultInstance {
  return [BSessionResponse defaultInstance];
}
- (BSessionResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BSessionResponse*) buildPartial {
  BSessionResponse* returnMe = resultSessionResponse;
  self.resultSessionResponse = nil;
  return returnMe;
}
- (BSessionResponseBuilder*) mergeFrom:(BSessionResponse*) other {
  if (other == [BSessionResponse defaultInstance]) {
    return self;
  }
  if (other.hasUserID) {
    [self setUserID:other.userID];
  }
  if (other.hasSessionToken) {
    [self setSessionToken:other.sessionToken];
  }
  if (other.hasServerURL) {
    [self setServerURL:other.serverURL];
  }
  if (other.userNotificationsArray.count > 0) {
    if (resultSessionResponse.userNotificationsArray == nil) {
      resultSessionResponse.userNotificationsArray = [[NSMutableArray alloc] initWithArray:other.userNotificationsArray];
    } else {
      [resultSessionResponse.userNotificationsArray addObjectsFromArray:other.userNotificationsArray];
    }
  }
  if (other.hasUserProfile) {
    [self mergeUserProfile:other.userProfile];
  }
  if (other.hasResetAllAppData) {
    [self setResetAllAppData:other.resetAllAppData];
  }
  if (other.hasAppOptions) {
    [self mergeAppOptions:other.appOptions];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BSessionResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BSessionResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserID:[input readString]];
        break;
      }
      case 18: {
        [self setSessionToken:[input readString]];
        break;
      }
      case 26: {
        [self setServerURL:[input readString]];
        break;
      }
      case 34: {
        BNotificationBuilder* subBuilder = [BNotification builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserNotifications:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        BUserProfileBuilder* subBuilder = [BUserProfile builder];
        if (self.hasUserProfile) {
          [subBuilder mergeFrom:self.userProfile];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserProfile:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setResetAllAppData:[input readBool]];
        break;
      }
      case 58: {
        BAppOptionsBuilder* subBuilder = [BAppOptions builder];
        if (self.hasAppOptions) {
          [subBuilder mergeFrom:self.appOptions];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAppOptions:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserID {
  return resultSessionResponse.hasUserID;
}
- (NSString*) userID {
  return resultSessionResponse.userID;
}
- (BSessionResponseBuilder*) setUserID:(NSString*) value {
  resultSessionResponse.hasUserID = YES;
  resultSessionResponse.userID = value;
  return self;
}
- (BSessionResponseBuilder*) clearUserID {
  resultSessionResponse.hasUserID = NO;
  resultSessionResponse.userID = @"";
  return self;
}
- (BOOL) hasSessionToken {
  return resultSessionResponse.hasSessionToken;
}
- (NSString*) sessionToken {
  return resultSessionResponse.sessionToken;
}
- (BSessionResponseBuilder*) setSessionToken:(NSString*) value {
  resultSessionResponse.hasSessionToken = YES;
  resultSessionResponse.sessionToken = value;
  return self;
}
- (BSessionResponseBuilder*) clearSessionToken {
  resultSessionResponse.hasSessionToken = NO;
  resultSessionResponse.sessionToken = @"";
  return self;
}
- (BOOL) hasServerURL {
  return resultSessionResponse.hasServerURL;
}
- (NSString*) serverURL {
  return resultSessionResponse.serverURL;
}
- (BSessionResponseBuilder*) setServerURL:(NSString*) value {
  resultSessionResponse.hasServerURL = YES;
  resultSessionResponse.serverURL = value;
  return self;
}
- (BSessionResponseBuilder*) clearServerURL {
  resultSessionResponse.hasServerURL = NO;
  resultSessionResponse.serverURL = @"";
  return self;
}
- (NSMutableArray *)userNotifications {
  return resultSessionResponse.userNotificationsArray;
}
- (BNotification*)userNotificationsAtIndex:(NSUInteger)index {
  return [resultSessionResponse userNotificationsAtIndex:index];
}
- (BSessionResponseBuilder *)addUserNotifications:(BNotification*)value {
  if (resultSessionResponse.userNotificationsArray == nil) {
    resultSessionResponse.userNotificationsArray = [[NSMutableArray alloc]init];
  }
  [resultSessionResponse.userNotificationsArray addObject:value];
  return self;
}
- (BSessionResponseBuilder *)setUserNotificationsArray:(NSArray *)array {
  resultSessionResponse.userNotificationsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BSessionResponseBuilder *)clearUserNotifications {
  resultSessionResponse.userNotificationsArray = nil;
  return self;
}
- (BOOL) hasUserProfile {
  return resultSessionResponse.hasUserProfile;
}
- (BUserProfile*) userProfile {
  return resultSessionResponse.userProfile;
}
- (BSessionResponseBuilder*) setUserProfile:(BUserProfile*) value {
  resultSessionResponse.hasUserProfile = YES;
  resultSessionResponse.userProfile = value;
  return self;
}
- (BSessionResponseBuilder*) setUserProfileBuilder:(BUserProfileBuilder*) builderForValue {
  return [self setUserProfile:[builderForValue build]];
}
- (BSessionResponseBuilder*) mergeUserProfile:(BUserProfile*) value {
  if (resultSessionResponse.hasUserProfile &&
      resultSessionResponse.userProfile != [BUserProfile defaultInstance]) {
    resultSessionResponse.userProfile =
      [[[BUserProfile builderWithPrototype:resultSessionResponse.userProfile] mergeFrom:value] buildPartial];
  } else {
    resultSessionResponse.userProfile = value;
  }
  resultSessionResponse.hasUserProfile = YES;
  return self;
}
- (BSessionResponseBuilder*) clearUserProfile {
  resultSessionResponse.hasUserProfile = NO;
  resultSessionResponse.userProfile = [BUserProfile defaultInstance];
  return self;
}
- (BOOL) hasResetAllAppData {
  return resultSessionResponse.hasResetAllAppData;
}
- (BOOL) resetAllAppData {
  return resultSessionResponse.resetAllAppData;
}
- (BSessionResponseBuilder*) setResetAllAppData:(BOOL) value {
  resultSessionResponse.hasResetAllAppData = YES;
  resultSessionResponse.resetAllAppData = value;
  return self;
}
- (BSessionResponseBuilder*) clearResetAllAppData {
  resultSessionResponse.hasResetAllAppData = NO;
  resultSessionResponse.resetAllAppData = NO;
  return self;
}
- (BOOL) hasAppOptions {
  return resultSessionResponse.hasAppOptions;
}
- (BAppOptions*) appOptions {
  return resultSessionResponse.appOptions;
}
- (BSessionResponseBuilder*) setAppOptions:(BAppOptions*) value {
  resultSessionResponse.hasAppOptions = YES;
  resultSessionResponse.appOptions = value;
  return self;
}
- (BSessionResponseBuilder*) setAppOptionsBuilder:(BAppOptionsBuilder*) builderForValue {
  return [self setAppOptions:[builderForValue build]];
}
- (BSessionResponseBuilder*) mergeAppOptions:(BAppOptions*) value {
  if (resultSessionResponse.hasAppOptions &&
      resultSessionResponse.appOptions != [BAppOptions defaultInstance]) {
    resultSessionResponse.appOptions =
      [[[BAppOptions builderWithPrototype:resultSessionResponse.appOptions] mergeFrom:value] buildPartial];
  } else {
    resultSessionResponse.appOptions = value;
  }
  resultSessionResponse.hasAppOptions = YES;
  return self;
}
- (BSessionResponseBuilder*) clearAppOptions {
  resultSessionResponse.hasAppOptions = NO;
  resultSessionResponse.appOptions = [BAppOptions defaultInstance];
  return self;
}
@end

@interface BClientRequest ()
@property (strong) NSString* sessionToken;
@property (strong) BSessionRequest* sessionRequest;
@property (strong) BUserTrackingBatch* userTrackingBatch;
@property (strong) BUserProfileUpdate* userProfileUpdate;
@property (strong) BUserProfileQuery* userProfileQuery;
@property (strong) BNotificationUpdate* notificationSendRequest;
@property (strong) BNotificationUpdate* notificationFetchRequest;
@property (strong) BDebugMessage* debugMessage;
@property (strong) BImageUpload* imageUpload;
@end

@implementation BClientRequest

- (BOOL) hasSessionToken {
  return !!hasSessionToken_;
}
- (void) setHasSessionToken:(BOOL) _value_ {
  hasSessionToken_ = !!_value_;
}
@synthesize sessionToken;
- (BOOL) hasSessionRequest {
  return !!hasSessionRequest_;
}
- (void) setHasSessionRequest:(BOOL) _value_ {
  hasSessionRequest_ = !!_value_;
}
@synthesize sessionRequest;
- (BOOL) hasUserTrackingBatch {
  return !!hasUserTrackingBatch_;
}
- (void) setHasUserTrackingBatch:(BOOL) _value_ {
  hasUserTrackingBatch_ = !!_value_;
}
@synthesize userTrackingBatch;
- (BOOL) hasUserProfileUpdate {
  return !!hasUserProfileUpdate_;
}
- (void) setHasUserProfileUpdate:(BOOL) _value_ {
  hasUserProfileUpdate_ = !!_value_;
}
@synthesize userProfileUpdate;
- (BOOL) hasUserProfileQuery {
  return !!hasUserProfileQuery_;
}
- (void) setHasUserProfileQuery:(BOOL) _value_ {
  hasUserProfileQuery_ = !!_value_;
}
@synthesize userProfileQuery;
- (BOOL) hasNotificationSendRequest {
  return !!hasNotificationSendRequest_;
}
- (void) setHasNotificationSendRequest:(BOOL) _value_ {
  hasNotificationSendRequest_ = !!_value_;
}
@synthesize notificationSendRequest;
- (BOOL) hasNotificationFetchRequest {
  return !!hasNotificationFetchRequest_;
}
- (void) setHasNotificationFetchRequest:(BOOL) _value_ {
  hasNotificationFetchRequest_ = !!_value_;
}
@synthesize notificationFetchRequest;
- (BOOL) hasDebugMessage {
  return !!hasDebugMessage_;
}
- (void) setHasDebugMessage:(BOOL) _value_ {
  hasDebugMessage_ = !!_value_;
}
@synthesize debugMessage;
- (BOOL) hasImageUpload {
  return !!hasImageUpload_;
}
- (void) setHasImageUpload:(BOOL) _value_ {
  hasImageUpload_ = !!_value_;
}
@synthesize imageUpload;
- (instancetype) init {
  if ((self = [super init])) {
    self.sessionToken = @"";
    self.sessionRequest = [BSessionRequest defaultInstance];
    self.userTrackingBatch = [BUserTrackingBatch defaultInstance];
    self.userProfileUpdate = [BUserProfileUpdate defaultInstance];
    self.userProfileQuery = [BUserProfileQuery defaultInstance];
    self.notificationSendRequest = [BNotificationUpdate defaultInstance];
    self.notificationFetchRequest = [BNotificationUpdate defaultInstance];
    self.debugMessage = [BDebugMessage defaultInstance];
    self.imageUpload = [BImageUpload defaultInstance];
  }
  return self;
}
static BClientRequest* defaultBClientRequestInstance = nil;
+ (void) initialize {
  if (self == [BClientRequest class]) {
    defaultBClientRequestInstance = [[BClientRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBClientRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBClientRequestInstance;
}
- (BOOL) isInitialized {
  if (self.hasSessionRequest) {
    if (!self.sessionRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserTrackingBatch) {
    if (!self.userTrackingBatch.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserProfileUpdate) {
    if (!self.userProfileUpdate.isInitialized) {
      return NO;
    }
  }
  if (self.hasNotificationSendRequest) {
    if (!self.notificationSendRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasNotificationFetchRequest) {
    if (!self.notificationFetchRequest.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionToken) {
    [output writeString:1 value:self.sessionToken];
  }
  if (self.hasSessionRequest) {
    [output writeMessage:2 value:self.sessionRequest];
  }
  if (self.hasUserTrackingBatch) {
    [output writeMessage:3 value:self.userTrackingBatch];
  }
  if (self.hasUserProfileUpdate) {
    [output writeMessage:4 value:self.userProfileUpdate];
  }
  if (self.hasUserProfileQuery) {
    [output writeMessage:5 value:self.userProfileQuery];
  }
  if (self.hasNotificationSendRequest) {
    [output writeMessage:7 value:self.notificationSendRequest];
  }
  if (self.hasNotificationFetchRequest) {
    [output writeMessage:8 value:self.notificationFetchRequest];
  }
  if (self.hasDebugMessage) {
    [output writeMessage:9 value:self.debugMessage];
  }
  if (self.hasImageUpload) {
    [output writeMessage:10 value:self.imageUpload];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSessionToken) {
    size_ += computeStringSize(1, self.sessionToken);
  }
  if (self.hasSessionRequest) {
    size_ += computeMessageSize(2, self.sessionRequest);
  }
  if (self.hasUserTrackingBatch) {
    size_ += computeMessageSize(3, self.userTrackingBatch);
  }
  if (self.hasUserProfileUpdate) {
    size_ += computeMessageSize(4, self.userProfileUpdate);
  }
  if (self.hasUserProfileQuery) {
    size_ += computeMessageSize(5, self.userProfileQuery);
  }
  if (self.hasNotificationSendRequest) {
    size_ += computeMessageSize(7, self.notificationSendRequest);
  }
  if (self.hasNotificationFetchRequest) {
    size_ += computeMessageSize(8, self.notificationFetchRequest);
  }
  if (self.hasDebugMessage) {
    size_ += computeMessageSize(9, self.debugMessage);
  }
  if (self.hasImageUpload) {
    size_ += computeMessageSize(10, self.imageUpload);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BClientRequest*) parseFromData:(NSData*) data {
  return (BClientRequest*)[[[BClientRequest builder] mergeFromData:data] build];
}
+ (BClientRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BClientRequest*)[[[BClientRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BClientRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BClientRequest*)[[[BClientRequest builder] mergeFromInputStream:input] build];
}
+ (BClientRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BClientRequest*)[[[BClientRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BClientRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BClientRequest*)[[[BClientRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BClientRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BClientRequest*)[[[BClientRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BClientRequestBuilder*) builder {
  return [[BClientRequestBuilder alloc] init];
}
+ (BClientRequestBuilder*) builderWithPrototype:(BClientRequest*) prototype {
  return [[BClientRequest builder] mergeFrom:prototype];
}
- (BClientRequestBuilder*) builder {
  return [BClientRequest builder];
}
- (BClientRequestBuilder*) toBuilder {
  return [BClientRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSessionToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionToken", self.sessionToken];
  }
  if (self.hasSessionRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"sessionRequest"];
    [self.sessionRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserTrackingBatch) {
    [output appendFormat:@"%@%@ {\n", indent, @"userTrackingBatch"];
    [self.userTrackingBatch writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserProfileUpdate) {
    [output appendFormat:@"%@%@ {\n", indent, @"userProfileUpdate"];
    [self.userProfileUpdate writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserProfileQuery) {
    [output appendFormat:@"%@%@ {\n", indent, @"userProfileQuery"];
    [self.userProfileQuery writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasNotificationSendRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"notificationSendRequest"];
    [self.notificationSendRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasNotificationFetchRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"notificationFetchRequest"];
    [self.notificationFetchRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDebugMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"debugMessage"];
    [self.debugMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasImageUpload) {
    [output appendFormat:@"%@%@ {\n", indent, @"imageUpload"];
    [self.imageUpload writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSessionToken) {
    [dictionary setObject: self.sessionToken forKey: @"sessionToken"];
  }
  if (self.hasSessionRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.sessionRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"sessionRequest"];
  }
  if (self.hasUserTrackingBatch) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userTrackingBatch storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userTrackingBatch"];
  }
  if (self.hasUserProfileUpdate) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userProfileUpdate storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userProfileUpdate"];
  }
  if (self.hasUserProfileQuery) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userProfileQuery storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userProfileQuery"];
  }
  if (self.hasNotificationSendRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.notificationSendRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"notificationSendRequest"];
  }
  if (self.hasNotificationFetchRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.notificationFetchRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"notificationFetchRequest"];
  }
  if (self.hasDebugMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.debugMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"debugMessage"];
  }
  if (self.hasImageUpload) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.imageUpload storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"imageUpload"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BClientRequest class]]) {
    return NO;
  }
  BClientRequest *otherMessage = other;
  return
      self.hasSessionToken == otherMessage.hasSessionToken &&
      (!self.hasSessionToken || [self.sessionToken isEqual:otherMessage.sessionToken]) &&
      self.hasSessionRequest == otherMessage.hasSessionRequest &&
      (!self.hasSessionRequest || [self.sessionRequest isEqual:otherMessage.sessionRequest]) &&
      self.hasUserTrackingBatch == otherMessage.hasUserTrackingBatch &&
      (!self.hasUserTrackingBatch || [self.userTrackingBatch isEqual:otherMessage.userTrackingBatch]) &&
      self.hasUserProfileUpdate == otherMessage.hasUserProfileUpdate &&
      (!self.hasUserProfileUpdate || [self.userProfileUpdate isEqual:otherMessage.userProfileUpdate]) &&
      self.hasUserProfileQuery == otherMessage.hasUserProfileQuery &&
      (!self.hasUserProfileQuery || [self.userProfileQuery isEqual:otherMessage.userProfileQuery]) &&
      self.hasNotificationSendRequest == otherMessage.hasNotificationSendRequest &&
      (!self.hasNotificationSendRequest || [self.notificationSendRequest isEqual:otherMessage.notificationSendRequest]) &&
      self.hasNotificationFetchRequest == otherMessage.hasNotificationFetchRequest &&
      (!self.hasNotificationFetchRequest || [self.notificationFetchRequest isEqual:otherMessage.notificationFetchRequest]) &&
      self.hasDebugMessage == otherMessage.hasDebugMessage &&
      (!self.hasDebugMessage || [self.debugMessage isEqual:otherMessage.debugMessage]) &&
      self.hasImageUpload == otherMessage.hasImageUpload &&
      (!self.hasImageUpload || [self.imageUpload isEqual:otherMessage.imageUpload]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSessionToken) {
    hashCode = hashCode * 31 + [self.sessionToken hash];
  }
  if (self.hasSessionRequest) {
    hashCode = hashCode * 31 + [self.sessionRequest hash];
  }
  if (self.hasUserTrackingBatch) {
    hashCode = hashCode * 31 + [self.userTrackingBatch hash];
  }
  if (self.hasUserProfileUpdate) {
    hashCode = hashCode * 31 + [self.userProfileUpdate hash];
  }
  if (self.hasUserProfileQuery) {
    hashCode = hashCode * 31 + [self.userProfileQuery hash];
  }
  if (self.hasNotificationSendRequest) {
    hashCode = hashCode * 31 + [self.notificationSendRequest hash];
  }
  if (self.hasNotificationFetchRequest) {
    hashCode = hashCode * 31 + [self.notificationFetchRequest hash];
  }
  if (self.hasDebugMessage) {
    hashCode = hashCode * 31 + [self.debugMessage hash];
  }
  if (self.hasImageUpload) {
    hashCode = hashCode * 31 + [self.imageUpload hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BClientRequestBuilder()
@property (strong) BClientRequest* resultClientRequest;
@end

@implementation BClientRequestBuilder
@synthesize resultClientRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultClientRequest = [[BClientRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultClientRequest;
}
- (BClientRequestBuilder*) clear {
  self.resultClientRequest = [[BClientRequest alloc] init];
  return self;
}
- (BClientRequestBuilder*) clone {
  return [BClientRequest builderWithPrototype:resultClientRequest];
}
- (BClientRequest*) defaultInstance {
  return [BClientRequest defaultInstance];
}
- (BClientRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BClientRequest*) buildPartial {
  BClientRequest* returnMe = resultClientRequest;
  self.resultClientRequest = nil;
  return returnMe;
}
- (BClientRequestBuilder*) mergeFrom:(BClientRequest*) other {
  if (other == [BClientRequest defaultInstance]) {
    return self;
  }
  if (other.hasSessionToken) {
    [self setSessionToken:other.sessionToken];
  }
  if (other.hasSessionRequest) {
    [self mergeSessionRequest:other.sessionRequest];
  }
  if (other.hasUserTrackingBatch) {
    [self mergeUserTrackingBatch:other.userTrackingBatch];
  }
  if (other.hasUserProfileUpdate) {
    [self mergeUserProfileUpdate:other.userProfileUpdate];
  }
  if (other.hasUserProfileQuery) {
    [self mergeUserProfileQuery:other.userProfileQuery];
  }
  if (other.hasNotificationSendRequest) {
    [self mergeNotificationSendRequest:other.notificationSendRequest];
  }
  if (other.hasNotificationFetchRequest) {
    [self mergeNotificationFetchRequest:other.notificationFetchRequest];
  }
  if (other.hasDebugMessage) {
    [self mergeDebugMessage:other.debugMessage];
  }
  if (other.hasImageUpload) {
    [self mergeImageUpload:other.imageUpload];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BClientRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BClientRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSessionToken:[input readString]];
        break;
      }
      case 18: {
        BSessionRequestBuilder* subBuilder = [BSessionRequest builder];
        if (self.hasSessionRequest) {
          [subBuilder mergeFrom:self.sessionRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSessionRequest:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        BUserTrackingBatchBuilder* subBuilder = [BUserTrackingBatch builder];
        if (self.hasUserTrackingBatch) {
          [subBuilder mergeFrom:self.userTrackingBatch];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserTrackingBatch:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        BUserProfileUpdateBuilder* subBuilder = [BUserProfileUpdate builder];
        if (self.hasUserProfileUpdate) {
          [subBuilder mergeFrom:self.userProfileUpdate];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserProfileUpdate:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        BUserProfileQueryBuilder* subBuilder = [BUserProfileQuery builder];
        if (self.hasUserProfileQuery) {
          [subBuilder mergeFrom:self.userProfileQuery];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserProfileQuery:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        BNotificationUpdateBuilder* subBuilder = [BNotificationUpdate builder];
        if (self.hasNotificationSendRequest) {
          [subBuilder mergeFrom:self.notificationSendRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNotificationSendRequest:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        BNotificationUpdateBuilder* subBuilder = [BNotificationUpdate builder];
        if (self.hasNotificationFetchRequest) {
          [subBuilder mergeFrom:self.notificationFetchRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNotificationFetchRequest:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        BDebugMessageBuilder* subBuilder = [BDebugMessage builder];
        if (self.hasDebugMessage) {
          [subBuilder mergeFrom:self.debugMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDebugMessage:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        BImageUploadBuilder* subBuilder = [BImageUpload builder];
        if (self.hasImageUpload) {
          [subBuilder mergeFrom:self.imageUpload];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setImageUpload:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionToken {
  return resultClientRequest.hasSessionToken;
}
- (NSString*) sessionToken {
  return resultClientRequest.sessionToken;
}
- (BClientRequestBuilder*) setSessionToken:(NSString*) value {
  resultClientRequest.hasSessionToken = YES;
  resultClientRequest.sessionToken = value;
  return self;
}
- (BClientRequestBuilder*) clearSessionToken {
  resultClientRequest.hasSessionToken = NO;
  resultClientRequest.sessionToken = @"";
  return self;
}
- (BOOL) hasSessionRequest {
  return resultClientRequest.hasSessionRequest;
}
- (BSessionRequest*) sessionRequest {
  return resultClientRequest.sessionRequest;
}
- (BClientRequestBuilder*) setSessionRequest:(BSessionRequest*) value {
  resultClientRequest.hasSessionRequest = YES;
  resultClientRequest.sessionRequest = value;
  return self;
}
- (BClientRequestBuilder*) setSessionRequestBuilder:(BSessionRequestBuilder*) builderForValue {
  return [self setSessionRequest:[builderForValue build]];
}
- (BClientRequestBuilder*) mergeSessionRequest:(BSessionRequest*) value {
  if (resultClientRequest.hasSessionRequest &&
      resultClientRequest.sessionRequest != [BSessionRequest defaultInstance]) {
    resultClientRequest.sessionRequest =
      [[[BSessionRequest builderWithPrototype:resultClientRequest.sessionRequest] mergeFrom:value] buildPartial];
  } else {
    resultClientRequest.sessionRequest = value;
  }
  resultClientRequest.hasSessionRequest = YES;
  return self;
}
- (BClientRequestBuilder*) clearSessionRequest {
  resultClientRequest.hasSessionRequest = NO;
  resultClientRequest.sessionRequest = [BSessionRequest defaultInstance];
  return self;
}
- (BOOL) hasUserTrackingBatch {
  return resultClientRequest.hasUserTrackingBatch;
}
- (BUserTrackingBatch*) userTrackingBatch {
  return resultClientRequest.userTrackingBatch;
}
- (BClientRequestBuilder*) setUserTrackingBatch:(BUserTrackingBatch*) value {
  resultClientRequest.hasUserTrackingBatch = YES;
  resultClientRequest.userTrackingBatch = value;
  return self;
}
- (BClientRequestBuilder*) setUserTrackingBatchBuilder:(BUserTrackingBatchBuilder*) builderForValue {
  return [self setUserTrackingBatch:[builderForValue build]];
}
- (BClientRequestBuilder*) mergeUserTrackingBatch:(BUserTrackingBatch*) value {
  if (resultClientRequest.hasUserTrackingBatch &&
      resultClientRequest.userTrackingBatch != [BUserTrackingBatch defaultInstance]) {
    resultClientRequest.userTrackingBatch =
      [[[BUserTrackingBatch builderWithPrototype:resultClientRequest.userTrackingBatch] mergeFrom:value] buildPartial];
  } else {
    resultClientRequest.userTrackingBatch = value;
  }
  resultClientRequest.hasUserTrackingBatch = YES;
  return self;
}
- (BClientRequestBuilder*) clearUserTrackingBatch {
  resultClientRequest.hasUserTrackingBatch = NO;
  resultClientRequest.userTrackingBatch = [BUserTrackingBatch defaultInstance];
  return self;
}
- (BOOL) hasUserProfileUpdate {
  return resultClientRequest.hasUserProfileUpdate;
}
- (BUserProfileUpdate*) userProfileUpdate {
  return resultClientRequest.userProfileUpdate;
}
- (BClientRequestBuilder*) setUserProfileUpdate:(BUserProfileUpdate*) value {
  resultClientRequest.hasUserProfileUpdate = YES;
  resultClientRequest.userProfileUpdate = value;
  return self;
}
- (BClientRequestBuilder*) setUserProfileUpdateBuilder:(BUserProfileUpdateBuilder*) builderForValue {
  return [self setUserProfileUpdate:[builderForValue build]];
}
- (BClientRequestBuilder*) mergeUserProfileUpdate:(BUserProfileUpdate*) value {
  if (resultClientRequest.hasUserProfileUpdate &&
      resultClientRequest.userProfileUpdate != [BUserProfileUpdate defaultInstance]) {
    resultClientRequest.userProfileUpdate =
      [[[BUserProfileUpdate builderWithPrototype:resultClientRequest.userProfileUpdate] mergeFrom:value] buildPartial];
  } else {
    resultClientRequest.userProfileUpdate = value;
  }
  resultClientRequest.hasUserProfileUpdate = YES;
  return self;
}
- (BClientRequestBuilder*) clearUserProfileUpdate {
  resultClientRequest.hasUserProfileUpdate = NO;
  resultClientRequest.userProfileUpdate = [BUserProfileUpdate defaultInstance];
  return self;
}
- (BOOL) hasUserProfileQuery {
  return resultClientRequest.hasUserProfileQuery;
}
- (BUserProfileQuery*) userProfileQuery {
  return resultClientRequest.userProfileQuery;
}
- (BClientRequestBuilder*) setUserProfileQuery:(BUserProfileQuery*) value {
  resultClientRequest.hasUserProfileQuery = YES;
  resultClientRequest.userProfileQuery = value;
  return self;
}
- (BClientRequestBuilder*) setUserProfileQueryBuilder:(BUserProfileQueryBuilder*) builderForValue {
  return [self setUserProfileQuery:[builderForValue build]];
}
- (BClientRequestBuilder*) mergeUserProfileQuery:(BUserProfileQuery*) value {
  if (resultClientRequest.hasUserProfileQuery &&
      resultClientRequest.userProfileQuery != [BUserProfileQuery defaultInstance]) {
    resultClientRequest.userProfileQuery =
      [[[BUserProfileQuery builderWithPrototype:resultClientRequest.userProfileQuery] mergeFrom:value] buildPartial];
  } else {
    resultClientRequest.userProfileQuery = value;
  }
  resultClientRequest.hasUserProfileQuery = YES;
  return self;
}
- (BClientRequestBuilder*) clearUserProfileQuery {
  resultClientRequest.hasUserProfileQuery = NO;
  resultClientRequest.userProfileQuery = [BUserProfileQuery defaultInstance];
  return self;
}
- (BOOL) hasNotificationSendRequest {
  return resultClientRequest.hasNotificationSendRequest;
}
- (BNotificationUpdate*) notificationSendRequest {
  return resultClientRequest.notificationSendRequest;
}
- (BClientRequestBuilder*) setNotificationSendRequest:(BNotificationUpdate*) value {
  resultClientRequest.hasNotificationSendRequest = YES;
  resultClientRequest.notificationSendRequest = value;
  return self;
}
- (BClientRequestBuilder*) setNotificationSendRequestBuilder:(BNotificationUpdateBuilder*) builderForValue {
  return [self setNotificationSendRequest:[builderForValue build]];
}
- (BClientRequestBuilder*) mergeNotificationSendRequest:(BNotificationUpdate*) value {
  if (resultClientRequest.hasNotificationSendRequest &&
      resultClientRequest.notificationSendRequest != [BNotificationUpdate defaultInstance]) {
    resultClientRequest.notificationSendRequest =
      [[[BNotificationUpdate builderWithPrototype:resultClientRequest.notificationSendRequest] mergeFrom:value] buildPartial];
  } else {
    resultClientRequest.notificationSendRequest = value;
  }
  resultClientRequest.hasNotificationSendRequest = YES;
  return self;
}
- (BClientRequestBuilder*) clearNotificationSendRequest {
  resultClientRequest.hasNotificationSendRequest = NO;
  resultClientRequest.notificationSendRequest = [BNotificationUpdate defaultInstance];
  return self;
}
- (BOOL) hasNotificationFetchRequest {
  return resultClientRequest.hasNotificationFetchRequest;
}
- (BNotificationUpdate*) notificationFetchRequest {
  return resultClientRequest.notificationFetchRequest;
}
- (BClientRequestBuilder*) setNotificationFetchRequest:(BNotificationUpdate*) value {
  resultClientRequest.hasNotificationFetchRequest = YES;
  resultClientRequest.notificationFetchRequest = value;
  return self;
}
- (BClientRequestBuilder*) setNotificationFetchRequestBuilder:(BNotificationUpdateBuilder*) builderForValue {
  return [self setNotificationFetchRequest:[builderForValue build]];
}
- (BClientRequestBuilder*) mergeNotificationFetchRequest:(BNotificationUpdate*) value {
  if (resultClientRequest.hasNotificationFetchRequest &&
      resultClientRequest.notificationFetchRequest != [BNotificationUpdate defaultInstance]) {
    resultClientRequest.notificationFetchRequest =
      [[[BNotificationUpdate builderWithPrototype:resultClientRequest.notificationFetchRequest] mergeFrom:value] buildPartial];
  } else {
    resultClientRequest.notificationFetchRequest = value;
  }
  resultClientRequest.hasNotificationFetchRequest = YES;
  return self;
}
- (BClientRequestBuilder*) clearNotificationFetchRequest {
  resultClientRequest.hasNotificationFetchRequest = NO;
  resultClientRequest.notificationFetchRequest = [BNotificationUpdate defaultInstance];
  return self;
}
- (BOOL) hasDebugMessage {
  return resultClientRequest.hasDebugMessage;
}
- (BDebugMessage*) debugMessage {
  return resultClientRequest.debugMessage;
}
- (BClientRequestBuilder*) setDebugMessage:(BDebugMessage*) value {
  resultClientRequest.hasDebugMessage = YES;
  resultClientRequest.debugMessage = value;
  return self;
}
- (BClientRequestBuilder*) setDebugMessageBuilder:(BDebugMessageBuilder*) builderForValue {
  return [self setDebugMessage:[builderForValue build]];
}
- (BClientRequestBuilder*) mergeDebugMessage:(BDebugMessage*) value {
  if (resultClientRequest.hasDebugMessage &&
      resultClientRequest.debugMessage != [BDebugMessage defaultInstance]) {
    resultClientRequest.debugMessage =
      [[[BDebugMessage builderWithPrototype:resultClientRequest.debugMessage] mergeFrom:value] buildPartial];
  } else {
    resultClientRequest.debugMessage = value;
  }
  resultClientRequest.hasDebugMessage = YES;
  return self;
}
- (BClientRequestBuilder*) clearDebugMessage {
  resultClientRequest.hasDebugMessage = NO;
  resultClientRequest.debugMessage = [BDebugMessage defaultInstance];
  return self;
}
- (BOOL) hasImageUpload {
  return resultClientRequest.hasImageUpload;
}
- (BImageUpload*) imageUpload {
  return resultClientRequest.imageUpload;
}
- (BClientRequestBuilder*) setImageUpload:(BImageUpload*) value {
  resultClientRequest.hasImageUpload = YES;
  resultClientRequest.imageUpload = value;
  return self;
}
- (BClientRequestBuilder*) setImageUploadBuilder:(BImageUploadBuilder*) builderForValue {
  return [self setImageUpload:[builderForValue build]];
}
- (BClientRequestBuilder*) mergeImageUpload:(BImageUpload*) value {
  if (resultClientRequest.hasImageUpload &&
      resultClientRequest.imageUpload != [BImageUpload defaultInstance]) {
    resultClientRequest.imageUpload =
      [[[BImageUpload builderWithPrototype:resultClientRequest.imageUpload] mergeFrom:value] buildPartial];
  } else {
    resultClientRequest.imageUpload = value;
  }
  resultClientRequest.hasImageUpload = YES;
  return self;
}
- (BClientRequestBuilder*) clearImageUpload {
  resultClientRequest.hasImageUpload = NO;
  resultClientRequest.imageUpload = [BImageUpload defaultInstance];
  return self;
}
@end

@interface BServerResponse ()
@property BResponseCode responseCode;
@property (strong) NSString* responseMessage;
@property (strong) BSessionResponse* sessionResponse;
@property (strong) BUserTrackingResponse* userTrackingResponse;
@property (strong) BUserProfileUpdate* profileUpdate;
@property (strong) BUserProfileQuery* profileQuery;
@property (strong) BNotificationUpdate* notificationUpdate;
@property (strong) BDebugMessage* debugMessage;
@property (strong) BImageUpload* imageUploadReply;
@end

@implementation BServerResponse

- (BOOL) hasResponseCode {
  return !!hasResponseCode_;
}
- (void) setHasResponseCode:(BOOL) _value_ {
  hasResponseCode_ = !!_value_;
}
@synthesize responseCode;
- (BOOL) hasResponseMessage {
  return !!hasResponseMessage_;
}
- (void) setHasResponseMessage:(BOOL) _value_ {
  hasResponseMessage_ = !!_value_;
}
@synthesize responseMessage;
- (BOOL) hasSessionResponse {
  return !!hasSessionResponse_;
}
- (void) setHasSessionResponse:(BOOL) _value_ {
  hasSessionResponse_ = !!_value_;
}
@synthesize sessionResponse;
- (BOOL) hasUserTrackingResponse {
  return !!hasUserTrackingResponse_;
}
- (void) setHasUserTrackingResponse:(BOOL) _value_ {
  hasUserTrackingResponse_ = !!_value_;
}
@synthesize userTrackingResponse;
- (BOOL) hasProfileUpdate {
  return !!hasProfileUpdate_;
}
- (void) setHasProfileUpdate:(BOOL) _value_ {
  hasProfileUpdate_ = !!_value_;
}
@synthesize profileUpdate;
- (BOOL) hasProfileQuery {
  return !!hasProfileQuery_;
}
- (void) setHasProfileQuery:(BOOL) _value_ {
  hasProfileQuery_ = !!_value_;
}
@synthesize profileQuery;
- (BOOL) hasNotificationUpdate {
  return !!hasNotificationUpdate_;
}
- (void) setHasNotificationUpdate:(BOOL) _value_ {
  hasNotificationUpdate_ = !!_value_;
}
@synthesize notificationUpdate;
- (BOOL) hasDebugMessage {
  return !!hasDebugMessage_;
}
- (void) setHasDebugMessage:(BOOL) _value_ {
  hasDebugMessage_ = !!_value_;
}
@synthesize debugMessage;
- (BOOL) hasImageUploadReply {
  return !!hasImageUploadReply_;
}
- (void) setHasImageUploadReply:(BOOL) _value_ {
  hasImageUploadReply_ = !!_value_;
}
@synthesize imageUploadReply;
- (instancetype) init {
  if ((self = [super init])) {
    self.responseCode = BResponseCodeRCSuccess;
    self.responseMessage = @"";
    self.sessionResponse = [BSessionResponse defaultInstance];
    self.userTrackingResponse = [BUserTrackingResponse defaultInstance];
    self.profileUpdate = [BUserProfileUpdate defaultInstance];
    self.profileQuery = [BUserProfileQuery defaultInstance];
    self.notificationUpdate = [BNotificationUpdate defaultInstance];
    self.debugMessage = [BDebugMessage defaultInstance];
    self.imageUploadReply = [BImageUpload defaultInstance];
  }
  return self;
}
static BServerResponse* defaultBServerResponseInstance = nil;
+ (void) initialize {
  if (self == [BServerResponse class]) {
    defaultBServerResponseInstance = [[BServerResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBServerResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultBServerResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasResponseCode) {
    return NO;
  }
  if (self.hasSessionResponse) {
    if (!self.sessionResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserTrackingResponse) {
    if (!self.userTrackingResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasProfileUpdate) {
    if (!self.profileUpdate.isInitialized) {
      return NO;
    }
  }
  if (self.hasNotificationUpdate) {
    if (!self.notificationUpdate.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResponseCode) {
    [output writeEnum:1 value:self.responseCode];
  }
  if (self.hasResponseMessage) {
    [output writeString:2 value:self.responseMessage];
  }
  if (self.hasSessionResponse) {
    [output writeMessage:3 value:self.sessionResponse];
  }
  if (self.hasUserTrackingResponse) {
    [output writeMessage:4 value:self.userTrackingResponse];
  }
  if (self.hasProfileUpdate) {
    [output writeMessage:5 value:self.profileUpdate];
  }
  if (self.hasProfileQuery) {
    [output writeMessage:6 value:self.profileQuery];
  }
  if (self.hasNotificationUpdate) {
    [output writeMessage:10 value:self.notificationUpdate];
  }
  if (self.hasDebugMessage) {
    [output writeMessage:12 value:self.debugMessage];
  }
  if (self.hasImageUploadReply) {
    [output writeMessage:13 value:self.imageUploadReply];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResponseCode) {
    size_ += computeEnumSize(1, self.responseCode);
  }
  if (self.hasResponseMessage) {
    size_ += computeStringSize(2, self.responseMessage);
  }
  if (self.hasSessionResponse) {
    size_ += computeMessageSize(3, self.sessionResponse);
  }
  if (self.hasUserTrackingResponse) {
    size_ += computeMessageSize(4, self.userTrackingResponse);
  }
  if (self.hasProfileUpdate) {
    size_ += computeMessageSize(5, self.profileUpdate);
  }
  if (self.hasProfileQuery) {
    size_ += computeMessageSize(6, self.profileQuery);
  }
  if (self.hasNotificationUpdate) {
    size_ += computeMessageSize(10, self.notificationUpdate);
  }
  if (self.hasDebugMessage) {
    size_ += computeMessageSize(12, self.debugMessage);
  }
  if (self.hasImageUploadReply) {
    size_ += computeMessageSize(13, self.imageUploadReply);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BServerResponse*) parseFromData:(NSData*) data {
  return (BServerResponse*)[[[BServerResponse builder] mergeFromData:data] build];
}
+ (BServerResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BServerResponse*)[[[BServerResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BServerResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BServerResponse*)[[[BServerResponse builder] mergeFromInputStream:input] build];
}
+ (BServerResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BServerResponse*)[[[BServerResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BServerResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BServerResponse*)[[[BServerResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BServerResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BServerResponse*)[[[BServerResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BServerResponseBuilder*) builder {
  return [[BServerResponseBuilder alloc] init];
}
+ (BServerResponseBuilder*) builderWithPrototype:(BServerResponse*) prototype {
  return [[BServerResponse builder] mergeFrom:prototype];
}
- (BServerResponseBuilder*) builder {
  return [BServerResponse builder];
}
- (BServerResponseBuilder*) toBuilder {
  return [BServerResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResponseCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"responseCode", NSStringFromBResponseCode(self.responseCode)];
  }
  if (self.hasResponseMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"responseMessage", self.responseMessage];
  }
  if (self.hasSessionResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"sessionResponse"];
    [self.sessionResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserTrackingResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"userTrackingResponse"];
    [self.userTrackingResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasProfileUpdate) {
    [output appendFormat:@"%@%@ {\n", indent, @"profileUpdate"];
    [self.profileUpdate writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasProfileQuery) {
    [output appendFormat:@"%@%@ {\n", indent, @"profileQuery"];
    [self.profileQuery writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasNotificationUpdate) {
    [output appendFormat:@"%@%@ {\n", indent, @"notificationUpdate"];
    [self.notificationUpdate writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDebugMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"debugMessage"];
    [self.debugMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasImageUploadReply) {
    [output appendFormat:@"%@%@ {\n", indent, @"imageUploadReply"];
    [self.imageUploadReply writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasResponseCode) {
    [dictionary setObject: @(self.responseCode) forKey: @"responseCode"];
  }
  if (self.hasResponseMessage) {
    [dictionary setObject: self.responseMessage forKey: @"responseMessage"];
  }
  if (self.hasSessionResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.sessionResponse storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"sessionResponse"];
  }
  if (self.hasUserTrackingResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userTrackingResponse storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userTrackingResponse"];
  }
  if (self.hasProfileUpdate) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.profileUpdate storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"profileUpdate"];
  }
  if (self.hasProfileQuery) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.profileQuery storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"profileQuery"];
  }
  if (self.hasNotificationUpdate) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.notificationUpdate storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"notificationUpdate"];
  }
  if (self.hasDebugMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.debugMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"debugMessage"];
  }
  if (self.hasImageUploadReply) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.imageUploadReply storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"imageUploadReply"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BServerResponse class]]) {
    return NO;
  }
  BServerResponse *otherMessage = other;
  return
      self.hasResponseCode == otherMessage.hasResponseCode &&
      (!self.hasResponseCode || self.responseCode == otherMessage.responseCode) &&
      self.hasResponseMessage == otherMessage.hasResponseMessage &&
      (!self.hasResponseMessage || [self.responseMessage isEqual:otherMessage.responseMessage]) &&
      self.hasSessionResponse == otherMessage.hasSessionResponse &&
      (!self.hasSessionResponse || [self.sessionResponse isEqual:otherMessage.sessionResponse]) &&
      self.hasUserTrackingResponse == otherMessage.hasUserTrackingResponse &&
      (!self.hasUserTrackingResponse || [self.userTrackingResponse isEqual:otherMessage.userTrackingResponse]) &&
      self.hasProfileUpdate == otherMessage.hasProfileUpdate &&
      (!self.hasProfileUpdate || [self.profileUpdate isEqual:otherMessage.profileUpdate]) &&
      self.hasProfileQuery == otherMessage.hasProfileQuery &&
      (!self.hasProfileQuery || [self.profileQuery isEqual:otherMessage.profileQuery]) &&
      self.hasNotificationUpdate == otherMessage.hasNotificationUpdate &&
      (!self.hasNotificationUpdate || [self.notificationUpdate isEqual:otherMessage.notificationUpdate]) &&
      self.hasDebugMessage == otherMessage.hasDebugMessage &&
      (!self.hasDebugMessage || [self.debugMessage isEqual:otherMessage.debugMessage]) &&
      self.hasImageUploadReply == otherMessage.hasImageUploadReply &&
      (!self.hasImageUploadReply || [self.imageUploadReply isEqual:otherMessage.imageUploadReply]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResponseCode) {
    hashCode = hashCode * 31 + self.responseCode;
  }
  if (self.hasResponseMessage) {
    hashCode = hashCode * 31 + [self.responseMessage hash];
  }
  if (self.hasSessionResponse) {
    hashCode = hashCode * 31 + [self.sessionResponse hash];
  }
  if (self.hasUserTrackingResponse) {
    hashCode = hashCode * 31 + [self.userTrackingResponse hash];
  }
  if (self.hasProfileUpdate) {
    hashCode = hashCode * 31 + [self.profileUpdate hash];
  }
  if (self.hasProfileQuery) {
    hashCode = hashCode * 31 + [self.profileQuery hash];
  }
  if (self.hasNotificationUpdate) {
    hashCode = hashCode * 31 + [self.notificationUpdate hash];
  }
  if (self.hasDebugMessage) {
    hashCode = hashCode * 31 + [self.debugMessage hash];
  }
  if (self.hasImageUploadReply) {
    hashCode = hashCode * 31 + [self.imageUploadReply hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BServerResponseBuilder()
@property (strong) BServerResponse* resultServerResponse;
@end

@implementation BServerResponseBuilder
@synthesize resultServerResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultServerResponse = [[BServerResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultServerResponse;
}
- (BServerResponseBuilder*) clear {
  self.resultServerResponse = [[BServerResponse alloc] init];
  return self;
}
- (BServerResponseBuilder*) clone {
  return [BServerResponse builderWithPrototype:resultServerResponse];
}
- (BServerResponse*) defaultInstance {
  return [BServerResponse defaultInstance];
}
- (BServerResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BServerResponse*) buildPartial {
  BServerResponse* returnMe = resultServerResponse;
  self.resultServerResponse = nil;
  return returnMe;
}
- (BServerResponseBuilder*) mergeFrom:(BServerResponse*) other {
  if (other == [BServerResponse defaultInstance]) {
    return self;
  }
  if (other.hasResponseCode) {
    [self setResponseCode:other.responseCode];
  }
  if (other.hasResponseMessage) {
    [self setResponseMessage:other.responseMessage];
  }
  if (other.hasSessionResponse) {
    [self mergeSessionResponse:other.sessionResponse];
  }
  if (other.hasUserTrackingResponse) {
    [self mergeUserTrackingResponse:other.userTrackingResponse];
  }
  if (other.hasProfileUpdate) {
    [self mergeProfileUpdate:other.profileUpdate];
  }
  if (other.hasProfileQuery) {
    [self mergeProfileQuery:other.profileQuery];
  }
  if (other.hasNotificationUpdate) {
    [self mergeNotificationUpdate:other.notificationUpdate];
  }
  if (other.hasDebugMessage) {
    [self mergeDebugMessage:other.debugMessage];
  }
  if (other.hasImageUploadReply) {
    [self mergeImageUploadReply:other.imageUploadReply];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BServerResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BServerResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        BResponseCode value = (BResponseCode)[input readEnum];
        if (BResponseCodeIsValidValue(value)) {
          [self setResponseCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setResponseMessage:[input readString]];
        break;
      }
      case 26: {
        BSessionResponseBuilder* subBuilder = [BSessionResponse builder];
        if (self.hasSessionResponse) {
          [subBuilder mergeFrom:self.sessionResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSessionResponse:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        BUserTrackingResponseBuilder* subBuilder = [BUserTrackingResponse builder];
        if (self.hasUserTrackingResponse) {
          [subBuilder mergeFrom:self.userTrackingResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserTrackingResponse:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        BUserProfileUpdateBuilder* subBuilder = [BUserProfileUpdate builder];
        if (self.hasProfileUpdate) {
          [subBuilder mergeFrom:self.profileUpdate];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setProfileUpdate:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        BUserProfileQueryBuilder* subBuilder = [BUserProfileQuery builder];
        if (self.hasProfileQuery) {
          [subBuilder mergeFrom:self.profileQuery];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setProfileQuery:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        BNotificationUpdateBuilder* subBuilder = [BNotificationUpdate builder];
        if (self.hasNotificationUpdate) {
          [subBuilder mergeFrom:self.notificationUpdate];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNotificationUpdate:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        BDebugMessageBuilder* subBuilder = [BDebugMessage builder];
        if (self.hasDebugMessage) {
          [subBuilder mergeFrom:self.debugMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDebugMessage:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        BImageUploadBuilder* subBuilder = [BImageUpload builder];
        if (self.hasImageUploadReply) {
          [subBuilder mergeFrom:self.imageUploadReply];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setImageUploadReply:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasResponseCode {
  return resultServerResponse.hasResponseCode;
}
- (BResponseCode) responseCode {
  return resultServerResponse.responseCode;
}
- (BServerResponseBuilder*) setResponseCode:(BResponseCode) value {
  resultServerResponse.hasResponseCode = YES;
  resultServerResponse.responseCode = value;
  return self;
}
- (BServerResponseBuilder*) clearResponseCode {
  resultServerResponse.hasResponseCode = NO;
  resultServerResponse.responseCode = BResponseCodeRCSuccess;
  return self;
}
- (BOOL) hasResponseMessage {
  return resultServerResponse.hasResponseMessage;
}
- (NSString*) responseMessage {
  return resultServerResponse.responseMessage;
}
- (BServerResponseBuilder*) setResponseMessage:(NSString*) value {
  resultServerResponse.hasResponseMessage = YES;
  resultServerResponse.responseMessage = value;
  return self;
}
- (BServerResponseBuilder*) clearResponseMessage {
  resultServerResponse.hasResponseMessage = NO;
  resultServerResponse.responseMessage = @"";
  return self;
}
- (BOOL) hasSessionResponse {
  return resultServerResponse.hasSessionResponse;
}
- (BSessionResponse*) sessionResponse {
  return resultServerResponse.sessionResponse;
}
- (BServerResponseBuilder*) setSessionResponse:(BSessionResponse*) value {
  resultServerResponse.hasSessionResponse = YES;
  resultServerResponse.sessionResponse = value;
  return self;
}
- (BServerResponseBuilder*) setSessionResponseBuilder:(BSessionResponseBuilder*) builderForValue {
  return [self setSessionResponse:[builderForValue build]];
}
- (BServerResponseBuilder*) mergeSessionResponse:(BSessionResponse*) value {
  if (resultServerResponse.hasSessionResponse &&
      resultServerResponse.sessionResponse != [BSessionResponse defaultInstance]) {
    resultServerResponse.sessionResponse =
      [[[BSessionResponse builderWithPrototype:resultServerResponse.sessionResponse] mergeFrom:value] buildPartial];
  } else {
    resultServerResponse.sessionResponse = value;
  }
  resultServerResponse.hasSessionResponse = YES;
  return self;
}
- (BServerResponseBuilder*) clearSessionResponse {
  resultServerResponse.hasSessionResponse = NO;
  resultServerResponse.sessionResponse = [BSessionResponse defaultInstance];
  return self;
}
- (BOOL) hasUserTrackingResponse {
  return resultServerResponse.hasUserTrackingResponse;
}
- (BUserTrackingResponse*) userTrackingResponse {
  return resultServerResponse.userTrackingResponse;
}
- (BServerResponseBuilder*) setUserTrackingResponse:(BUserTrackingResponse*) value {
  resultServerResponse.hasUserTrackingResponse = YES;
  resultServerResponse.userTrackingResponse = value;
  return self;
}
- (BServerResponseBuilder*) setUserTrackingResponseBuilder:(BUserTrackingResponseBuilder*) builderForValue {
  return [self setUserTrackingResponse:[builderForValue build]];
}
- (BServerResponseBuilder*) mergeUserTrackingResponse:(BUserTrackingResponse*) value {
  if (resultServerResponse.hasUserTrackingResponse &&
      resultServerResponse.userTrackingResponse != [BUserTrackingResponse defaultInstance]) {
    resultServerResponse.userTrackingResponse =
      [[[BUserTrackingResponse builderWithPrototype:resultServerResponse.userTrackingResponse] mergeFrom:value] buildPartial];
  } else {
    resultServerResponse.userTrackingResponse = value;
  }
  resultServerResponse.hasUserTrackingResponse = YES;
  return self;
}
- (BServerResponseBuilder*) clearUserTrackingResponse {
  resultServerResponse.hasUserTrackingResponse = NO;
  resultServerResponse.userTrackingResponse = [BUserTrackingResponse defaultInstance];
  return self;
}
- (BOOL) hasProfileUpdate {
  return resultServerResponse.hasProfileUpdate;
}
- (BUserProfileUpdate*) profileUpdate {
  return resultServerResponse.profileUpdate;
}
- (BServerResponseBuilder*) setProfileUpdate:(BUserProfileUpdate*) value {
  resultServerResponse.hasProfileUpdate = YES;
  resultServerResponse.profileUpdate = value;
  return self;
}
- (BServerResponseBuilder*) setProfileUpdateBuilder:(BUserProfileUpdateBuilder*) builderForValue {
  return [self setProfileUpdate:[builderForValue build]];
}
- (BServerResponseBuilder*) mergeProfileUpdate:(BUserProfileUpdate*) value {
  if (resultServerResponse.hasProfileUpdate &&
      resultServerResponse.profileUpdate != [BUserProfileUpdate defaultInstance]) {
    resultServerResponse.profileUpdate =
      [[[BUserProfileUpdate builderWithPrototype:resultServerResponse.profileUpdate] mergeFrom:value] buildPartial];
  } else {
    resultServerResponse.profileUpdate = value;
  }
  resultServerResponse.hasProfileUpdate = YES;
  return self;
}
- (BServerResponseBuilder*) clearProfileUpdate {
  resultServerResponse.hasProfileUpdate = NO;
  resultServerResponse.profileUpdate = [BUserProfileUpdate defaultInstance];
  return self;
}
- (BOOL) hasProfileQuery {
  return resultServerResponse.hasProfileQuery;
}
- (BUserProfileQuery*) profileQuery {
  return resultServerResponse.profileQuery;
}
- (BServerResponseBuilder*) setProfileQuery:(BUserProfileQuery*) value {
  resultServerResponse.hasProfileQuery = YES;
  resultServerResponse.profileQuery = value;
  return self;
}
- (BServerResponseBuilder*) setProfileQueryBuilder:(BUserProfileQueryBuilder*) builderForValue {
  return [self setProfileQuery:[builderForValue build]];
}
- (BServerResponseBuilder*) mergeProfileQuery:(BUserProfileQuery*) value {
  if (resultServerResponse.hasProfileQuery &&
      resultServerResponse.profileQuery != [BUserProfileQuery defaultInstance]) {
    resultServerResponse.profileQuery =
      [[[BUserProfileQuery builderWithPrototype:resultServerResponse.profileQuery] mergeFrom:value] buildPartial];
  } else {
    resultServerResponse.profileQuery = value;
  }
  resultServerResponse.hasProfileQuery = YES;
  return self;
}
- (BServerResponseBuilder*) clearProfileQuery {
  resultServerResponse.hasProfileQuery = NO;
  resultServerResponse.profileQuery = [BUserProfileQuery defaultInstance];
  return self;
}
- (BOOL) hasNotificationUpdate {
  return resultServerResponse.hasNotificationUpdate;
}
- (BNotificationUpdate*) notificationUpdate {
  return resultServerResponse.notificationUpdate;
}
- (BServerResponseBuilder*) setNotificationUpdate:(BNotificationUpdate*) value {
  resultServerResponse.hasNotificationUpdate = YES;
  resultServerResponse.notificationUpdate = value;
  return self;
}
- (BServerResponseBuilder*) setNotificationUpdateBuilder:(BNotificationUpdateBuilder*) builderForValue {
  return [self setNotificationUpdate:[builderForValue build]];
}
- (BServerResponseBuilder*) mergeNotificationUpdate:(BNotificationUpdate*) value {
  if (resultServerResponse.hasNotificationUpdate &&
      resultServerResponse.notificationUpdate != [BNotificationUpdate defaultInstance]) {
    resultServerResponse.notificationUpdate =
      [[[BNotificationUpdate builderWithPrototype:resultServerResponse.notificationUpdate] mergeFrom:value] buildPartial];
  } else {
    resultServerResponse.notificationUpdate = value;
  }
  resultServerResponse.hasNotificationUpdate = YES;
  return self;
}
- (BServerResponseBuilder*) clearNotificationUpdate {
  resultServerResponse.hasNotificationUpdate = NO;
  resultServerResponse.notificationUpdate = [BNotificationUpdate defaultInstance];
  return self;
}
- (BOOL) hasDebugMessage {
  return resultServerResponse.hasDebugMessage;
}
- (BDebugMessage*) debugMessage {
  return resultServerResponse.debugMessage;
}
- (BServerResponseBuilder*) setDebugMessage:(BDebugMessage*) value {
  resultServerResponse.hasDebugMessage = YES;
  resultServerResponse.debugMessage = value;
  return self;
}
- (BServerResponseBuilder*) setDebugMessageBuilder:(BDebugMessageBuilder*) builderForValue {
  return [self setDebugMessage:[builderForValue build]];
}
- (BServerResponseBuilder*) mergeDebugMessage:(BDebugMessage*) value {
  if (resultServerResponse.hasDebugMessage &&
      resultServerResponse.debugMessage != [BDebugMessage defaultInstance]) {
    resultServerResponse.debugMessage =
      [[[BDebugMessage builderWithPrototype:resultServerResponse.debugMessage] mergeFrom:value] buildPartial];
  } else {
    resultServerResponse.debugMessage = value;
  }
  resultServerResponse.hasDebugMessage = YES;
  return self;
}
- (BServerResponseBuilder*) clearDebugMessage {
  resultServerResponse.hasDebugMessage = NO;
  resultServerResponse.debugMessage = [BDebugMessage defaultInstance];
  return self;
}
- (BOOL) hasImageUploadReply {
  return resultServerResponse.hasImageUploadReply;
}
- (BImageUpload*) imageUploadReply {
  return resultServerResponse.imageUploadReply;
}
- (BServerResponseBuilder*) setImageUploadReply:(BImageUpload*) value {
  resultServerResponse.hasImageUploadReply = YES;
  resultServerResponse.imageUploadReply = value;
  return self;
}
- (BServerResponseBuilder*) setImageUploadReplyBuilder:(BImageUploadBuilder*) builderForValue {
  return [self setImageUploadReply:[builderForValue build]];
}
- (BServerResponseBuilder*) mergeImageUploadReply:(BImageUpload*) value {
  if (resultServerResponse.hasImageUploadReply &&
      resultServerResponse.imageUploadReply != [BImageUpload defaultInstance]) {
    resultServerResponse.imageUploadReply =
      [[[BImageUpload builderWithPrototype:resultServerResponse.imageUploadReply] mergeFrom:value] buildPartial];
  } else {
    resultServerResponse.imageUploadReply = value;
  }
  resultServerResponse.hasImageUploadReply = YES;
  return self;
}
- (BServerResponseBuilder*) clearImageUploadReply {
  resultServerResponse.hasImageUploadReply = NO;
  resultServerResponse.imageUploadReply = [BImageUpload defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
