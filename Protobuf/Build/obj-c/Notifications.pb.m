// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Notifications.pb.h"
// @@protoc_insertion_point(imports)

@implementation BNotificationsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BNotificationsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    [BTypesRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL BNotificationTypeIsValidValue(BNotificationType value) {
  switch (value) {
    case BNotificationTypeNTUnknown:
    case BNotificationTypeNTSystem:
    case BNotificationTypeNTNotification:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBNotificationType(BNotificationType value) {
  switch (value) {
    case BNotificationTypeNTUnknown:
      return @"BNotificationTypeNTUnknown";
    case BNotificationTypeNTSystem:
      return @"BNotificationTypeNTSystem";
    case BNotificationTypeNTNotification:
      return @"BNotificationTypeNTNotification";
    default:
      return nil;
  }
}

BOOL BNotificationStatusIsValidValue(BNotificationStatus value) {
  switch (value) {
    case BNotificationStatusNSNew:
    case BNotificationStatusNSHidden:
    case BNotificationStatusNSRead:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBNotificationStatus(BNotificationStatus value) {
  switch (value) {
    case BNotificationStatusNSNew:
      return @"BNotificationStatusNSNew";
    case BNotificationStatusNSHidden:
      return @"BNotificationStatusNSHidden";
    case BNotificationStatusNSRead:
      return @"BNotificationStatusNSRead";
    default:
      return nil;
  }
}

@interface BNotification ()
@property (strong) NSString* messageID;
@property (strong) NSString* senderID;
@property (strong) NSMutableArray * recipientsArray;
@property (strong) BTimestamp* creationDate;
@property (strong) BTimestamp* notificationDate;
@property (strong) BTimestamp* readDate;
@property BNotificationType messageType;
@property (strong) NSString* messageText;
@property BNotificationStatus messageStatus;
@property (strong) NSString* actionIcon;
@property (strong) NSString* actionURL;
@end

@implementation BNotification

- (BOOL) hasMessageID {
  return !!hasMessageID_;
}
- (void) setHasMessageID:(BOOL) _value_ {
  hasMessageID_ = !!_value_;
}
@synthesize messageID;
- (BOOL) hasSenderID {
  return !!hasSenderID_;
}
- (void) setHasSenderID:(BOOL) _value_ {
  hasSenderID_ = !!_value_;
}
@synthesize senderID;
@synthesize recipientsArray;
@dynamic recipients;
- (BOOL) hasCreationDate {
  return !!hasCreationDate_;
}
- (void) setHasCreationDate:(BOOL) _value_ {
  hasCreationDate_ = !!_value_;
}
@synthesize creationDate;
- (BOOL) hasNotificationDate {
  return !!hasNotificationDate_;
}
- (void) setHasNotificationDate:(BOOL) _value_ {
  hasNotificationDate_ = !!_value_;
}
@synthesize notificationDate;
- (BOOL) hasReadDate {
  return !!hasReadDate_;
}
- (void) setHasReadDate:(BOOL) _value_ {
  hasReadDate_ = !!_value_;
}
@synthesize readDate;
- (BOOL) hasMessageType {
  return !!hasMessageType_;
}
- (void) setHasMessageType:(BOOL) _value_ {
  hasMessageType_ = !!_value_;
}
@synthesize messageType;
- (BOOL) hasMessageText {
  return !!hasMessageText_;
}
- (void) setHasMessageText:(BOOL) _value_ {
  hasMessageText_ = !!_value_;
}
@synthesize messageText;
- (BOOL) hasMessageStatus {
  return !!hasMessageStatus_;
}
- (void) setHasMessageStatus:(BOOL) _value_ {
  hasMessageStatus_ = !!_value_;
}
@synthesize messageStatus;
- (BOOL) hasActionIcon {
  return !!hasActionIcon_;
}
- (void) setHasActionIcon:(BOOL) _value_ {
  hasActionIcon_ = !!_value_;
}
@synthesize actionIcon;
- (BOOL) hasActionURL {
  return !!hasActionURL_;
}
- (void) setHasActionURL:(BOOL) _value_ {
  hasActionURL_ = !!_value_;
}
@synthesize actionURL;
- (instancetype) init {
  if ((self = [super init])) {
    self.messageID = @"";
    self.senderID = @"";
    self.creationDate = [BTimestamp defaultInstance];
    self.notificationDate = [BTimestamp defaultInstance];
    self.readDate = [BTimestamp defaultInstance];
    self.messageType = BNotificationTypeNTUnknown;
    self.messageText = @"";
    self.messageStatus = BNotificationStatusNSNew;
    self.actionIcon = @"";
    self.actionURL = @"";
  }
  return self;
}
static BNotification* defaultBNotificationInstance = nil;
+ (void) initialize {
  if (self == [BNotification class]) {
    defaultBNotificationInstance = [[BNotification alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBNotificationInstance;
}
- (instancetype) defaultInstance {
  return defaultBNotificationInstance;
}
- (NSArray *)recipients {
  return recipientsArray;
}
- (NSString*)recipientsAtIndex:(NSUInteger)index {
  return [recipientsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasCreationDate) {
    if (!self.creationDate.isInitialized) {
      return NO;
    }
  }
  if (self.hasNotificationDate) {
    if (!self.notificationDate.isInitialized) {
      return NO;
    }
  }
  if (self.hasReadDate) {
    if (!self.readDate.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMessageID) {
    [output writeString:1 value:self.messageID];
  }
  if (self.hasSenderID) {
    [output writeString:2 value:self.senderID];
  }
  [self.recipientsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:3 value:element];
  }];
  if (self.hasCreationDate) {
    [output writeMessage:4 value:self.creationDate];
  }
  if (self.hasNotificationDate) {
    [output writeMessage:5 value:self.notificationDate];
  }
  if (self.hasReadDate) {
    [output writeMessage:6 value:self.readDate];
  }
  if (self.hasMessageType) {
    [output writeEnum:7 value:self.messageType];
  }
  if (self.hasMessageText) {
    [output writeString:8 value:self.messageText];
  }
  if (self.hasMessageStatus) {
    [output writeEnum:9 value:self.messageStatus];
  }
  if (self.hasActionIcon) {
    [output writeString:10 value:self.actionIcon];
  }
  if (self.hasActionURL) {
    [output writeString:11 value:self.actionURL];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMessageID) {
    size_ += computeStringSize(1, self.messageID);
  }
  if (self.hasSenderID) {
    size_ += computeStringSize(2, self.senderID);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.recipientsArray.count;
    [self.recipientsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasCreationDate) {
    size_ += computeMessageSize(4, self.creationDate);
  }
  if (self.hasNotificationDate) {
    size_ += computeMessageSize(5, self.notificationDate);
  }
  if (self.hasReadDate) {
    size_ += computeMessageSize(6, self.readDate);
  }
  if (self.hasMessageType) {
    size_ += computeEnumSize(7, self.messageType);
  }
  if (self.hasMessageText) {
    size_ += computeStringSize(8, self.messageText);
  }
  if (self.hasMessageStatus) {
    size_ += computeEnumSize(9, self.messageStatus);
  }
  if (self.hasActionIcon) {
    size_ += computeStringSize(10, self.actionIcon);
  }
  if (self.hasActionURL) {
    size_ += computeStringSize(11, self.actionURL);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BNotification*) parseFromData:(NSData*) data {
  return (BNotification*)[[[BNotification builder] mergeFromData:data] build];
}
+ (BNotification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BNotification*)[[[BNotification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BNotification*) parseFromInputStream:(NSInputStream*) input {
  return (BNotification*)[[[BNotification builder] mergeFromInputStream:input] build];
}
+ (BNotification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BNotification*)[[[BNotification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BNotification*)[[[BNotification builder] mergeFromCodedInputStream:input] build];
}
+ (BNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BNotification*)[[[BNotification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BNotificationBuilder*) builder {
  return [[BNotificationBuilder alloc] init];
}
+ (BNotificationBuilder*) builderWithPrototype:(BNotification*) prototype {
  return [[BNotification builder] mergeFrom:prototype];
}
- (BNotificationBuilder*) builder {
  return [BNotification builder];
}
- (BNotificationBuilder*) toBuilder {
  return [BNotification builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMessageID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageID", self.messageID];
  }
  if (self.hasSenderID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"senderID", self.senderID];
  }
  [self.recipientsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recipients", obj];
  }];
  if (self.hasCreationDate) {
    [output appendFormat:@"%@%@ {\n", indent, @"creationDate"];
    [self.creationDate writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasNotificationDate) {
    [output appendFormat:@"%@%@ {\n", indent, @"notificationDate"];
    [self.notificationDate writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasReadDate) {
    [output appendFormat:@"%@%@ {\n", indent, @"readDate"];
    [self.readDate writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMessageType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageType", NSStringFromBNotificationType(self.messageType)];
  }
  if (self.hasMessageText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageText", self.messageText];
  }
  if (self.hasMessageStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageStatus", NSStringFromBNotificationStatus(self.messageStatus)];
  }
  if (self.hasActionIcon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionIcon", self.actionIcon];
  }
  if (self.hasActionURL) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionURL", self.actionURL];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMessageID) {
    [dictionary setObject: self.messageID forKey: @"messageID"];
  }
  if (self.hasSenderID) {
    [dictionary setObject: self.senderID forKey: @"senderID"];
  }
  [dictionary setObject:self.recipients forKey: @"recipients"];
  if (self.hasCreationDate) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.creationDate storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"creationDate"];
  }
  if (self.hasNotificationDate) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.notificationDate storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"notificationDate"];
  }
  if (self.hasReadDate) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.readDate storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"readDate"];
  }
  if (self.hasMessageType) {
    [dictionary setObject: @(self.messageType) forKey: @"messageType"];
  }
  if (self.hasMessageText) {
    [dictionary setObject: self.messageText forKey: @"messageText"];
  }
  if (self.hasMessageStatus) {
    [dictionary setObject: @(self.messageStatus) forKey: @"messageStatus"];
  }
  if (self.hasActionIcon) {
    [dictionary setObject: self.actionIcon forKey: @"actionIcon"];
  }
  if (self.hasActionURL) {
    [dictionary setObject: self.actionURL forKey: @"actionURL"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BNotification class]]) {
    return NO;
  }
  BNotification *otherMessage = other;
  return
      self.hasMessageID == otherMessage.hasMessageID &&
      (!self.hasMessageID || [self.messageID isEqual:otherMessage.messageID]) &&
      self.hasSenderID == otherMessage.hasSenderID &&
      (!self.hasSenderID || [self.senderID isEqual:otherMessage.senderID]) &&
      [self.recipientsArray isEqualToArray:otherMessage.recipientsArray] &&
      self.hasCreationDate == otherMessage.hasCreationDate &&
      (!self.hasCreationDate || [self.creationDate isEqual:otherMessage.creationDate]) &&
      self.hasNotificationDate == otherMessage.hasNotificationDate &&
      (!self.hasNotificationDate || [self.notificationDate isEqual:otherMessage.notificationDate]) &&
      self.hasReadDate == otherMessage.hasReadDate &&
      (!self.hasReadDate || [self.readDate isEqual:otherMessage.readDate]) &&
      self.hasMessageType == otherMessage.hasMessageType &&
      (!self.hasMessageType || self.messageType == otherMessage.messageType) &&
      self.hasMessageText == otherMessage.hasMessageText &&
      (!self.hasMessageText || [self.messageText isEqual:otherMessage.messageText]) &&
      self.hasMessageStatus == otherMessage.hasMessageStatus &&
      (!self.hasMessageStatus || self.messageStatus == otherMessage.messageStatus) &&
      self.hasActionIcon == otherMessage.hasActionIcon &&
      (!self.hasActionIcon || [self.actionIcon isEqual:otherMessage.actionIcon]) &&
      self.hasActionURL == otherMessage.hasActionURL &&
      (!self.hasActionURL || [self.actionURL isEqual:otherMessage.actionURL]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMessageID) {
    hashCode = hashCode * 31 + [self.messageID hash];
  }
  if (self.hasSenderID) {
    hashCode = hashCode * 31 + [self.senderID hash];
  }
  [self.recipientsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasCreationDate) {
    hashCode = hashCode * 31 + [self.creationDate hash];
  }
  if (self.hasNotificationDate) {
    hashCode = hashCode * 31 + [self.notificationDate hash];
  }
  if (self.hasReadDate) {
    hashCode = hashCode * 31 + [self.readDate hash];
  }
  if (self.hasMessageType) {
    hashCode = hashCode * 31 + self.messageType;
  }
  if (self.hasMessageText) {
    hashCode = hashCode * 31 + [self.messageText hash];
  }
  if (self.hasMessageStatus) {
    hashCode = hashCode * 31 + self.messageStatus;
  }
  if (self.hasActionIcon) {
    hashCode = hashCode * 31 + [self.actionIcon hash];
  }
  if (self.hasActionURL) {
    hashCode = hashCode * 31 + [self.actionURL hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BNotificationBuilder()
@property (strong) BNotification* resultNotification;
@end

@implementation BNotificationBuilder
@synthesize resultNotification;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNotification = [[BNotification alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNotification;
}
- (BNotificationBuilder*) clear {
  self.resultNotification = [[BNotification alloc] init];
  return self;
}
- (BNotificationBuilder*) clone {
  return [BNotification builderWithPrototype:resultNotification];
}
- (BNotification*) defaultInstance {
  return [BNotification defaultInstance];
}
- (BNotification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BNotification*) buildPartial {
  BNotification* returnMe = resultNotification;
  self.resultNotification = nil;
  return returnMe;
}
- (BNotificationBuilder*) mergeFrom:(BNotification*) other {
  if (other == [BNotification defaultInstance]) {
    return self;
  }
  if (other.hasMessageID) {
    [self setMessageID:other.messageID];
  }
  if (other.hasSenderID) {
    [self setSenderID:other.senderID];
  }
  if (other.recipientsArray.count > 0) {
    if (resultNotification.recipientsArray == nil) {
      resultNotification.recipientsArray = [[NSMutableArray alloc] initWithArray:other.recipientsArray];
    } else {
      [resultNotification.recipientsArray addObjectsFromArray:other.recipientsArray];
    }
  }
  if (other.hasCreationDate) {
    [self mergeCreationDate:other.creationDate];
  }
  if (other.hasNotificationDate) {
    [self mergeNotificationDate:other.notificationDate];
  }
  if (other.hasReadDate) {
    [self mergeReadDate:other.readDate];
  }
  if (other.hasMessageType) {
    [self setMessageType:other.messageType];
  }
  if (other.hasMessageText) {
    [self setMessageText:other.messageText];
  }
  if (other.hasMessageStatus) {
    [self setMessageStatus:other.messageStatus];
  }
  if (other.hasActionIcon) {
    [self setActionIcon:other.actionIcon];
  }
  if (other.hasActionURL) {
    [self setActionURL:other.actionURL];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMessageID:[input readString]];
        break;
      }
      case 18: {
        [self setSenderID:[input readString]];
        break;
      }
      case 26: {
        [self addRecipients:[input readString]];
        break;
      }
      case 34: {
        BTimestampBuilder* subBuilder = [BTimestamp builder];
        if (self.hasCreationDate) {
          [subBuilder mergeFrom:self.creationDate];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreationDate:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        BTimestampBuilder* subBuilder = [BTimestamp builder];
        if (self.hasNotificationDate) {
          [subBuilder mergeFrom:self.notificationDate];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNotificationDate:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        BTimestampBuilder* subBuilder = [BTimestamp builder];
        if (self.hasReadDate) {
          [subBuilder mergeFrom:self.readDate];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setReadDate:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        BNotificationType value = (BNotificationType)[input readEnum];
        if (BNotificationTypeIsValidValue(value)) {
          [self setMessageType:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 66: {
        [self setMessageText:[input readString]];
        break;
      }
      case 72: {
        BNotificationStatus value = (BNotificationStatus)[input readEnum];
        if (BNotificationStatusIsValidValue(value)) {
          [self setMessageStatus:value];
        } else {
          [unknownFields mergeVarintField:9 value:value];
        }
        break;
      }
      case 82: {
        [self setActionIcon:[input readString]];
        break;
      }
      case 90: {
        [self setActionURL:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMessageID {
  return resultNotification.hasMessageID;
}
- (NSString*) messageID {
  return resultNotification.messageID;
}
- (BNotificationBuilder*) setMessageID:(NSString*) value {
  resultNotification.hasMessageID = YES;
  resultNotification.messageID = value;
  return self;
}
- (BNotificationBuilder*) clearMessageID {
  resultNotification.hasMessageID = NO;
  resultNotification.messageID = @"";
  return self;
}
- (BOOL) hasSenderID {
  return resultNotification.hasSenderID;
}
- (NSString*) senderID {
  return resultNotification.senderID;
}
- (BNotificationBuilder*) setSenderID:(NSString*) value {
  resultNotification.hasSenderID = YES;
  resultNotification.senderID = value;
  return self;
}
- (BNotificationBuilder*) clearSenderID {
  resultNotification.hasSenderID = NO;
  resultNotification.senderID = @"";
  return self;
}
- (NSMutableArray *)recipients {
  return resultNotification.recipientsArray;
}
- (NSString*)recipientsAtIndex:(NSUInteger)index {
  return [resultNotification recipientsAtIndex:index];
}
- (BNotificationBuilder *)addRecipients:(NSString*)value {
  if (resultNotification.recipientsArray == nil) {
    resultNotification.recipientsArray = [[NSMutableArray alloc]init];
  }
  [resultNotification.recipientsArray addObject:value];
  return self;
}
- (BNotificationBuilder *)setRecipientsArray:(NSArray *)array {
  resultNotification.recipientsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (BNotificationBuilder *)clearRecipients {
  resultNotification.recipientsArray = nil;
  return self;
}
- (BOOL) hasCreationDate {
  return resultNotification.hasCreationDate;
}
- (BTimestamp*) creationDate {
  return resultNotification.creationDate;
}
- (BNotificationBuilder*) setCreationDate:(BTimestamp*) value {
  resultNotification.hasCreationDate = YES;
  resultNotification.creationDate = value;
  return self;
}
- (BNotificationBuilder*) setCreationDateBuilder:(BTimestampBuilder*) builderForValue {
  return [self setCreationDate:[builderForValue build]];
}
- (BNotificationBuilder*) mergeCreationDate:(BTimestamp*) value {
  if (resultNotification.hasCreationDate &&
      resultNotification.creationDate != [BTimestamp defaultInstance]) {
    resultNotification.creationDate =
      [[[BTimestamp builderWithPrototype:resultNotification.creationDate] mergeFrom:value] buildPartial];
  } else {
    resultNotification.creationDate = value;
  }
  resultNotification.hasCreationDate = YES;
  return self;
}
- (BNotificationBuilder*) clearCreationDate {
  resultNotification.hasCreationDate = NO;
  resultNotification.creationDate = [BTimestamp defaultInstance];
  return self;
}
- (BOOL) hasNotificationDate {
  return resultNotification.hasNotificationDate;
}
- (BTimestamp*) notificationDate {
  return resultNotification.notificationDate;
}
- (BNotificationBuilder*) setNotificationDate:(BTimestamp*) value {
  resultNotification.hasNotificationDate = YES;
  resultNotification.notificationDate = value;
  return self;
}
- (BNotificationBuilder*) setNotificationDateBuilder:(BTimestampBuilder*) builderForValue {
  return [self setNotificationDate:[builderForValue build]];
}
- (BNotificationBuilder*) mergeNotificationDate:(BTimestamp*) value {
  if (resultNotification.hasNotificationDate &&
      resultNotification.notificationDate != [BTimestamp defaultInstance]) {
    resultNotification.notificationDate =
      [[[BTimestamp builderWithPrototype:resultNotification.notificationDate] mergeFrom:value] buildPartial];
  } else {
    resultNotification.notificationDate = value;
  }
  resultNotification.hasNotificationDate = YES;
  return self;
}
- (BNotificationBuilder*) clearNotificationDate {
  resultNotification.hasNotificationDate = NO;
  resultNotification.notificationDate = [BTimestamp defaultInstance];
  return self;
}
- (BOOL) hasReadDate {
  return resultNotification.hasReadDate;
}
- (BTimestamp*) readDate {
  return resultNotification.readDate;
}
- (BNotificationBuilder*) setReadDate:(BTimestamp*) value {
  resultNotification.hasReadDate = YES;
  resultNotification.readDate = value;
  return self;
}
- (BNotificationBuilder*) setReadDateBuilder:(BTimestampBuilder*) builderForValue {
  return [self setReadDate:[builderForValue build]];
}
- (BNotificationBuilder*) mergeReadDate:(BTimestamp*) value {
  if (resultNotification.hasReadDate &&
      resultNotification.readDate != [BTimestamp defaultInstance]) {
    resultNotification.readDate =
      [[[BTimestamp builderWithPrototype:resultNotification.readDate] mergeFrom:value] buildPartial];
  } else {
    resultNotification.readDate = value;
  }
  resultNotification.hasReadDate = YES;
  return self;
}
- (BNotificationBuilder*) clearReadDate {
  resultNotification.hasReadDate = NO;
  resultNotification.readDate = [BTimestamp defaultInstance];
  return self;
}
- (BOOL) hasMessageType {
  return resultNotification.hasMessageType;
}
- (BNotificationType) messageType {
  return resultNotification.messageType;
}
- (BNotificationBuilder*) setMessageType:(BNotificationType) value {
  resultNotification.hasMessageType = YES;
  resultNotification.messageType = value;
  return self;
}
- (BNotificationBuilder*) clearMessageType {
  resultNotification.hasMessageType = NO;
  resultNotification.messageType = BNotificationTypeNTUnknown;
  return self;
}
- (BOOL) hasMessageText {
  return resultNotification.hasMessageText;
}
- (NSString*) messageText {
  return resultNotification.messageText;
}
- (BNotificationBuilder*) setMessageText:(NSString*) value {
  resultNotification.hasMessageText = YES;
  resultNotification.messageText = value;
  return self;
}
- (BNotificationBuilder*) clearMessageText {
  resultNotification.hasMessageText = NO;
  resultNotification.messageText = @"";
  return self;
}
- (BOOL) hasMessageStatus {
  return resultNotification.hasMessageStatus;
}
- (BNotificationStatus) messageStatus {
  return resultNotification.messageStatus;
}
- (BNotificationBuilder*) setMessageStatus:(BNotificationStatus) value {
  resultNotification.hasMessageStatus = YES;
  resultNotification.messageStatus = value;
  return self;
}
- (BNotificationBuilder*) clearMessageStatus {
  resultNotification.hasMessageStatus = NO;
  resultNotification.messageStatus = BNotificationStatusNSNew;
  return self;
}
- (BOOL) hasActionIcon {
  return resultNotification.hasActionIcon;
}
- (NSString*) actionIcon {
  return resultNotification.actionIcon;
}
- (BNotificationBuilder*) setActionIcon:(NSString*) value {
  resultNotification.hasActionIcon = YES;
  resultNotification.actionIcon = value;
  return self;
}
- (BNotificationBuilder*) clearActionIcon {
  resultNotification.hasActionIcon = NO;
  resultNotification.actionIcon = @"";
  return self;
}
- (BOOL) hasActionURL {
  return resultNotification.hasActionURL;
}
- (NSString*) actionURL {
  return resultNotification.actionURL;
}
- (BNotificationBuilder*) setActionURL:(NSString*) value {
  resultNotification.hasActionURL = YES;
  resultNotification.actionURL = value;
  return self;
}
- (BNotificationBuilder*) clearActionURL {
  resultNotification.hasActionURL = NO;
  resultNotification.actionURL = @"";
  return self;
}
@end

@interface BNotificationUpdate ()
@property (strong) BTimespan* timespan;
@property (strong) NSMutableArray * messagesArray;
@end

@implementation BNotificationUpdate

- (BOOL) hasTimespan {
  return !!hasTimespan_;
}
- (void) setHasTimespan:(BOOL) _value_ {
  hasTimespan_ = !!_value_;
}
@synthesize timespan;
@synthesize messagesArray;
@dynamic messages;
- (instancetype) init {
  if ((self = [super init])) {
    self.timespan = [BTimespan defaultInstance];
  }
  return self;
}
static BNotificationUpdate* defaultBNotificationUpdateInstance = nil;
+ (void) initialize {
  if (self == [BNotificationUpdate class]) {
    defaultBNotificationUpdateInstance = [[BNotificationUpdate alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBNotificationUpdateInstance;
}
- (instancetype) defaultInstance {
  return defaultBNotificationUpdateInstance;
}
- (NSArray *)messages {
  return messagesArray;
}
- (BNotification*)messagesAtIndex:(NSUInteger)index {
  return [messagesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasTimespan) {
    if (!self.timespan.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitmessages = YES;
   [self.messages enumerateObjectsUsingBlock:^(BNotification *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitmessages = NO;
      *stop = YES;
    }
  }];
  if (!isInitmessages) return isInitmessages;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTimespan) {
    [output writeMessage:1 value:self.timespan];
  }
  [self.messagesArray enumerateObjectsUsingBlock:^(BNotification *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTimespan) {
    size_ += computeMessageSize(1, self.timespan);
  }
  [self.messagesArray enumerateObjectsUsingBlock:^(BNotification *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BNotificationUpdate*) parseFromData:(NSData*) data {
  return (BNotificationUpdate*)[[[BNotificationUpdate builder] mergeFromData:data] build];
}
+ (BNotificationUpdate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BNotificationUpdate*)[[[BNotificationUpdate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BNotificationUpdate*) parseFromInputStream:(NSInputStream*) input {
  return (BNotificationUpdate*)[[[BNotificationUpdate builder] mergeFromInputStream:input] build];
}
+ (BNotificationUpdate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BNotificationUpdate*)[[[BNotificationUpdate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BNotificationUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BNotificationUpdate*)[[[BNotificationUpdate builder] mergeFromCodedInputStream:input] build];
}
+ (BNotificationUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BNotificationUpdate*)[[[BNotificationUpdate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BNotificationUpdateBuilder*) builder {
  return [[BNotificationUpdateBuilder alloc] init];
}
+ (BNotificationUpdateBuilder*) builderWithPrototype:(BNotificationUpdate*) prototype {
  return [[BNotificationUpdate builder] mergeFrom:prototype];
}
- (BNotificationUpdateBuilder*) builder {
  return [BNotificationUpdate builder];
}
- (BNotificationUpdateBuilder*) toBuilder {
  return [BNotificationUpdate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTimespan) {
    [output appendFormat:@"%@%@ {\n", indent, @"timespan"];
    [self.timespan writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.messagesArray enumerateObjectsUsingBlock:^(BNotification *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"messages"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTimespan) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.timespan storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"timespan"];
  }
  for (BNotification* element in self.messagesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"messages"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BNotificationUpdate class]]) {
    return NO;
  }
  BNotificationUpdate *otherMessage = other;
  return
      self.hasTimespan == otherMessage.hasTimespan &&
      (!self.hasTimespan || [self.timespan isEqual:otherMessage.timespan]) &&
      [self.messagesArray isEqualToArray:otherMessage.messagesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTimespan) {
    hashCode = hashCode * 31 + [self.timespan hash];
  }
  [self.messagesArray enumerateObjectsUsingBlock:^(BNotification *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BNotificationUpdateBuilder()
@property (strong) BNotificationUpdate* resultNotificationUpdate;
@end

@implementation BNotificationUpdateBuilder
@synthesize resultNotificationUpdate;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNotificationUpdate = [[BNotificationUpdate alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNotificationUpdate;
}
- (BNotificationUpdateBuilder*) clear {
  self.resultNotificationUpdate = [[BNotificationUpdate alloc] init];
  return self;
}
- (BNotificationUpdateBuilder*) clone {
  return [BNotificationUpdate builderWithPrototype:resultNotificationUpdate];
}
- (BNotificationUpdate*) defaultInstance {
  return [BNotificationUpdate defaultInstance];
}
- (BNotificationUpdate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BNotificationUpdate*) buildPartial {
  BNotificationUpdate* returnMe = resultNotificationUpdate;
  self.resultNotificationUpdate = nil;
  return returnMe;
}
- (BNotificationUpdateBuilder*) mergeFrom:(BNotificationUpdate*) other {
  if (other == [BNotificationUpdate defaultInstance]) {
    return self;
  }
  if (other.hasTimespan) {
    [self mergeTimespan:other.timespan];
  }
  if (other.messagesArray.count > 0) {
    if (resultNotificationUpdate.messagesArray == nil) {
      resultNotificationUpdate.messagesArray = [[NSMutableArray alloc] initWithArray:other.messagesArray];
    } else {
      [resultNotificationUpdate.messagesArray addObjectsFromArray:other.messagesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BNotificationUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BNotificationUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BTimespanBuilder* subBuilder = [BTimespan builder];
        if (self.hasTimespan) {
          [subBuilder mergeFrom:self.timespan];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTimespan:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        BNotificationBuilder* subBuilder = [BNotification builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMessages:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasTimespan {
  return resultNotificationUpdate.hasTimespan;
}
- (BTimespan*) timespan {
  return resultNotificationUpdate.timespan;
}
- (BNotificationUpdateBuilder*) setTimespan:(BTimespan*) value {
  resultNotificationUpdate.hasTimespan = YES;
  resultNotificationUpdate.timespan = value;
  return self;
}
- (BNotificationUpdateBuilder*) setTimespanBuilder:(BTimespanBuilder*) builderForValue {
  return [self setTimespan:[builderForValue build]];
}
- (BNotificationUpdateBuilder*) mergeTimespan:(BTimespan*) value {
  if (resultNotificationUpdate.hasTimespan &&
      resultNotificationUpdate.timespan != [BTimespan defaultInstance]) {
    resultNotificationUpdate.timespan =
      [[[BTimespan builderWithPrototype:resultNotificationUpdate.timespan] mergeFrom:value] buildPartial];
  } else {
    resultNotificationUpdate.timespan = value;
  }
  resultNotificationUpdate.hasTimespan = YES;
  return self;
}
- (BNotificationUpdateBuilder*) clearTimespan {
  resultNotificationUpdate.hasTimespan = NO;
  resultNotificationUpdate.timespan = [BTimespan defaultInstance];
  return self;
}
- (NSMutableArray *)messages {
  return resultNotificationUpdate.messagesArray;
}
- (BNotification*)messagesAtIndex:(NSUInteger)index {
  return [resultNotificationUpdate messagesAtIndex:index];
}
- (BNotificationUpdateBuilder *)addMessages:(BNotification*)value {
  if (resultNotificationUpdate.messagesArray == nil) {
    resultNotificationUpdate.messagesArray = [[NSMutableArray alloc]init];
  }
  [resultNotificationUpdate.messagesArray addObject:value];
  return self;
}
- (BNotificationUpdateBuilder *)setMessagesArray:(NSArray *)array {
  resultNotificationUpdate.messagesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BNotificationUpdateBuilder *)clearMessages {
  resultNotificationUpdate.messagesArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
