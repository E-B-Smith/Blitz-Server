// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "UserTracking.pb.h"
// @@protoc_insertion_point(imports)

@implementation BUserTrackingRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BUserTrackingRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    [BTypesRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface BUserTrackingEvent ()
@property (strong) BTimestamp* timestamp;
@property (strong) BLocation* location;
@property (strong) NSString* event;
@property (strong) NSMutableArray * eventDataArray;
@end

@implementation BUserTrackingEvent

- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (BOOL) hasEvent {
  return !!hasEvent_;
}
- (void) setHasEvent:(BOOL) _value_ {
  hasEvent_ = !!_value_;
}
@synthesize event;
@synthesize eventDataArray;
@dynamic eventData;
- (instancetype) init {
  if ((self = [super init])) {
    self.timestamp = [BTimestamp defaultInstance];
    self.location = [BLocation defaultInstance];
    self.event = @"";
  }
  return self;
}
static BUserTrackingEvent* defaultBUserTrackingEventInstance = nil;
+ (void) initialize {
  if (self == [BUserTrackingEvent class]) {
    defaultBUserTrackingEventInstance = [[BUserTrackingEvent alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBUserTrackingEventInstance;
}
- (instancetype) defaultInstance {
  return defaultBUserTrackingEventInstance;
}
- (NSArray *)eventData {
  return eventDataArray;
}
- (NSString*)eventDataAtIndex:(NSUInteger)index {
  return [eventDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTimestamp) {
    return NO;
  }
  if (!self.hasEvent) {
    return NO;
  }
  if (!self.timestamp.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTimestamp) {
    [output writeMessage:1 value:self.timestamp];
  }
  if (self.hasLocation) {
    [output writeMessage:2 value:self.location];
  }
  if (self.hasEvent) {
    [output writeString:3 value:self.event];
  }
  [self.eventDataArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:4 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTimestamp) {
    size_ += computeMessageSize(1, self.timestamp);
  }
  if (self.hasLocation) {
    size_ += computeMessageSize(2, self.location);
  }
  if (self.hasEvent) {
    size_ += computeStringSize(3, self.event);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.eventDataArray.count;
    [self.eventDataArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BUserTrackingEvent*) parseFromData:(NSData*) data {
  return (BUserTrackingEvent*)[[[BUserTrackingEvent builder] mergeFromData:data] build];
}
+ (BUserTrackingEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserTrackingEvent*)[[[BUserTrackingEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BUserTrackingEvent*) parseFromInputStream:(NSInputStream*) input {
  return (BUserTrackingEvent*)[[[BUserTrackingEvent builder] mergeFromInputStream:input] build];
}
+ (BUserTrackingEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserTrackingEvent*)[[[BUserTrackingEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserTrackingEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BUserTrackingEvent*)[[[BUserTrackingEvent builder] mergeFromCodedInputStream:input] build];
}
+ (BUserTrackingEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserTrackingEvent*)[[[BUserTrackingEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserTrackingEventBuilder*) builder {
  return [[BUserTrackingEventBuilder alloc] init];
}
+ (BUserTrackingEventBuilder*) builderWithPrototype:(BUserTrackingEvent*) prototype {
  return [[BUserTrackingEvent builder] mergeFrom:prototype];
}
- (BUserTrackingEventBuilder*) builder {
  return [BUserTrackingEvent builder];
}
- (BUserTrackingEventBuilder*) toBuilder {
  return [BUserTrackingEvent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@ {\n", indent, @"timestamp"];
    [self.timestamp writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasEvent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"event", self.event];
  }
  [self.eventDataArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventData", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTimestamp) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.timestamp storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"timestamp"];
  }
  if (self.hasLocation) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.location storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"location"];
  }
  if (self.hasEvent) {
    [dictionary setObject: self.event forKey: @"event"];
  }
  [dictionary setObject:self.eventData forKey: @"eventData"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BUserTrackingEvent class]]) {
    return NO;
  }
  BUserTrackingEvent *otherMessage = other;
  return
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || [self.timestamp isEqual:otherMessage.timestamp]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasEvent == otherMessage.hasEvent &&
      (!self.hasEvent || [self.event isEqual:otherMessage.event]) &&
      [self.eventDataArray isEqualToArray:otherMessage.eventDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [self.timestamp hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasEvent) {
    hashCode = hashCode * 31 + [self.event hash];
  }
  [self.eventDataArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BUserTrackingEventBuilder()
@property (strong) BUserTrackingEvent* resultUserTrackingEvent;
@end

@implementation BUserTrackingEventBuilder
@synthesize resultUserTrackingEvent;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserTrackingEvent = [[BUserTrackingEvent alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserTrackingEvent;
}
- (BUserTrackingEventBuilder*) clear {
  self.resultUserTrackingEvent = [[BUserTrackingEvent alloc] init];
  return self;
}
- (BUserTrackingEventBuilder*) clone {
  return [BUserTrackingEvent builderWithPrototype:resultUserTrackingEvent];
}
- (BUserTrackingEvent*) defaultInstance {
  return [BUserTrackingEvent defaultInstance];
}
- (BUserTrackingEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BUserTrackingEvent*) buildPartial {
  BUserTrackingEvent* returnMe = resultUserTrackingEvent;
  self.resultUserTrackingEvent = nil;
  return returnMe;
}
- (BUserTrackingEventBuilder*) mergeFrom:(BUserTrackingEvent*) other {
  if (other == [BUserTrackingEvent defaultInstance]) {
    return self;
  }
  if (other.hasTimestamp) {
    [self mergeTimestamp:other.timestamp];
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  if (other.hasEvent) {
    [self setEvent:other.event];
  }
  if (other.eventDataArray.count > 0) {
    if (resultUserTrackingEvent.eventDataArray == nil) {
      resultUserTrackingEvent.eventDataArray = [[NSMutableArray alloc] initWithArray:other.eventDataArray];
    } else {
      [resultUserTrackingEvent.eventDataArray addObjectsFromArray:other.eventDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BUserTrackingEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BUserTrackingEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BTimestampBuilder* subBuilder = [BTimestamp builder];
        if (self.hasTimestamp) {
          [subBuilder mergeFrom:self.timestamp];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTimestamp:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        BLocationBuilder* subBuilder = [BLocation builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setEvent:[input readString]];
        break;
      }
      case 34: {
        [self addEventData:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTimestamp {
  return resultUserTrackingEvent.hasTimestamp;
}
- (BTimestamp*) timestamp {
  return resultUserTrackingEvent.timestamp;
}
- (BUserTrackingEventBuilder*) setTimestamp:(BTimestamp*) value {
  resultUserTrackingEvent.hasTimestamp = YES;
  resultUserTrackingEvent.timestamp = value;
  return self;
}
- (BUserTrackingEventBuilder*) setTimestampBuilder:(BTimestampBuilder*) builderForValue {
  return [self setTimestamp:[builderForValue build]];
}
- (BUserTrackingEventBuilder*) mergeTimestamp:(BTimestamp*) value {
  if (resultUserTrackingEvent.hasTimestamp &&
      resultUserTrackingEvent.timestamp != [BTimestamp defaultInstance]) {
    resultUserTrackingEvent.timestamp =
      [[[BTimestamp builderWithPrototype:resultUserTrackingEvent.timestamp] mergeFrom:value] buildPartial];
  } else {
    resultUserTrackingEvent.timestamp = value;
  }
  resultUserTrackingEvent.hasTimestamp = YES;
  return self;
}
- (BUserTrackingEventBuilder*) clearTimestamp {
  resultUserTrackingEvent.hasTimestamp = NO;
  resultUserTrackingEvent.timestamp = [BTimestamp defaultInstance];
  return self;
}
- (BOOL) hasLocation {
  return resultUserTrackingEvent.hasLocation;
}
- (BLocation*) location {
  return resultUserTrackingEvent.location;
}
- (BUserTrackingEventBuilder*) setLocation:(BLocation*) value {
  resultUserTrackingEvent.hasLocation = YES;
  resultUserTrackingEvent.location = value;
  return self;
}
- (BUserTrackingEventBuilder*) setLocationBuilder:(BLocationBuilder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (BUserTrackingEventBuilder*) mergeLocation:(BLocation*) value {
  if (resultUserTrackingEvent.hasLocation &&
      resultUserTrackingEvent.location != [BLocation defaultInstance]) {
    resultUserTrackingEvent.location =
      [[[BLocation builderWithPrototype:resultUserTrackingEvent.location] mergeFrom:value] buildPartial];
  } else {
    resultUserTrackingEvent.location = value;
  }
  resultUserTrackingEvent.hasLocation = YES;
  return self;
}
- (BUserTrackingEventBuilder*) clearLocation {
  resultUserTrackingEvent.hasLocation = NO;
  resultUserTrackingEvent.location = [BLocation defaultInstance];
  return self;
}
- (BOOL) hasEvent {
  return resultUserTrackingEvent.hasEvent;
}
- (NSString*) event {
  return resultUserTrackingEvent.event;
}
- (BUserTrackingEventBuilder*) setEvent:(NSString*) value {
  resultUserTrackingEvent.hasEvent = YES;
  resultUserTrackingEvent.event = value;
  return self;
}
- (BUserTrackingEventBuilder*) clearEvent {
  resultUserTrackingEvent.hasEvent = NO;
  resultUserTrackingEvent.event = @"";
  return self;
}
- (NSMutableArray *)eventData {
  return resultUserTrackingEvent.eventDataArray;
}
- (NSString*)eventDataAtIndex:(NSUInteger)index {
  return [resultUserTrackingEvent eventDataAtIndex:index];
}
- (BUserTrackingEventBuilder *)addEventData:(NSString*)value {
  if (resultUserTrackingEvent.eventDataArray == nil) {
    resultUserTrackingEvent.eventDataArray = [[NSMutableArray alloc]init];
  }
  [resultUserTrackingEvent.eventDataArray addObject:value];
  return self;
}
- (BUserTrackingEventBuilder *)setEventDataArray:(NSArray *)array {
  resultUserTrackingEvent.eventDataArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (BUserTrackingEventBuilder *)clearEventData {
  resultUserTrackingEvent.eventDataArray = nil;
  return self;
}
@end

@interface BUserTrackingBatch ()
@property (strong) NSMutableArray * userEventsArray;
@end

@implementation BUserTrackingBatch

@synthesize userEventsArray;
@dynamic userEvents;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BUserTrackingBatch* defaultBUserTrackingBatchInstance = nil;
+ (void) initialize {
  if (self == [BUserTrackingBatch class]) {
    defaultBUserTrackingBatchInstance = [[BUserTrackingBatch alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBUserTrackingBatchInstance;
}
- (instancetype) defaultInstance {
  return defaultBUserTrackingBatchInstance;
}
- (NSArray *)userEvents {
  return userEventsArray;
}
- (BUserTrackingEvent*)userEventsAtIndex:(NSUInteger)index {
  return [userEventsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInituserEvents = YES;
   [self.userEvents enumerateObjectsUsingBlock:^(BUserTrackingEvent *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserEvents = NO;
      *stop = YES;
    }
  }];
  if (!isInituserEvents) return isInituserEvents;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.userEventsArray enumerateObjectsUsingBlock:^(BUserTrackingEvent *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.userEventsArray enumerateObjectsUsingBlock:^(BUserTrackingEvent *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BUserTrackingBatch*) parseFromData:(NSData*) data {
  return (BUserTrackingBatch*)[[[BUserTrackingBatch builder] mergeFromData:data] build];
}
+ (BUserTrackingBatch*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserTrackingBatch*)[[[BUserTrackingBatch builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BUserTrackingBatch*) parseFromInputStream:(NSInputStream*) input {
  return (BUserTrackingBatch*)[[[BUserTrackingBatch builder] mergeFromInputStream:input] build];
}
+ (BUserTrackingBatch*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserTrackingBatch*)[[[BUserTrackingBatch builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserTrackingBatch*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BUserTrackingBatch*)[[[BUserTrackingBatch builder] mergeFromCodedInputStream:input] build];
}
+ (BUserTrackingBatch*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserTrackingBatch*)[[[BUserTrackingBatch builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserTrackingBatchBuilder*) builder {
  return [[BUserTrackingBatchBuilder alloc] init];
}
+ (BUserTrackingBatchBuilder*) builderWithPrototype:(BUserTrackingBatch*) prototype {
  return [[BUserTrackingBatch builder] mergeFrom:prototype];
}
- (BUserTrackingBatchBuilder*) builder {
  return [BUserTrackingBatch builder];
}
- (BUserTrackingBatchBuilder*) toBuilder {
  return [BUserTrackingBatch builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userEventsArray enumerateObjectsUsingBlock:^(BUserTrackingEvent *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userEvents"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (BUserTrackingEvent* element in self.userEventsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userEvents"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BUserTrackingBatch class]]) {
    return NO;
  }
  BUserTrackingBatch *otherMessage = other;
  return
      [self.userEventsArray isEqualToArray:otherMessage.userEventsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userEventsArray enumerateObjectsUsingBlock:^(BUserTrackingEvent *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BUserTrackingBatchBuilder()
@property (strong) BUserTrackingBatch* resultUserTrackingBatch;
@end

@implementation BUserTrackingBatchBuilder
@synthesize resultUserTrackingBatch;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserTrackingBatch = [[BUserTrackingBatch alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserTrackingBatch;
}
- (BUserTrackingBatchBuilder*) clear {
  self.resultUserTrackingBatch = [[BUserTrackingBatch alloc] init];
  return self;
}
- (BUserTrackingBatchBuilder*) clone {
  return [BUserTrackingBatch builderWithPrototype:resultUserTrackingBatch];
}
- (BUserTrackingBatch*) defaultInstance {
  return [BUserTrackingBatch defaultInstance];
}
- (BUserTrackingBatch*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BUserTrackingBatch*) buildPartial {
  BUserTrackingBatch* returnMe = resultUserTrackingBatch;
  self.resultUserTrackingBatch = nil;
  return returnMe;
}
- (BUserTrackingBatchBuilder*) mergeFrom:(BUserTrackingBatch*) other {
  if (other == [BUserTrackingBatch defaultInstance]) {
    return self;
  }
  if (other.userEventsArray.count > 0) {
    if (resultUserTrackingBatch.userEventsArray == nil) {
      resultUserTrackingBatch.userEventsArray = [[NSMutableArray alloc] initWithArray:other.userEventsArray];
    } else {
      [resultUserTrackingBatch.userEventsArray addObjectsFromArray:other.userEventsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BUserTrackingBatchBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BUserTrackingBatchBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BUserTrackingEventBuilder* subBuilder = [BUserTrackingEvent builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserEvents:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)userEvents {
  return resultUserTrackingBatch.userEventsArray;
}
- (BUserTrackingEvent*)userEventsAtIndex:(NSUInteger)index {
  return [resultUserTrackingBatch userEventsAtIndex:index];
}
- (BUserTrackingBatchBuilder *)addUserEvents:(BUserTrackingEvent*)value {
  if (resultUserTrackingBatch.userEventsArray == nil) {
    resultUserTrackingBatch.userEventsArray = [[NSMutableArray alloc]init];
  }
  [resultUserTrackingBatch.userEventsArray addObject:value];
  return self;
}
- (BUserTrackingBatchBuilder *)setUserEventsArray:(NSArray *)array {
  resultUserTrackingBatch.userEventsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BUserTrackingBatchBuilder *)clearUserEvents {
  resultUserTrackingBatch.userEventsArray = nil;
  return self;
}
@end

@interface BUserTrackingResponse ()
@property (strong) BTimestamp* latestEventUpdate;
@end

@implementation BUserTrackingResponse

- (BOOL) hasLatestEventUpdate {
  return !!hasLatestEventUpdate_;
}
- (void) setHasLatestEventUpdate:(BOOL) _value_ {
  hasLatestEventUpdate_ = !!_value_;
}
@synthesize latestEventUpdate;
- (instancetype) init {
  if ((self = [super init])) {
    self.latestEventUpdate = [BTimestamp defaultInstance];
  }
  return self;
}
static BUserTrackingResponse* defaultBUserTrackingResponseInstance = nil;
+ (void) initialize {
  if (self == [BUserTrackingResponse class]) {
    defaultBUserTrackingResponseInstance = [[BUserTrackingResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBUserTrackingResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultBUserTrackingResponseInstance;
}
- (BOOL) isInitialized {
  if (self.hasLatestEventUpdate) {
    if (!self.latestEventUpdate.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLatestEventUpdate) {
    [output writeMessage:1 value:self.latestEventUpdate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLatestEventUpdate) {
    size_ += computeMessageSize(1, self.latestEventUpdate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BUserTrackingResponse*) parseFromData:(NSData*) data {
  return (BUserTrackingResponse*)[[[BUserTrackingResponse builder] mergeFromData:data] build];
}
+ (BUserTrackingResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserTrackingResponse*)[[[BUserTrackingResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BUserTrackingResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BUserTrackingResponse*)[[[BUserTrackingResponse builder] mergeFromInputStream:input] build];
}
+ (BUserTrackingResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserTrackingResponse*)[[[BUserTrackingResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserTrackingResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BUserTrackingResponse*)[[[BUserTrackingResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BUserTrackingResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BUserTrackingResponse*)[[[BUserTrackingResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BUserTrackingResponseBuilder*) builder {
  return [[BUserTrackingResponseBuilder alloc] init];
}
+ (BUserTrackingResponseBuilder*) builderWithPrototype:(BUserTrackingResponse*) prototype {
  return [[BUserTrackingResponse builder] mergeFrom:prototype];
}
- (BUserTrackingResponseBuilder*) builder {
  return [BUserTrackingResponse builder];
}
- (BUserTrackingResponseBuilder*) toBuilder {
  return [BUserTrackingResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLatestEventUpdate) {
    [output appendFormat:@"%@%@ {\n", indent, @"latestEventUpdate"];
    [self.latestEventUpdate writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLatestEventUpdate) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.latestEventUpdate storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"latestEventUpdate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BUserTrackingResponse class]]) {
    return NO;
  }
  BUserTrackingResponse *otherMessage = other;
  return
      self.hasLatestEventUpdate == otherMessage.hasLatestEventUpdate &&
      (!self.hasLatestEventUpdate || [self.latestEventUpdate isEqual:otherMessage.latestEventUpdate]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLatestEventUpdate) {
    hashCode = hashCode * 31 + [self.latestEventUpdate hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BUserTrackingResponseBuilder()
@property (strong) BUserTrackingResponse* resultUserTrackingResponse;
@end

@implementation BUserTrackingResponseBuilder
@synthesize resultUserTrackingResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserTrackingResponse = [[BUserTrackingResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserTrackingResponse;
}
- (BUserTrackingResponseBuilder*) clear {
  self.resultUserTrackingResponse = [[BUserTrackingResponse alloc] init];
  return self;
}
- (BUserTrackingResponseBuilder*) clone {
  return [BUserTrackingResponse builderWithPrototype:resultUserTrackingResponse];
}
- (BUserTrackingResponse*) defaultInstance {
  return [BUserTrackingResponse defaultInstance];
}
- (BUserTrackingResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BUserTrackingResponse*) buildPartial {
  BUserTrackingResponse* returnMe = resultUserTrackingResponse;
  self.resultUserTrackingResponse = nil;
  return returnMe;
}
- (BUserTrackingResponseBuilder*) mergeFrom:(BUserTrackingResponse*) other {
  if (other == [BUserTrackingResponse defaultInstance]) {
    return self;
  }
  if (other.hasLatestEventUpdate) {
    [self mergeLatestEventUpdate:other.latestEventUpdate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BUserTrackingResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BUserTrackingResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BTimestampBuilder* subBuilder = [BTimestamp builder];
        if (self.hasLatestEventUpdate) {
          [subBuilder mergeFrom:self.latestEventUpdate];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLatestEventUpdate:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasLatestEventUpdate {
  return resultUserTrackingResponse.hasLatestEventUpdate;
}
- (BTimestamp*) latestEventUpdate {
  return resultUserTrackingResponse.latestEventUpdate;
}
- (BUserTrackingResponseBuilder*) setLatestEventUpdate:(BTimestamp*) value {
  resultUserTrackingResponse.hasLatestEventUpdate = YES;
  resultUserTrackingResponse.latestEventUpdate = value;
  return self;
}
- (BUserTrackingResponseBuilder*) setLatestEventUpdateBuilder:(BTimestampBuilder*) builderForValue {
  return [self setLatestEventUpdate:[builderForValue build]];
}
- (BUserTrackingResponseBuilder*) mergeLatestEventUpdate:(BTimestamp*) value {
  if (resultUserTrackingResponse.hasLatestEventUpdate &&
      resultUserTrackingResponse.latestEventUpdate != [BTimestamp defaultInstance]) {
    resultUserTrackingResponse.latestEventUpdate =
      [[[BTimestamp builderWithPrototype:resultUserTrackingResponse.latestEventUpdate] mergeFrom:value] buildPartial];
  } else {
    resultUserTrackingResponse.latestEventUpdate = value;
  }
  resultUserTrackingResponse.hasLatestEventUpdate = YES;
  return self;
}
- (BUserTrackingResponseBuilder*) clearLatestEventUpdate {
  resultUserTrackingResponse.hasLatestEventUpdate = NO;
  resultUserTrackingResponse.latestEventUpdate = [BTimestamp defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
