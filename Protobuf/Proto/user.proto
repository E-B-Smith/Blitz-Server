syntax = "proto2";

package user;

import "objectivec-descriptor.proto";

option java_package = "com.blitz.user.proto";
option java_generic_services = true;
option java_multiple_files = true;

option (google.protobuf.objectivec_file_options).package = "";
option (google.protobuf.objectivec_file_options).class_prefix = "B";
option (google.protobuf.objectivec_file_options).relax_camel_case = true;

import "util.proto";

//----------------------------------------------------------------------------------------
// UserProfile
//----------------------------------------------------------------------------------------
message SocialIdentity {
  optional string socialService = 1;
  optional string socialID = 2;
  optional string userName = 3;
  optional string displayName = 4;
  optional string userURI = 5;
  optional string authToken = 6;
  optional util.Timestamp authExpire = 7;
  optional string authSecret = 8;
}

enum RegistrationStatus {
  USUnknown    = 0;
  USBlocked    = 1;
  USInvited    = 2;
  USActive     = 3;
  USConfirming = 4;
  USConfirmed  = 5;
}

message Rating {
  optional int64 numReviewers = 1;
  optional double averageRating = 2;
}

// The base field for all user set fields in UserProfile.
message ProfileField {
  extensions 100 to max;
  optional bool isUserEditable = 1;
  optional bool isCompulsoryForExpert = 2;
  optional bool isSystemField = 3;
}

message NameField {
  extend ProfileField {
    optional NameField name = 100;
  }

  optional string firstName = 1;
  optional string lastName = 2;
  optional string formattedName = 3;
  optional string nickname = 4;
}

message GenderField {
  extend ProfileField {
    optional GenderField gender = 101;
  }

  enum Gender {
    GUnknown  = 0;
    GFemale   = 1;
    GMale     = 2;
    GOther    = 3;
  }

  optional Gender value = 1;
}

enum ImageContent {
  ICUnknown = 0;
  ICUserProfile = 1;
  ICUserBackground = 2;
}

message ImageField {
  extend ProfileField {
    optional ImageField image = 102;
  }

  optional string       imageUrl = 1;
  optional ImageContent imageContent = 2;
}

message ContactInfoField {
  extend ProfileField {
    optional ContactInfoField contactInfo = 103;
  }

  enum ContactType {
    CTUnknown = 0;
    CTPhoneSMS= 1;
    CTEmail   = 2;
    CTChat    = 3;
    CTSocialService = 4;
  }

  optional ContactType contactType = 1;
  optional string contact = 2;
  optional bool isVerified = 3;
}

message JobField {

  extend ProfileField {
    optional JobField jobField = 104;
  }
  message Company {
    optional string industry = 2;
    optional string name = 3;
    optional string size = 4;
    optional string ticker = 5;
    optional string type = 6;
    optional string companyId = 7;
  }

  // which company
  optional Company company = 1;
  // what title
  optional string title = 2;
  // what did you do there
  optional string        summary  = 3;
  optional util.Timespan timespan = 4;
}

message RegionField {
  extend ProfileField {
    optional RegionField region = 105;
  }

  optional string area = 2;
  optional string countryCode = 3;
}

message ExpertiseTagField {
  extend ProfileField {
    optional ExpertiseTagField expertiseTagField = 106;
  }
  optional string expertiseTag = 1;
}

message BackgroundField {
  extend ProfileField {
    optional BackgroundField background = 107;
  }

  optional string formatted_text = 1;
}

message InterestsField {
  extend ProfileField {
    optional InterestsField interests = 108;
  }

  repeated string interest = 1;
}

message EducationField {
  extend ProfileField {
    optional EducationField education = 109;
  }

  optional string school_name = 1;

  // Start time
  optional util.Month start_month = 2;
  optional int32 start_year = 3;

  // e.g. June 2012. This format MUST not be used usually.
  optional string start_month_year = 4;

  // End time
  // if no end time is specified, then the it is assumed to be current.
  optional util.Month end_month = 5;
  optional int32 end_year = 6;

  // e.g. June 2012. This format MUST not be used usually.
  optional string end_month_year = 7;

  optional string         degree   = 8;
  optional string         emphasis = 9;
  optional util.Timespan  timespan = 10;
}

message IndustryField {
  extend ProfileField {
    optional IndustryField industryField = 110;
  }

  optional string industry = 1;
}

message UserSystemProfile {
  // These are static fields which do not change very often.
  optional string userID = 1;

  optional util.Timestamp creationDate = 2;

  // Denotes if the user is an expert user on Blitz.
  optional bool isExpert = 3 [default = true];

  // The status of the user from the point of registration on Blitz.
  optional RegistrationStatus userStatus = 4;
}

message UserVolatileProfile {
  // These fields are denormalized in database, and keep changing fairly quickly.
  optional util.Timestamp lastSeen = 1;

  optional Rating rating = 2;
}

message BlitzUserProfile {
  repeated ProfileField fields = 1;

  repeated SocialIdentity socialIdentities = 2;
}

message PriceProfile {
  message PriceProfileItem {
    // Key is the type of session, for ex: "CHAT"
  // Value is the actual value of the price for the session.
  optional string key = 1;
  optional string value = 2;
  optional string currency = 3;
  }

  repeated PriceProfileItem item = 1;

  optional bool isUserEditable = 2;
  optional bool isCompulsoryForExpert = 3;
  optional bool isSystemField = 4;
}

message UserProfile {
  // The profile that the user sets for himself. This profile would be different depending on
  // the profile mask.
  optional BlitzUserProfile blitzProfile = 1;
  // This profile is set up different actions, like if someone gives the user a rating.
  optional UserVolatileProfile volatileProfile = 2;
  // System profile is set by the server. The client cannot change this ever.
  optional UserSystemProfile systemProfile = 3;
  // Price profile can be set by the system, by the user, or can be totally dynamic.
  optional PriceProfile priceProfile = 4;
}

//----------------------------------------------------------------------------------------
// DeviceInfo
//----------------------------------------------------------------------------------------
enum PlatformType {
  PTUnknown   = 0;
  PTiOS       = 1;
  PTAndroid   = 2;
  PTWeb       = 3;
}

message DeviceInfo {
  optional string vendorUID = 1;
  optional string advertisingUID = 2;

  optional PlatformType platformType = 3;
  optional string modelName = 4;
  optional string systemVersion = 5;
  optional string language = 6;
  optional string timezone = 7;
  optional string phoneCountryCode = 8;

  optional util.Size screenSize  = 9;
  optional float  screenScale = 10 [default = 1.0];

  optional string appID = 11;                 //  BundleID for iOS
  optional string appVersion = 12;
  optional string notificationToken = 13;
  optional util.Timestamp lastContentRefresh_Deprecated = 14;

  repeated string userTags = 15;
  optional string deviceUDID = 16;
  optional bool   appIsReleaseVersion = 17;
}

//----------------------------------------------------------------------------------------
// Request to fetch linkedin data
//----------------------------------------------------------------------------------------
// Fields required to fetch data from LinkedIn.
message LinkedInSocialDataFetchRequest {
  optional string accessToken = 1;
  optional string accessTokenSecret = 2;
}

// ------------------------------------------------------------------------------------------------
// Messages related to updating user's profile.
//
// This request can be sent by the client to the server, either while registering a new user
// or independently anytime during the lifetime of a user's session.
// ------------------------------------------------------------------------------------------------

message UserProfileUpdateRequest {
  optional BlitzUserProfile blitzProfile = 1;
  optional PriceProfile priceProfile = 2;
}

message UserProfileUpdateResponse {
  optional UserProfile userProfile = 1;
}

//----------------------------------------------------------------------------------------
// Request / response messages for contacts list
//----------------------------------------------------------------------------------------

message ContactItem {
  // this is a volatile field, and is not stored on the server. It is present in the
  // response if the client had the field set in the first place.
  optional string client_identifier = 1;

  optional UserProfile profile = 2;
}

message UploadContactRequest {
  repeated ContactItem contact = 1;
}

// ------------------------------------------------------------------------------------------------
// Message related to retrieving profile of any user (using uuid as the key).
// -----------------------------------------------------------------------------------------------

message UserProfileRequest {
  // The uuid of the user whose profile is requested.
  repeated string uuids = 1;
}

message UserProfileResponse {
  // Error enum types for different user profile related errors.
  enum UserProfileRequestErrorTypes {
    INVALID_USER_ID = 1;
    NOT_AUTHORIZED = 2;
  }

  // Map from user id (uuid) to user profile.
  message UuidToProfileMap {
    optional string uuid = 1;
    optional user.UserProfile profile = 2;
    optional UserProfileRequestErrorTypes errorTypes = 3;
  }

  repeated UuidToProfileMap profiles = 1;
}

message GetContactsRequest {
  enum ContactType {
    REGISTERED = 1;
    UNREGISTERED = 2;
    ALL = 3;
  }

  optional ContactType contactType = 1;
}

message GetContactsResponse {
  repeated ContactItem items = 1;
}
