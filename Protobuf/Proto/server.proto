syntax = "proto2";

package server;

import "google/protobuf/descriptor.proto";

import "objectivec-descriptor.proto";

option java_package = "com.blitz.server.proto";

option java_multiple_files = true;

option java_generic_services = true;

option (google.protobuf.objectivec_file_options).package = "";

option (google.protobuf.objectivec_file_options).class_prefix = "B";

option (google.protobuf.objectivec_file_options).relax_camel_case = true;

import "feed.proto";

import "friend.proto";

import "Message.proto";

import "room.proto";

import "search.proto";

import "user.proto";

import "util.proto";


// Fields required to fetch data from different social networks.
message SocialDataFetchRequest {
  optional user.LinkedInSocialDataFetchRequest linkedinSocialDataRequest = 1;
}

// ------------------------------------------------------------------------------------------------
// Protos related to authorizing the user making the request.
//
// This proto MUST be present in all requests made to server (except explicit auth requests).
// -------------------------------------------------------------------------------------------------
message ServerAccessProfile {
  optional string uuid = 1;
  optional string sessionId = 2;
}

enum ServerAccessErrorTypes {
  UUID_MISSING = 1;
  SESSION_ID_EXPIRED = 2;
  INVALID_UUID_SESSION_ID = 3;
  UUID_BLOCKED = 4;
}

message ServerAccessError {
  optional ServerAccessErrorTypes errorType = 1;
  optional string debugString = 2;
}


// -----------------------------------------------------------------------------------------------
// Third party data fetched by the app. This data is sent to the server to update the indices.
// -----------------------------------------------------------------------------------------------
message FetchedThirdPartyDataRequest {
  optional ServerAccessProfile accessProfile = 1;
  repeated AttributedThirdPartyData attrData = 2;
}

enum ThirdPartyDataSource {
  LINKEDIN = 1;
  FACEBOOK = 2;
}

message AttributedThirdPartyData {
  optional ThirdPartyDataSource dataSource = 1;
  optional string data = 2;
}

message FetchedThirdPartyDataResponse {
  // Error message in case there is problem in user authorization.
  optional ServerAccessError accessError = 1;

  optional string debugString = 2;
}


// ------------------------------------------------------------------------------------------------
// Fundamental client request messages
// ------------------------------------------------------------------------------------------------
message RequestType {

  optional Message.SessionRequest sessionRequest = 1;
  optional user.DeviceInfo deviceInfo = 2;

  optional user.UserProfileUpdateRequest userProfileUpdateRequest = 11;
  optional user.UserProfileRequest userProfileRequest = 12;
  optional user.UploadContactRequest uploadContactRequest = 13;
  optional user.GetContactsRequest getContactsRequest = 14;

  optional search.SearchRequest searchRequest = 21;
  optional search.AutocompleteRequest autcompleteRequest = 22;

  optional room.RequestChatRoomRequest requestChatRoomRequest = 31;
  optional room.BlitzRoomsHistoryRequest blitzRoomsHistoryRequest = 32;

  optional feed.FeedPostRequest feedPostRequest = 41;
  optional feed.FollowRequest followRequest = 42;
  optional feed.FetchFeedRequest fetchFeedRequest = 43;
  optional feed.ModifyPostRequest modifyPostRequest = 44;

  optional feed.PublicResponseRequest publicResponseRequest = 45;
  optional feed.FetchResponsesRequest fetchResponsesRequest = 46;
  optional feed.PublicResponseVoteRequest publicResponseVoteRequest = 47;
  optional feed.PublicResponseToResponseRequest responseToResponseRequest = 48;

  optional feed.TopicsListRequest topicsListRequest = 51;

  optional friend.ConnectionRequestList connectionRequest = 61;
  optional friend.ConnectionsWithStatusRequest connectionsWithStatusRequest = 62;
}

message BlitzRequest {
  optional ServerAccessProfile serverAccessProfile = 1;
  optional RequestType requestType = 2;
}

enum ResponseCode {
  RCSuccess = 1;
  RCInputInvalid = 2;
  RCServerWarning = 3;
  RCServerError = 4;
  RCNotAuthorized = 5;
  RCClientTooOld = 6;
  RCUserBlocked = 7;
}

message ResponseType {
  optional Message.SessionResponse sessionResponse = 1;

  optional user.UserProfileUpdateResponse userProfileUpdateResp = 11;
  optional user.UserProfileResponse userProfileResponse = 12;
  optional user.GetContactsResponse getContactsResponse = 14;

  optional search.SearchResponse searchResponse = 21;
  optional search.AutocompleteResponse autocompleteResponse = 22;

  optional room.RequestChatRoomResponse requestChatRoomResponse = 31;
  optional room.BlitzRoomsHistoryResponse blitzRoomsHistoryResponse = 32;

  optional feed.FeedPostResponse feedPostResponse = 41;
  optional feed.FollowResponse followResponse = 42;
  optional feed.FetchFeedResponse fetchFeedResponse = 43;
  optional feed.ModifyPostResponse modifyPostResponse = 44;

  optional feed.PublicResponseResponse publicResponseResponse = 45;
  optional feed.PublicResponses publicResponses = 46;

  optional feed.TopicsListResponse topicsListResponse = 51;

  optional friend.ConnectionResponse connectionResponse = 61;

  optional util.Void defaultResponse = 100;
}

message BlitzResponse {
  optional ResponseCode responseCode = 1;
  optional string responseMessage = 2;
  optional ResponseType response = 3;
}

// -----------------------------------------------------------------------------------------------
// Available end points.
// -----------------------------------------------------------------------------------------------
extend google.protobuf.MethodOptions {
  optional string server_endpoint = 71234;
  optional bool authentication_required = 71235;
  optional string input_class_name = 71236;
  optional string output_class_name = 71237;
}

service BlitzServer {
  // Rpc end points related to sessions
  rpc registerNewUser (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "auth_n";
  }

  // rpc existingUserSessionRequest (BlitzRequest) returns (BlitzResponse) {
  //   option (server_endpoint) = "auth_e";
  // }

  rpc registerDevice (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "rd";
    option (authentication_required) = true;
  }

  // User profile update request - sent when the user makes changes to his profile.
  rpc updateUserProfile (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "upu";
    option (authentication_required) = true;
  }

  // Gets the profile of a specified user.
  rpc getUserProfile (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "gpu";
    option (authentication_required) = true;
  }

  // End point to run search for a text query.
  rpc query (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "qu";
    option (authentication_required) = true;
  }

  rpc autocomplete (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "auc";
  }

  // Tries to create a new chat room, the request must contain the uuid of the user
  // initiating the request, and the uuid of the person who is expected to be in the room.
  rpc requestChatRoom (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "ruc";
    option (authentication_required) = true;
  }

  // End point to fetch the history of the chat rooms, basically the "recent" tab.
  rpc fetchBlitzRoomsHistory (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "fcrh";
    option (authentication_required) = true;
  }

  // End point to create a new feed post.
  rpc createFeedPost (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "create_feed_post";
    option (authentication_required) = true;
  }

  rpc modifyFeedpost (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "mod_post";
    option (authentication_required) = true;
  }

  // End point to follow a topic / user / feed.
  rpc followSource (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "follow_source";
    option (authentication_required) = true;
  }

  rpc getFeed (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "get_feed";
    option (authentication_required) = true;
  }

  rpc postPublicResponse (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "post_pub_resp";
    option (authentication_required) = true;
  }

  rpc addResponseToResponse (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "add_resp_to_resp";
    option (authentication_required) = true;
    option (input_class_name) = "com.blitz.feed.proto.PublicResponseToResponseRequest";
    option (output_class_name) = "com.blitz.feed.proto.PublicResponseResponse";
  }

  rpc getPublicResponses (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "fetch_pub_resp";
    option (authentication_required) = true;
  }

  rpc votePublicResponse (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "upvote_pub_resp";
    option (authentication_required) = true;
  }

  // The client sends contacts to the server along with a nonce. The server sends back its
  // knowledge of the user's contacts - whether they are registered on the system or not.
  rpc uploadContacts (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "upload_contacts";
    option (authentication_required) = true;
  }

  rpc getContactsWithStatus (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "get_contacts";
    option (authentication_required) = true;
  }

  rpc inviteToJoinBlitz (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "invite_to_join";
    option (authentication_required) = true;
  }

  rpc connect (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "connect";
    option (authentication_required) = true;
    option (input_class_name) = "com.blitz.friend.proto.ConnectionRequestList";
    option (output_class_name) = "com.blitz.friend.proto.ConnectionResponse";
  }

  rpc getFriends (BlitzRequest) returns (BlitzResponse) {
    option (server_endpoint) = "get_friends";
    option (authentication_required) = true;
    option (input_class_name) = "com.blitz.friend.proto.ConnectionsWithStatusRequest";
    option (output_class_name) = "com.blitz.friend.proto.ConnectionResponse";
  }
}
