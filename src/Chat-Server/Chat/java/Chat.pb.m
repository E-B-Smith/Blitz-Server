// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Chat.pb.h"
// @@protoc_insertion_point(imports)

@implementation CMChatRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [CMChatRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL CMStatusCodeIsValidValue(CMStatusCode value) {
  switch (value) {
    case CMStatusCodeStatusSuccess:
    case CMStatusCodeStatusInputInvalid:
    case CMStatusCodeStatusNotAuthorized:
    case CMStatusCodeStatusServerError:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromCMStatusCode(CMStatusCode value) {
  switch (value) {
    case CMStatusCodeStatusSuccess:
      return @"CMStatusCodeStatusSuccess";
    case CMStatusCodeStatusInputInvalid:
      return @"CMStatusCodeStatusInputInvalid";
    case CMStatusCodeStatusNotAuthorized:
      return @"CMStatusCodeStatusNotAuthorized";
    case CMStatusCodeStatusServerError:
      return @"CMStatusCodeStatusServerError";
    default:
      return nil;
  }
}

@interface CMChatMessage ()
@property (strong) NSString* senderID;
@property (strong) NSString* roomID;
@property Float64 timestamp;
@property (strong) NSString* message;
@end

@implementation CMChatMessage

- (BOOL) hasSenderID {
  return !!hasSenderID_;
}
- (void) setHasSenderID:(BOOL) _value_ {
  hasSenderID_ = !!_value_;
}
@synthesize senderID;
- (BOOL) hasRoomID {
  return !!hasRoomID_;
}
- (void) setHasRoomID:(BOOL) _value_ {
  hasRoomID_ = !!_value_;
}
@synthesize roomID;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (instancetype) init {
  if ((self = [super init])) {
    self.senderID = @"";
    self.roomID = @"";
    self.timestamp = 0;
    self.message = @"";
  }
  return self;
}
static CMChatMessage* defaultCMChatMessageInstance = nil;
+ (void) initialize {
  if (self == [CMChatMessage class]) {
    defaultCMChatMessageInstance = [[CMChatMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCMChatMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultCMChatMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSenderID) {
    [output writeString:1 value:self.senderID];
  }
  if (self.hasRoomID) {
    [output writeString:2 value:self.roomID];
  }
  if (self.hasTimestamp) {
    [output writeDouble:3 value:self.timestamp];
  }
  if (self.hasMessage) {
    [output writeString:4 value:self.message];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSenderID) {
    size_ += computeStringSize(1, self.senderID);
  }
  if (self.hasRoomID) {
    size_ += computeStringSize(2, self.roomID);
  }
  if (self.hasTimestamp) {
    size_ += computeDoubleSize(3, self.timestamp);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(4, self.message);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMChatMessage*) parseFromData:(NSData*) data {
  return (CMChatMessage*)[[[CMChatMessage builder] mergeFromData:data] build];
}
+ (CMChatMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatMessage*)[[[CMChatMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMChatMessage*) parseFromInputStream:(NSInputStream*) input {
  return (CMChatMessage*)[[[CMChatMessage builder] mergeFromInputStream:input] build];
}
+ (CMChatMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatMessage*)[[[CMChatMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMChatMessage*)[[[CMChatMessage builder] mergeFromCodedInputStream:input] build];
}
+ (CMChatMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatMessage*)[[[CMChatMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatMessageBuilder*) builder {
  return [[CMChatMessageBuilder alloc] init];
}
+ (CMChatMessageBuilder*) builderWithPrototype:(CMChatMessage*) prototype {
  return [[CMChatMessage builder] mergeFrom:prototype];
}
- (CMChatMessageBuilder*) builder {
  return [CMChatMessage builder];
}
- (CMChatMessageBuilder*) toBuilder {
  return [CMChatMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSenderID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"senderID", self.senderID];
  }
  if (self.hasRoomID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomID", self.roomID];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithDouble:self.timestamp]];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSenderID) {
    [dictionary setObject: self.senderID forKey: @"senderID"];
  }
  if (self.hasRoomID) {
    [dictionary setObject: self.roomID forKey: @"roomID"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithDouble:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMChatMessage class]]) {
    return NO;
  }
  CMChatMessage *otherMessage = other;
  return
      self.hasSenderID == otherMessage.hasSenderID &&
      (!self.hasSenderID || [self.senderID isEqual:otherMessage.senderID]) &&
      self.hasRoomID == otherMessage.hasRoomID &&
      (!self.hasRoomID || [self.roomID isEqual:otherMessage.roomID]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSenderID) {
    hashCode = hashCode * 31 + [self.senderID hash];
  }
  if (self.hasRoomID) {
    hashCode = hashCode * 31 + [self.roomID hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.timestamp] hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMChatMessageBuilder()
@property (strong) CMChatMessage* resultChatMessage;
@end

@implementation CMChatMessageBuilder
@synthesize resultChatMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatMessage = [[CMChatMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatMessage;
}
- (CMChatMessageBuilder*) clear {
  self.resultChatMessage = [[CMChatMessage alloc] init];
  return self;
}
- (CMChatMessageBuilder*) clone {
  return [CMChatMessage builderWithPrototype:resultChatMessage];
}
- (CMChatMessage*) defaultInstance {
  return [CMChatMessage defaultInstance];
}
- (CMChatMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMChatMessage*) buildPartial {
  CMChatMessage* returnMe = resultChatMessage;
  self.resultChatMessage = nil;
  return returnMe;
}
- (CMChatMessageBuilder*) mergeFrom:(CMChatMessage*) other {
  if (other == [CMChatMessage defaultInstance]) {
    return self;
  }
  if (other.hasSenderID) {
    [self setSenderID:other.senderID];
  }
  if (other.hasRoomID) {
    [self setRoomID:other.roomID];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMChatMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMChatMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSenderID:[input readString]];
        break;
      }
      case 18: {
        [self setRoomID:[input readString]];
        break;
      }
      case 25: {
        [self setTimestamp:[input readDouble]];
        break;
      }
      case 34: {
        [self setMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSenderID {
  return resultChatMessage.hasSenderID;
}
- (NSString*) senderID {
  return resultChatMessage.senderID;
}
- (CMChatMessageBuilder*) setSenderID:(NSString*) value {
  resultChatMessage.hasSenderID = YES;
  resultChatMessage.senderID = value;
  return self;
}
- (CMChatMessageBuilder*) clearSenderID {
  resultChatMessage.hasSenderID = NO;
  resultChatMessage.senderID = @"";
  return self;
}
- (BOOL) hasRoomID {
  return resultChatMessage.hasRoomID;
}
- (NSString*) roomID {
  return resultChatMessage.roomID;
}
- (CMChatMessageBuilder*) setRoomID:(NSString*) value {
  resultChatMessage.hasRoomID = YES;
  resultChatMessage.roomID = value;
  return self;
}
- (CMChatMessageBuilder*) clearRoomID {
  resultChatMessage.hasRoomID = NO;
  resultChatMessage.roomID = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultChatMessage.hasTimestamp;
}
- (Float64) timestamp {
  return resultChatMessage.timestamp;
}
- (CMChatMessageBuilder*) setTimestamp:(Float64) value {
  resultChatMessage.hasTimestamp = YES;
  resultChatMessage.timestamp = value;
  return self;
}
- (CMChatMessageBuilder*) clearTimestamp {
  resultChatMessage.hasTimestamp = NO;
  resultChatMessage.timestamp = 0;
  return self;
}
- (BOOL) hasMessage {
  return resultChatMessage.hasMessage;
}
- (NSString*) message {
  return resultChatMessage.message;
}
- (CMChatMessageBuilder*) setMessage:(NSString*) value {
  resultChatMessage.hasMessage = YES;
  resultChatMessage.message = value;
  return self;
}
- (CMChatMessageBuilder*) clearMessage {
  resultChatMessage.hasMessage = NO;
  resultChatMessage.message = @"";
  return self;
}
@end

@interface CMChatUser ()
@property (strong) NSString* userID;
@property (strong) NSString* nickname;
@end

@implementation CMChatUser

- (BOOL) hasUserID {
  return !!hasUserID_;
}
- (void) setHasUserID:(BOOL) _value_ {
  hasUserID_ = !!_value_;
}
@synthesize userID;
- (BOOL) hasNickname {
  return !!hasNickname_;
}
- (void) setHasNickname:(BOOL) _value_ {
  hasNickname_ = !!_value_;
}
@synthesize nickname;
- (instancetype) init {
  if ((self = [super init])) {
    self.userID = @"";
    self.nickname = @"";
  }
  return self;
}
static CMChatUser* defaultCMChatUserInstance = nil;
+ (void) initialize {
  if (self == [CMChatUser class]) {
    defaultCMChatUserInstance = [[CMChatUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCMChatUserInstance;
}
- (instancetype) defaultInstance {
  return defaultCMChatUserInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserID) {
    [output writeString:1 value:self.userID];
  }
  if (self.hasNickname) {
    [output writeString:2 value:self.nickname];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserID) {
    size_ += computeStringSize(1, self.userID);
  }
  if (self.hasNickname) {
    size_ += computeStringSize(2, self.nickname);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMChatUser*) parseFromData:(NSData*) data {
  return (CMChatUser*)[[[CMChatUser builder] mergeFromData:data] build];
}
+ (CMChatUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatUser*)[[[CMChatUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMChatUser*) parseFromInputStream:(NSInputStream*) input {
  return (CMChatUser*)[[[CMChatUser builder] mergeFromInputStream:input] build];
}
+ (CMChatUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatUser*)[[[CMChatUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMChatUser*)[[[CMChatUser builder] mergeFromCodedInputStream:input] build];
}
+ (CMChatUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatUser*)[[[CMChatUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatUserBuilder*) builder {
  return [[CMChatUserBuilder alloc] init];
}
+ (CMChatUserBuilder*) builderWithPrototype:(CMChatUser*) prototype {
  return [[CMChatUser builder] mergeFrom:prototype];
}
- (CMChatUserBuilder*) builder {
  return [CMChatUser builder];
}
- (CMChatUserBuilder*) toBuilder {
  return [CMChatUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userID", self.userID];
  }
  if (self.hasNickname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickname", self.nickname];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserID) {
    [dictionary setObject: self.userID forKey: @"userID"];
  }
  if (self.hasNickname) {
    [dictionary setObject: self.nickname forKey: @"nickname"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMChatUser class]]) {
    return NO;
  }
  CMChatUser *otherMessage = other;
  return
      self.hasUserID == otherMessage.hasUserID &&
      (!self.hasUserID || [self.userID isEqual:otherMessage.userID]) &&
      self.hasNickname == otherMessage.hasNickname &&
      (!self.hasNickname || [self.nickname isEqual:otherMessage.nickname]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserID) {
    hashCode = hashCode * 31 + [self.userID hash];
  }
  if (self.hasNickname) {
    hashCode = hashCode * 31 + [self.nickname hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMChatUserBuilder()
@property (strong) CMChatUser* resultChatUser;
@end

@implementation CMChatUserBuilder
@synthesize resultChatUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatUser = [[CMChatUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatUser;
}
- (CMChatUserBuilder*) clear {
  self.resultChatUser = [[CMChatUser alloc] init];
  return self;
}
- (CMChatUserBuilder*) clone {
  return [CMChatUser builderWithPrototype:resultChatUser];
}
- (CMChatUser*) defaultInstance {
  return [CMChatUser defaultInstance];
}
- (CMChatUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMChatUser*) buildPartial {
  CMChatUser* returnMe = resultChatUser;
  self.resultChatUser = nil;
  return returnMe;
}
- (CMChatUserBuilder*) mergeFrom:(CMChatUser*) other {
  if (other == [CMChatUser defaultInstance]) {
    return self;
  }
  if (other.hasUserID) {
    [self setUserID:other.userID];
  }
  if (other.hasNickname) {
    [self setNickname:other.nickname];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMChatUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMChatUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserID:[input readString]];
        break;
      }
      case 18: {
        [self setNickname:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserID {
  return resultChatUser.hasUserID;
}
- (NSString*) userID {
  return resultChatUser.userID;
}
- (CMChatUserBuilder*) setUserID:(NSString*) value {
  resultChatUser.hasUserID = YES;
  resultChatUser.userID = value;
  return self;
}
- (CMChatUserBuilder*) clearUserID {
  resultChatUser.hasUserID = NO;
  resultChatUser.userID = @"";
  return self;
}
- (BOOL) hasNickname {
  return resultChatUser.hasNickname;
}
- (NSString*) nickname {
  return resultChatUser.nickname;
}
- (CMChatUserBuilder*) setNickname:(NSString*) value {
  resultChatUser.hasNickname = YES;
  resultChatUser.nickname = value;
  return self;
}
- (CMChatUserBuilder*) clearNickname {
  resultChatUser.hasNickname = NO;
  resultChatUser.nickname = @"";
  return self;
}
@end

@interface CMChatRoom ()
@property (strong) NSString* roomID;
@property (strong) NSString* roomName;
@end

@implementation CMChatRoom

- (BOOL) hasRoomID {
  return !!hasRoomID_;
}
- (void) setHasRoomID:(BOOL) _value_ {
  hasRoomID_ = !!_value_;
}
@synthesize roomID;
- (BOOL) hasRoomName {
  return !!hasRoomName_;
}
- (void) setHasRoomName:(BOOL) _value_ {
  hasRoomName_ = !!_value_;
}
@synthesize roomName;
- (instancetype) init {
  if ((self = [super init])) {
    self.roomID = @"";
    self.roomName = @"";
  }
  return self;
}
static CMChatRoom* defaultCMChatRoomInstance = nil;
+ (void) initialize {
  if (self == [CMChatRoom class]) {
    defaultCMChatRoomInstance = [[CMChatRoom alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCMChatRoomInstance;
}
- (instancetype) defaultInstance {
  return defaultCMChatRoomInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoomID) {
    [output writeString:1 value:self.roomID];
  }
  if (self.hasRoomName) {
    [output writeString:2 value:self.roomName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRoomID) {
    size_ += computeStringSize(1, self.roomID);
  }
  if (self.hasRoomName) {
    size_ += computeStringSize(2, self.roomName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMChatRoom*) parseFromData:(NSData*) data {
  return (CMChatRoom*)[[[CMChatRoom builder] mergeFromData:data] build];
}
+ (CMChatRoom*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatRoom*)[[[CMChatRoom builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMChatRoom*) parseFromInputStream:(NSInputStream*) input {
  return (CMChatRoom*)[[[CMChatRoom builder] mergeFromInputStream:input] build];
}
+ (CMChatRoom*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatRoom*)[[[CMChatRoom builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatRoom*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMChatRoom*)[[[CMChatRoom builder] mergeFromCodedInputStream:input] build];
}
+ (CMChatRoom*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatRoom*)[[[CMChatRoom builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatRoomBuilder*) builder {
  return [[CMChatRoomBuilder alloc] init];
}
+ (CMChatRoomBuilder*) builderWithPrototype:(CMChatRoom*) prototype {
  return [[CMChatRoom builder] mergeFrom:prototype];
}
- (CMChatRoomBuilder*) builder {
  return [CMChatRoom builder];
}
- (CMChatRoomBuilder*) toBuilder {
  return [CMChatRoom builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRoomID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomID", self.roomID];
  }
  if (self.hasRoomName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomName", self.roomName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRoomID) {
    [dictionary setObject: self.roomID forKey: @"roomID"];
  }
  if (self.hasRoomName) {
    [dictionary setObject: self.roomName forKey: @"roomName"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMChatRoom class]]) {
    return NO;
  }
  CMChatRoom *otherMessage = other;
  return
      self.hasRoomID == otherMessage.hasRoomID &&
      (!self.hasRoomID || [self.roomID isEqual:otherMessage.roomID]) &&
      self.hasRoomName == otherMessage.hasRoomName &&
      (!self.hasRoomName || [self.roomName isEqual:otherMessage.roomName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRoomID) {
    hashCode = hashCode * 31 + [self.roomID hash];
  }
  if (self.hasRoomName) {
    hashCode = hashCode * 31 + [self.roomName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMChatRoomBuilder()
@property (strong) CMChatRoom* resultChatRoom;
@end

@implementation CMChatRoomBuilder
@synthesize resultChatRoom;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatRoom = [[CMChatRoom alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatRoom;
}
- (CMChatRoomBuilder*) clear {
  self.resultChatRoom = [[CMChatRoom alloc] init];
  return self;
}
- (CMChatRoomBuilder*) clone {
  return [CMChatRoom builderWithPrototype:resultChatRoom];
}
- (CMChatRoom*) defaultInstance {
  return [CMChatRoom defaultInstance];
}
- (CMChatRoom*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMChatRoom*) buildPartial {
  CMChatRoom* returnMe = resultChatRoom;
  self.resultChatRoom = nil;
  return returnMe;
}
- (CMChatRoomBuilder*) mergeFrom:(CMChatRoom*) other {
  if (other == [CMChatRoom defaultInstance]) {
    return self;
  }
  if (other.hasRoomID) {
    [self setRoomID:other.roomID];
  }
  if (other.hasRoomName) {
    [self setRoomName:other.roomName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMChatRoomBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMChatRoomBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setRoomID:[input readString]];
        break;
      }
      case 18: {
        [self setRoomName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRoomID {
  return resultChatRoom.hasRoomID;
}
- (NSString*) roomID {
  return resultChatRoom.roomID;
}
- (CMChatRoomBuilder*) setRoomID:(NSString*) value {
  resultChatRoom.hasRoomID = YES;
  resultChatRoom.roomID = value;
  return self;
}
- (CMChatRoomBuilder*) clearRoomID {
  resultChatRoom.hasRoomID = NO;
  resultChatRoom.roomID = @"";
  return self;
}
- (BOOL) hasRoomName {
  return resultChatRoom.hasRoomName;
}
- (NSString*) roomName {
  return resultChatRoom.roomName;
}
- (CMChatRoomBuilder*) setRoomName:(NSString*) value {
  resultChatRoom.hasRoomName = YES;
  resultChatRoom.roomName = value;
  return self;
}
- (CMChatRoomBuilder*) clearRoomName {
  resultChatRoom.hasRoomName = NO;
  resultChatRoom.roomName = @"";
  return self;
}
@end

@interface CMChatConnect ()
@property BOOL isConnecting;
@property (strong) CMChatUser* user;
@property (strong) NSMutableArray * roomsArray;
@end

@implementation CMChatConnect

- (BOOL) hasIsConnecting {
  return !!hasIsConnecting_;
}
- (void) setHasIsConnecting:(BOOL) _value_ {
  hasIsConnecting_ = !!_value_;
}
- (BOOL) isConnecting {
  return !!isConnecting_;
}
- (void) setIsConnecting:(BOOL) _value_ {
  isConnecting_ = !!_value_;
}
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
@synthesize roomsArray;
@dynamic rooms;
- (instancetype) init {
  if ((self = [super init])) {
    self.isConnecting = NO;
    self.user = [CMChatUser defaultInstance];
  }
  return self;
}
static CMChatConnect* defaultCMChatConnectInstance = nil;
+ (void) initialize {
  if (self == [CMChatConnect class]) {
    defaultCMChatConnectInstance = [[CMChatConnect alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCMChatConnectInstance;
}
- (instancetype) defaultInstance {
  return defaultCMChatConnectInstance;
}
- (NSArray *)rooms {
  return roomsArray;
}
- (CMChatRoom*)roomsAtIndex:(NSUInteger)index {
  return [roomsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIsConnecting) {
    [output writeBool:1 value:self.isConnecting];
  }
  if (self.hasUser) {
    [output writeMessage:2 value:self.user];
  }
  [self.roomsArray enumerateObjectsUsingBlock:^(CMChatRoom *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIsConnecting) {
    size_ += computeBoolSize(1, self.isConnecting);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(2, self.user);
  }
  [self.roomsArray enumerateObjectsUsingBlock:^(CMChatRoom *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMChatConnect*) parseFromData:(NSData*) data {
  return (CMChatConnect*)[[[CMChatConnect builder] mergeFromData:data] build];
}
+ (CMChatConnect*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatConnect*)[[[CMChatConnect builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMChatConnect*) parseFromInputStream:(NSInputStream*) input {
  return (CMChatConnect*)[[[CMChatConnect builder] mergeFromInputStream:input] build];
}
+ (CMChatConnect*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatConnect*)[[[CMChatConnect builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatConnect*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMChatConnect*)[[[CMChatConnect builder] mergeFromCodedInputStream:input] build];
}
+ (CMChatConnect*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatConnect*)[[[CMChatConnect builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatConnectBuilder*) builder {
  return [[CMChatConnectBuilder alloc] init];
}
+ (CMChatConnectBuilder*) builderWithPrototype:(CMChatConnect*) prototype {
  return [[CMChatConnect builder] mergeFrom:prototype];
}
- (CMChatConnectBuilder*) builder {
  return [CMChatConnect builder];
}
- (CMChatConnectBuilder*) toBuilder {
  return [CMChatConnect builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIsConnecting) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isConnecting", [NSNumber numberWithBool:self.isConnecting]];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.roomsArray enumerateObjectsUsingBlock:^(CMChatRoom *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"rooms"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasIsConnecting) {
    [dictionary setObject: [NSNumber numberWithBool:self.isConnecting] forKey: @"isConnecting"];
  }
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  for (CMChatRoom* element in self.roomsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"rooms"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMChatConnect class]]) {
    return NO;
  }
  CMChatConnect *otherMessage = other;
  return
      self.hasIsConnecting == otherMessage.hasIsConnecting &&
      (!self.hasIsConnecting || self.isConnecting == otherMessage.isConnecting) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      [self.roomsArray isEqualToArray:otherMessage.roomsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasIsConnecting) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isConnecting] hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  [self.roomsArray enumerateObjectsUsingBlock:^(CMChatRoom *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMChatConnectBuilder()
@property (strong) CMChatConnect* resultChatConnect;
@end

@implementation CMChatConnectBuilder
@synthesize resultChatConnect;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatConnect = [[CMChatConnect alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatConnect;
}
- (CMChatConnectBuilder*) clear {
  self.resultChatConnect = [[CMChatConnect alloc] init];
  return self;
}
- (CMChatConnectBuilder*) clone {
  return [CMChatConnect builderWithPrototype:resultChatConnect];
}
- (CMChatConnect*) defaultInstance {
  return [CMChatConnect defaultInstance];
}
- (CMChatConnect*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMChatConnect*) buildPartial {
  CMChatConnect* returnMe = resultChatConnect;
  self.resultChatConnect = nil;
  return returnMe;
}
- (CMChatConnectBuilder*) mergeFrom:(CMChatConnect*) other {
  if (other == [CMChatConnect defaultInstance]) {
    return self;
  }
  if (other.hasIsConnecting) {
    [self setIsConnecting:other.isConnecting];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.roomsArray.count > 0) {
    if (resultChatConnect.roomsArray == nil) {
      resultChatConnect.roomsArray = [[NSMutableArray alloc] initWithArray:other.roomsArray];
    } else {
      [resultChatConnect.roomsArray addObjectsFromArray:other.roomsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMChatConnectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMChatConnectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setIsConnecting:[input readBool]];
        break;
      }
      case 18: {
        CMChatUserBuilder* subBuilder = [CMChatUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        CMChatRoomBuilder* subBuilder = [CMChatRoom builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRooms:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasIsConnecting {
  return resultChatConnect.hasIsConnecting;
}
- (BOOL) isConnecting {
  return resultChatConnect.isConnecting;
}
- (CMChatConnectBuilder*) setIsConnecting:(BOOL) value {
  resultChatConnect.hasIsConnecting = YES;
  resultChatConnect.isConnecting = value;
  return self;
}
- (CMChatConnectBuilder*) clearIsConnecting {
  resultChatConnect.hasIsConnecting = NO;
  resultChatConnect.isConnecting = NO;
  return self;
}
- (BOOL) hasUser {
  return resultChatConnect.hasUser;
}
- (CMChatUser*) user {
  return resultChatConnect.user;
}
- (CMChatConnectBuilder*) setUser:(CMChatUser*) value {
  resultChatConnect.hasUser = YES;
  resultChatConnect.user = value;
  return self;
}
- (CMChatConnectBuilder*) setUserBuilder:(CMChatUserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (CMChatConnectBuilder*) mergeUser:(CMChatUser*) value {
  if (resultChatConnect.hasUser &&
      resultChatConnect.user != [CMChatUser defaultInstance]) {
    resultChatConnect.user =
      [[[CMChatUser builderWithPrototype:resultChatConnect.user] mergeFrom:value] buildPartial];
  } else {
    resultChatConnect.user = value;
  }
  resultChatConnect.hasUser = YES;
  return self;
}
- (CMChatConnectBuilder*) clearUser {
  resultChatConnect.hasUser = NO;
  resultChatConnect.user = [CMChatUser defaultInstance];
  return self;
}
- (NSMutableArray *)rooms {
  return resultChatConnect.roomsArray;
}
- (CMChatRoom*)roomsAtIndex:(NSUInteger)index {
  return [resultChatConnect roomsAtIndex:index];
}
- (CMChatConnectBuilder *)addRooms:(CMChatRoom*)value {
  if (resultChatConnect.roomsArray == nil) {
    resultChatConnect.roomsArray = [[NSMutableArray alloc]init];
  }
  [resultChatConnect.roomsArray addObject:value];
  return self;
}
- (CMChatConnectBuilder *)setRoomsArray:(NSArray *)array {
  resultChatConnect.roomsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (CMChatConnectBuilder *)clearRooms {
  resultChatConnect.roomsArray = nil;
  return self;
}
@end

@interface CMChatEnterRoom ()
@property (strong) CMChatUser* user;
@property (strong) NSString* roomID;
@property BOOL userIsEntering;
@end

@implementation CMChatEnterRoom

- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasRoomID {
  return !!hasRoomID_;
}
- (void) setHasRoomID:(BOOL) _value_ {
  hasRoomID_ = !!_value_;
}
@synthesize roomID;
- (BOOL) hasUserIsEntering {
  return !!hasUserIsEntering_;
}
- (void) setHasUserIsEntering:(BOOL) _value_ {
  hasUserIsEntering_ = !!_value_;
}
- (BOOL) userIsEntering {
  return !!userIsEntering_;
}
- (void) setUserIsEntering:(BOOL) _value_ {
  userIsEntering_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.user = [CMChatUser defaultInstance];
    self.roomID = @"";
    self.userIsEntering = NO;
  }
  return self;
}
static CMChatEnterRoom* defaultCMChatEnterRoomInstance = nil;
+ (void) initialize {
  if (self == [CMChatEnterRoom class]) {
    defaultCMChatEnterRoomInstance = [[CMChatEnterRoom alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCMChatEnterRoomInstance;
}
- (instancetype) defaultInstance {
  return defaultCMChatEnterRoomInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUser) {
    [output writeMessage:1 value:self.user];
  }
  if (self.hasRoomID) {
    [output writeString:2 value:self.roomID];
  }
  if (self.hasUserIsEntering) {
    [output writeBool:3 value:self.userIsEntering];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUser) {
    size_ += computeMessageSize(1, self.user);
  }
  if (self.hasRoomID) {
    size_ += computeStringSize(2, self.roomID);
  }
  if (self.hasUserIsEntering) {
    size_ += computeBoolSize(3, self.userIsEntering);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMChatEnterRoom*) parseFromData:(NSData*) data {
  return (CMChatEnterRoom*)[[[CMChatEnterRoom builder] mergeFromData:data] build];
}
+ (CMChatEnterRoom*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatEnterRoom*)[[[CMChatEnterRoom builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMChatEnterRoom*) parseFromInputStream:(NSInputStream*) input {
  return (CMChatEnterRoom*)[[[CMChatEnterRoom builder] mergeFromInputStream:input] build];
}
+ (CMChatEnterRoom*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatEnterRoom*)[[[CMChatEnterRoom builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatEnterRoom*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMChatEnterRoom*)[[[CMChatEnterRoom builder] mergeFromCodedInputStream:input] build];
}
+ (CMChatEnterRoom*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatEnterRoom*)[[[CMChatEnterRoom builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatEnterRoomBuilder*) builder {
  return [[CMChatEnterRoomBuilder alloc] init];
}
+ (CMChatEnterRoomBuilder*) builderWithPrototype:(CMChatEnterRoom*) prototype {
  return [[CMChatEnterRoom builder] mergeFrom:prototype];
}
- (CMChatEnterRoomBuilder*) builder {
  return [CMChatEnterRoom builder];
}
- (CMChatEnterRoomBuilder*) toBuilder {
  return [CMChatEnterRoom builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRoomID) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomID", self.roomID];
  }
  if (self.hasUserIsEntering) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userIsEntering", [NSNumber numberWithBool:self.userIsEntering]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasRoomID) {
    [dictionary setObject: self.roomID forKey: @"roomID"];
  }
  if (self.hasUserIsEntering) {
    [dictionary setObject: [NSNumber numberWithBool:self.userIsEntering] forKey: @"userIsEntering"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMChatEnterRoom class]]) {
    return NO;
  }
  CMChatEnterRoom *otherMessage = other;
  return
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasRoomID == otherMessage.hasRoomID &&
      (!self.hasRoomID || [self.roomID isEqual:otherMessage.roomID]) &&
      self.hasUserIsEntering == otherMessage.hasUserIsEntering &&
      (!self.hasUserIsEntering || self.userIsEntering == otherMessage.userIsEntering) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasRoomID) {
    hashCode = hashCode * 31 + [self.roomID hash];
  }
  if (self.hasUserIsEntering) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.userIsEntering] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMChatEnterRoomBuilder()
@property (strong) CMChatEnterRoom* resultChatEnterRoom;
@end

@implementation CMChatEnterRoomBuilder
@synthesize resultChatEnterRoom;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatEnterRoom = [[CMChatEnterRoom alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatEnterRoom;
}
- (CMChatEnterRoomBuilder*) clear {
  self.resultChatEnterRoom = [[CMChatEnterRoom alloc] init];
  return self;
}
- (CMChatEnterRoomBuilder*) clone {
  return [CMChatEnterRoom builderWithPrototype:resultChatEnterRoom];
}
- (CMChatEnterRoom*) defaultInstance {
  return [CMChatEnterRoom defaultInstance];
}
- (CMChatEnterRoom*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMChatEnterRoom*) buildPartial {
  CMChatEnterRoom* returnMe = resultChatEnterRoom;
  self.resultChatEnterRoom = nil;
  return returnMe;
}
- (CMChatEnterRoomBuilder*) mergeFrom:(CMChatEnterRoom*) other {
  if (other == [CMChatEnterRoom defaultInstance]) {
    return self;
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasRoomID) {
    [self setRoomID:other.roomID];
  }
  if (other.hasUserIsEntering) {
    [self setUserIsEntering:other.userIsEntering];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMChatEnterRoomBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMChatEnterRoomBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMChatUserBuilder* subBuilder = [CMChatUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setRoomID:[input readString]];
        break;
      }
      case 24: {
        [self setUserIsEntering:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasUser {
  return resultChatEnterRoom.hasUser;
}
- (CMChatUser*) user {
  return resultChatEnterRoom.user;
}
- (CMChatEnterRoomBuilder*) setUser:(CMChatUser*) value {
  resultChatEnterRoom.hasUser = YES;
  resultChatEnterRoom.user = value;
  return self;
}
- (CMChatEnterRoomBuilder*) setUserBuilder:(CMChatUserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (CMChatEnterRoomBuilder*) mergeUser:(CMChatUser*) value {
  if (resultChatEnterRoom.hasUser &&
      resultChatEnterRoom.user != [CMChatUser defaultInstance]) {
    resultChatEnterRoom.user =
      [[[CMChatUser builderWithPrototype:resultChatEnterRoom.user] mergeFrom:value] buildPartial];
  } else {
    resultChatEnterRoom.user = value;
  }
  resultChatEnterRoom.hasUser = YES;
  return self;
}
- (CMChatEnterRoomBuilder*) clearUser {
  resultChatEnterRoom.hasUser = NO;
  resultChatEnterRoom.user = [CMChatUser defaultInstance];
  return self;
}
- (BOOL) hasRoomID {
  return resultChatEnterRoom.hasRoomID;
}
- (NSString*) roomID {
  return resultChatEnterRoom.roomID;
}
- (CMChatEnterRoomBuilder*) setRoomID:(NSString*) value {
  resultChatEnterRoom.hasRoomID = YES;
  resultChatEnterRoom.roomID = value;
  return self;
}
- (CMChatEnterRoomBuilder*) clearRoomID {
  resultChatEnterRoom.hasRoomID = NO;
  resultChatEnterRoom.roomID = @"";
  return self;
}
- (BOOL) hasUserIsEntering {
  return resultChatEnterRoom.hasUserIsEntering;
}
- (BOOL) userIsEntering {
  return resultChatEnterRoom.userIsEntering;
}
- (CMChatEnterRoomBuilder*) setUserIsEntering:(BOOL) value {
  resultChatEnterRoom.hasUserIsEntering = YES;
  resultChatEnterRoom.userIsEntering = value;
  return self;
}
- (CMChatEnterRoomBuilder*) clearUserIsEntering {
  resultChatEnterRoom.hasUserIsEntering = NO;
  resultChatEnterRoom.userIsEntering = NO;
  return self;
}
@end

@interface CMChatPresence ()
@property (strong) CMChatRoom* room;
@property (strong) NSMutableArray * usersArray;
@end

@implementation CMChatPresence

- (BOOL) hasRoom {
  return !!hasRoom_;
}
- (void) setHasRoom:(BOOL) _value_ {
  hasRoom_ = !!_value_;
}
@synthesize room;
@synthesize usersArray;
@dynamic users;
- (instancetype) init {
  if ((self = [super init])) {
    self.room = [CMChatRoom defaultInstance];
  }
  return self;
}
static CMChatPresence* defaultCMChatPresenceInstance = nil;
+ (void) initialize {
  if (self == [CMChatPresence class]) {
    defaultCMChatPresenceInstance = [[CMChatPresence alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCMChatPresenceInstance;
}
- (instancetype) defaultInstance {
  return defaultCMChatPresenceInstance;
}
- (NSArray *)users {
  return usersArray;
}
- (CMChatUser*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoom) {
    [output writeMessage:1 value:self.room];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(CMChatUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRoom) {
    size_ += computeMessageSize(1, self.room);
  }
  [self.usersArray enumerateObjectsUsingBlock:^(CMChatUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMChatPresence*) parseFromData:(NSData*) data {
  return (CMChatPresence*)[[[CMChatPresence builder] mergeFromData:data] build];
}
+ (CMChatPresence*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatPresence*)[[[CMChatPresence builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMChatPresence*) parseFromInputStream:(NSInputStream*) input {
  return (CMChatPresence*)[[[CMChatPresence builder] mergeFromInputStream:input] build];
}
+ (CMChatPresence*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatPresence*)[[[CMChatPresence builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatPresence*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMChatPresence*)[[[CMChatPresence builder] mergeFromCodedInputStream:input] build];
}
+ (CMChatPresence*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatPresence*)[[[CMChatPresence builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatPresenceBuilder*) builder {
  return [[CMChatPresenceBuilder alloc] init];
}
+ (CMChatPresenceBuilder*) builderWithPrototype:(CMChatPresence*) prototype {
  return [[CMChatPresence builder] mergeFrom:prototype];
}
- (CMChatPresenceBuilder*) builder {
  return [CMChatPresence builder];
}
- (CMChatPresenceBuilder*) toBuilder {
  return [CMChatPresence builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRoom) {
    [output appendFormat:@"%@%@ {\n", indent, @"room"];
    [self.room writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(CMChatUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRoom) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.room storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"room"];
  }
  for (CMChatUser* element in self.usersArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"users"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMChatPresence class]]) {
    return NO;
  }
  CMChatPresence *otherMessage = other;
  return
      self.hasRoom == otherMessage.hasRoom &&
      (!self.hasRoom || [self.room isEqual:otherMessage.room]) &&
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRoom) {
    hashCode = hashCode * 31 + [self.room hash];
  }
  [self.usersArray enumerateObjectsUsingBlock:^(CMChatUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMChatPresenceBuilder()
@property (strong) CMChatPresence* resultChatPresence;
@end

@implementation CMChatPresenceBuilder
@synthesize resultChatPresence;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatPresence = [[CMChatPresence alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatPresence;
}
- (CMChatPresenceBuilder*) clear {
  self.resultChatPresence = [[CMChatPresence alloc] init];
  return self;
}
- (CMChatPresenceBuilder*) clone {
  return [CMChatPresence builderWithPrototype:resultChatPresence];
}
- (CMChatPresence*) defaultInstance {
  return [CMChatPresence defaultInstance];
}
- (CMChatPresence*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMChatPresence*) buildPartial {
  CMChatPresence* returnMe = resultChatPresence;
  self.resultChatPresence = nil;
  return returnMe;
}
- (CMChatPresenceBuilder*) mergeFrom:(CMChatPresence*) other {
  if (other == [CMChatPresence defaultInstance]) {
    return self;
  }
  if (other.hasRoom) {
    [self mergeRoom:other.room];
  }
  if (other.usersArray.count > 0) {
    if (resultChatPresence.usersArray == nil) {
      resultChatPresence.usersArray = [[NSMutableArray alloc] initWithArray:other.usersArray];
    } else {
      [resultChatPresence.usersArray addObjectsFromArray:other.usersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMChatPresenceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMChatPresenceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMChatRoomBuilder* subBuilder = [CMChatRoom builder];
        if (self.hasRoom) {
          [subBuilder mergeFrom:self.room];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoom:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        CMChatUserBuilder* subBuilder = [CMChatUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasRoom {
  return resultChatPresence.hasRoom;
}
- (CMChatRoom*) room {
  return resultChatPresence.room;
}
- (CMChatPresenceBuilder*) setRoom:(CMChatRoom*) value {
  resultChatPresence.hasRoom = YES;
  resultChatPresence.room = value;
  return self;
}
- (CMChatPresenceBuilder*) setRoomBuilder:(CMChatRoomBuilder*) builderForValue {
  return [self setRoom:[builderForValue build]];
}
- (CMChatPresenceBuilder*) mergeRoom:(CMChatRoom*) value {
  if (resultChatPresence.hasRoom &&
      resultChatPresence.room != [CMChatRoom defaultInstance]) {
    resultChatPresence.room =
      [[[CMChatRoom builderWithPrototype:resultChatPresence.room] mergeFrom:value] buildPartial];
  } else {
    resultChatPresence.room = value;
  }
  resultChatPresence.hasRoom = YES;
  return self;
}
- (CMChatPresenceBuilder*) clearRoom {
  resultChatPresence.hasRoom = NO;
  resultChatPresence.room = [CMChatRoom defaultInstance];
  return self;
}
- (NSMutableArray *)users {
  return resultChatPresence.usersArray;
}
- (CMChatUser*)usersAtIndex:(NSUInteger)index {
  return [resultChatPresence usersAtIndex:index];
}
- (CMChatPresenceBuilder *)addUsers:(CMChatUser*)value {
  if (resultChatPresence.usersArray == nil) {
    resultChatPresence.usersArray = [[NSMutableArray alloc]init];
  }
  [resultChatPresence.usersArray addObject:value];
  return self;
}
- (CMChatPresenceBuilder *)setUsersArray:(NSArray *)array {
  resultChatPresence.usersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (CMChatPresenceBuilder *)clearUsers {
  resultChatPresence.usersArray = nil;
  return self;
}
@end

@interface CMChatResponse ()
@property CMStatusCode code;
@property (strong) NSString* message;
@end

@implementation CMChatResponse

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (instancetype) init {
  if ((self = [super init])) {
    self.code = CMStatusCodeStatusSuccess;
    self.message = @"";
  }
  return self;
}
static CMChatResponse* defaultCMChatResponseInstance = nil;
+ (void) initialize {
  if (self == [CMChatResponse class]) {
    defaultCMChatResponseInstance = [[CMChatResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCMChatResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultCMChatResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeEnum:1 value:self.code];
  }
  if (self.hasMessage) {
    [output writeString:2 value:self.message];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCode) {
    size_ += computeEnumSize(1, self.code);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(2, self.message);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMChatResponse*) parseFromData:(NSData*) data {
  return (CMChatResponse*)[[[CMChatResponse builder] mergeFromData:data] build];
}
+ (CMChatResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatResponse*)[[[CMChatResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMChatResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMChatResponse*)[[[CMChatResponse builder] mergeFromInputStream:input] build];
}
+ (CMChatResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatResponse*)[[[CMChatResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMChatResponse*)[[[CMChatResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMChatResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatResponse*)[[[CMChatResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatResponseBuilder*) builder {
  return [[CMChatResponseBuilder alloc] init];
}
+ (CMChatResponseBuilder*) builderWithPrototype:(CMChatResponse*) prototype {
  return [[CMChatResponse builder] mergeFrom:prototype];
}
- (CMChatResponseBuilder*) builder {
  return [CMChatResponse builder];
}
- (CMChatResponseBuilder*) toBuilder {
  return [CMChatResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromCMStatusCode(self.code)];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMChatResponse class]]) {
    return NO;
  }
  CMChatResponse *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMChatResponseBuilder()
@property (strong) CMChatResponse* resultChatResponse;
@end

@implementation CMChatResponseBuilder
@synthesize resultChatResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatResponse = [[CMChatResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatResponse;
}
- (CMChatResponseBuilder*) clear {
  self.resultChatResponse = [[CMChatResponse alloc] init];
  return self;
}
- (CMChatResponseBuilder*) clone {
  return [CMChatResponse builderWithPrototype:resultChatResponse];
}
- (CMChatResponse*) defaultInstance {
  return [CMChatResponse defaultInstance];
}
- (CMChatResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMChatResponse*) buildPartial {
  CMChatResponse* returnMe = resultChatResponse;
  self.resultChatResponse = nil;
  return returnMe;
}
- (CMChatResponseBuilder*) mergeFrom:(CMChatResponse*) other {
  if (other == [CMChatResponse defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMChatResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMChatResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        CMStatusCode value = (CMStatusCode)[input readEnum];
        if (CMStatusCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return resultChatResponse.hasCode;
}
- (CMStatusCode) code {
  return resultChatResponse.code;
}
- (CMChatResponseBuilder*) setCode:(CMStatusCode) value {
  resultChatResponse.hasCode = YES;
  resultChatResponse.code = value;
  return self;
}
- (CMChatResponseBuilder*) clearCode {
  resultChatResponse.hasCode = NO;
  resultChatResponse.code = CMStatusCodeStatusSuccess;
  return self;
}
- (BOOL) hasMessage {
  return resultChatResponse.hasMessage;
}
- (NSString*) message {
  return resultChatResponse.message;
}
- (CMChatResponseBuilder*) setMessage:(NSString*) value {
  resultChatResponse.hasMessage = YES;
  resultChatResponse.message = value;
  return self;
}
- (CMChatResponseBuilder*) clearMessage {
  resultChatResponse.hasMessage = NO;
  resultChatResponse.message = @"";
  return self;
}
@end

@interface CMChatMessageType ()
@property (strong) CMChatMessage* chatMessage;
@property (strong) CMChatConnect* chatConnect;
@property (strong) CMChatEnterRoom* chatEnterRoom;
@property (strong) CMChatPresence* chatPresence;
@property (strong) CMChatResponse* chatResponse;
@end

@implementation CMChatMessageType

- (BOOL) hasChatMessage {
  return !!hasChatMessage_;
}
- (void) setHasChatMessage:(BOOL) _value_ {
  hasChatMessage_ = !!_value_;
}
@synthesize chatMessage;
- (BOOL) hasChatConnect {
  return !!hasChatConnect_;
}
- (void) setHasChatConnect:(BOOL) _value_ {
  hasChatConnect_ = !!_value_;
}
@synthesize chatConnect;
- (BOOL) hasChatEnterRoom {
  return !!hasChatEnterRoom_;
}
- (void) setHasChatEnterRoom:(BOOL) _value_ {
  hasChatEnterRoom_ = !!_value_;
}
@synthesize chatEnterRoom;
- (BOOL) hasChatPresence {
  return !!hasChatPresence_;
}
- (void) setHasChatPresence:(BOOL) _value_ {
  hasChatPresence_ = !!_value_;
}
@synthesize chatPresence;
- (BOOL) hasChatResponse {
  return !!hasChatResponse_;
}
- (void) setHasChatResponse:(BOOL) _value_ {
  hasChatResponse_ = !!_value_;
}
@synthesize chatResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.chatMessage = [CMChatMessage defaultInstance];
    self.chatConnect = [CMChatConnect defaultInstance];
    self.chatEnterRoom = [CMChatEnterRoom defaultInstance];
    self.chatPresence = [CMChatPresence defaultInstance];
    self.chatResponse = [CMChatResponse defaultInstance];
  }
  return self;
}
static CMChatMessageType* defaultCMChatMessageTypeInstance = nil;
+ (void) initialize {
  if (self == [CMChatMessageType class]) {
    defaultCMChatMessageTypeInstance = [[CMChatMessageType alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCMChatMessageTypeInstance;
}
- (instancetype) defaultInstance {
  return defaultCMChatMessageTypeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChatMessage) {
    [output writeMessage:1 value:self.chatMessage];
  }
  if (self.hasChatConnect) {
    [output writeMessage:2 value:self.chatConnect];
  }
  if (self.hasChatEnterRoom) {
    [output writeMessage:3 value:self.chatEnterRoom];
  }
  if (self.hasChatPresence) {
    [output writeMessage:4 value:self.chatPresence];
  }
  if (self.hasChatResponse) {
    [output writeMessage:5 value:self.chatResponse];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChatMessage) {
    size_ += computeMessageSize(1, self.chatMessage);
  }
  if (self.hasChatConnect) {
    size_ += computeMessageSize(2, self.chatConnect);
  }
  if (self.hasChatEnterRoom) {
    size_ += computeMessageSize(3, self.chatEnterRoom);
  }
  if (self.hasChatPresence) {
    size_ += computeMessageSize(4, self.chatPresence);
  }
  if (self.hasChatResponse) {
    size_ += computeMessageSize(5, self.chatResponse);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMChatMessageType*) parseFromData:(NSData*) data {
  return (CMChatMessageType*)[[[CMChatMessageType builder] mergeFromData:data] build];
}
+ (CMChatMessageType*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatMessageType*)[[[CMChatMessageType builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMChatMessageType*) parseFromInputStream:(NSInputStream*) input {
  return (CMChatMessageType*)[[[CMChatMessageType builder] mergeFromInputStream:input] build];
}
+ (CMChatMessageType*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatMessageType*)[[[CMChatMessageType builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatMessageType*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMChatMessageType*)[[[CMChatMessageType builder] mergeFromCodedInputStream:input] build];
}
+ (CMChatMessageType*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMChatMessageType*)[[[CMChatMessageType builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMChatMessageTypeBuilder*) builder {
  return [[CMChatMessageTypeBuilder alloc] init];
}
+ (CMChatMessageTypeBuilder*) builderWithPrototype:(CMChatMessageType*) prototype {
  return [[CMChatMessageType builder] mergeFrom:prototype];
}
- (CMChatMessageTypeBuilder*) builder {
  return [CMChatMessageType builder];
}
- (CMChatMessageTypeBuilder*) toBuilder {
  return [CMChatMessageType builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChatMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"chatMessage"];
    [self.chatMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasChatConnect) {
    [output appendFormat:@"%@%@ {\n", indent, @"chatConnect"];
    [self.chatConnect writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasChatEnterRoom) {
    [output appendFormat:@"%@%@ {\n", indent, @"chatEnterRoom"];
    [self.chatEnterRoom writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasChatPresence) {
    [output appendFormat:@"%@%@ {\n", indent, @"chatPresence"];
    [self.chatPresence writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasChatResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"chatResponse"];
    [self.chatResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasChatMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.chatMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"chatMessage"];
  }
  if (self.hasChatConnect) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.chatConnect storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"chatConnect"];
  }
  if (self.hasChatEnterRoom) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.chatEnterRoom storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"chatEnterRoom"];
  }
  if (self.hasChatPresence) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.chatPresence storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"chatPresence"];
  }
  if (self.hasChatResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.chatResponse storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"chatResponse"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMChatMessageType class]]) {
    return NO;
  }
  CMChatMessageType *otherMessage = other;
  return
      self.hasChatMessage == otherMessage.hasChatMessage &&
      (!self.hasChatMessage || [self.chatMessage isEqual:otherMessage.chatMessage]) &&
      self.hasChatConnect == otherMessage.hasChatConnect &&
      (!self.hasChatConnect || [self.chatConnect isEqual:otherMessage.chatConnect]) &&
      self.hasChatEnterRoom == otherMessage.hasChatEnterRoom &&
      (!self.hasChatEnterRoom || [self.chatEnterRoom isEqual:otherMessage.chatEnterRoom]) &&
      self.hasChatPresence == otherMessage.hasChatPresence &&
      (!self.hasChatPresence || [self.chatPresence isEqual:otherMessage.chatPresence]) &&
      self.hasChatResponse == otherMessage.hasChatResponse &&
      (!self.hasChatResponse || [self.chatResponse isEqual:otherMessage.chatResponse]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasChatMessage) {
    hashCode = hashCode * 31 + [self.chatMessage hash];
  }
  if (self.hasChatConnect) {
    hashCode = hashCode * 31 + [self.chatConnect hash];
  }
  if (self.hasChatEnterRoom) {
    hashCode = hashCode * 31 + [self.chatEnterRoom hash];
  }
  if (self.hasChatPresence) {
    hashCode = hashCode * 31 + [self.chatPresence hash];
  }
  if (self.hasChatResponse) {
    hashCode = hashCode * 31 + [self.chatResponse hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMChatMessageTypeBuilder()
@property (strong) CMChatMessageType* resultChatMessageType;
@end

@implementation CMChatMessageTypeBuilder
@synthesize resultChatMessageType;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatMessageType = [[CMChatMessageType alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatMessageType;
}
- (CMChatMessageTypeBuilder*) clear {
  self.resultChatMessageType = [[CMChatMessageType alloc] init];
  return self;
}
- (CMChatMessageTypeBuilder*) clone {
  return [CMChatMessageType builderWithPrototype:resultChatMessageType];
}
- (CMChatMessageType*) defaultInstance {
  return [CMChatMessageType defaultInstance];
}
- (CMChatMessageType*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMChatMessageType*) buildPartial {
  CMChatMessageType* returnMe = resultChatMessageType;
  self.resultChatMessageType = nil;
  return returnMe;
}
- (CMChatMessageTypeBuilder*) mergeFrom:(CMChatMessageType*) other {
  if (other == [CMChatMessageType defaultInstance]) {
    return self;
  }
  if (other.hasChatMessage) {
    [self mergeChatMessage:other.chatMessage];
  }
  if (other.hasChatConnect) {
    [self mergeChatConnect:other.chatConnect];
  }
  if (other.hasChatEnterRoom) {
    [self mergeChatEnterRoom:other.chatEnterRoom];
  }
  if (other.hasChatPresence) {
    [self mergeChatPresence:other.chatPresence];
  }
  if (other.hasChatResponse) {
    [self mergeChatResponse:other.chatResponse];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMChatMessageTypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMChatMessageTypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMChatMessageBuilder* subBuilder = [CMChatMessage builder];
        if (self.hasChatMessage) {
          [subBuilder mergeFrom:self.chatMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChatMessage:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        CMChatConnectBuilder* subBuilder = [CMChatConnect builder];
        if (self.hasChatConnect) {
          [subBuilder mergeFrom:self.chatConnect];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChatConnect:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        CMChatEnterRoomBuilder* subBuilder = [CMChatEnterRoom builder];
        if (self.hasChatEnterRoom) {
          [subBuilder mergeFrom:self.chatEnterRoom];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChatEnterRoom:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        CMChatPresenceBuilder* subBuilder = [CMChatPresence builder];
        if (self.hasChatPresence) {
          [subBuilder mergeFrom:self.chatPresence];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChatPresence:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        CMChatResponseBuilder* subBuilder = [CMChatResponse builder];
        if (self.hasChatResponse) {
          [subBuilder mergeFrom:self.chatResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChatResponse:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasChatMessage {
  return resultChatMessageType.hasChatMessage;
}
- (CMChatMessage*) chatMessage {
  return resultChatMessageType.chatMessage;
}
- (CMChatMessageTypeBuilder*) setChatMessage:(CMChatMessage*) value {
  resultChatMessageType.hasChatMessage = YES;
  resultChatMessageType.chatMessage = value;
  return self;
}
- (CMChatMessageTypeBuilder*) setChatMessageBuilder:(CMChatMessageBuilder*) builderForValue {
  return [self setChatMessage:[builderForValue build]];
}
- (CMChatMessageTypeBuilder*) mergeChatMessage:(CMChatMessage*) value {
  if (resultChatMessageType.hasChatMessage &&
      resultChatMessageType.chatMessage != [CMChatMessage defaultInstance]) {
    resultChatMessageType.chatMessage =
      [[[CMChatMessage builderWithPrototype:resultChatMessageType.chatMessage] mergeFrom:value] buildPartial];
  } else {
    resultChatMessageType.chatMessage = value;
  }
  resultChatMessageType.hasChatMessage = YES;
  return self;
}
- (CMChatMessageTypeBuilder*) clearChatMessage {
  resultChatMessageType.hasChatMessage = NO;
  resultChatMessageType.chatMessage = [CMChatMessage defaultInstance];
  return self;
}
- (BOOL) hasChatConnect {
  return resultChatMessageType.hasChatConnect;
}
- (CMChatConnect*) chatConnect {
  return resultChatMessageType.chatConnect;
}
- (CMChatMessageTypeBuilder*) setChatConnect:(CMChatConnect*) value {
  resultChatMessageType.hasChatConnect = YES;
  resultChatMessageType.chatConnect = value;
  return self;
}
- (CMChatMessageTypeBuilder*) setChatConnectBuilder:(CMChatConnectBuilder*) builderForValue {
  return [self setChatConnect:[builderForValue build]];
}
- (CMChatMessageTypeBuilder*) mergeChatConnect:(CMChatConnect*) value {
  if (resultChatMessageType.hasChatConnect &&
      resultChatMessageType.chatConnect != [CMChatConnect defaultInstance]) {
    resultChatMessageType.chatConnect =
      [[[CMChatConnect builderWithPrototype:resultChatMessageType.chatConnect] mergeFrom:value] buildPartial];
  } else {
    resultChatMessageType.chatConnect = value;
  }
  resultChatMessageType.hasChatConnect = YES;
  return self;
}
- (CMChatMessageTypeBuilder*) clearChatConnect {
  resultChatMessageType.hasChatConnect = NO;
  resultChatMessageType.chatConnect = [CMChatConnect defaultInstance];
  return self;
}
- (BOOL) hasChatEnterRoom {
  return resultChatMessageType.hasChatEnterRoom;
}
- (CMChatEnterRoom*) chatEnterRoom {
  return resultChatMessageType.chatEnterRoom;
}
- (CMChatMessageTypeBuilder*) setChatEnterRoom:(CMChatEnterRoom*) value {
  resultChatMessageType.hasChatEnterRoom = YES;
  resultChatMessageType.chatEnterRoom = value;
  return self;
}
- (CMChatMessageTypeBuilder*) setChatEnterRoomBuilder:(CMChatEnterRoomBuilder*) builderForValue {
  return [self setChatEnterRoom:[builderForValue build]];
}
- (CMChatMessageTypeBuilder*) mergeChatEnterRoom:(CMChatEnterRoom*) value {
  if (resultChatMessageType.hasChatEnterRoom &&
      resultChatMessageType.chatEnterRoom != [CMChatEnterRoom defaultInstance]) {
    resultChatMessageType.chatEnterRoom =
      [[[CMChatEnterRoom builderWithPrototype:resultChatMessageType.chatEnterRoom] mergeFrom:value] buildPartial];
  } else {
    resultChatMessageType.chatEnterRoom = value;
  }
  resultChatMessageType.hasChatEnterRoom = YES;
  return self;
}
- (CMChatMessageTypeBuilder*) clearChatEnterRoom {
  resultChatMessageType.hasChatEnterRoom = NO;
  resultChatMessageType.chatEnterRoom = [CMChatEnterRoom defaultInstance];
  return self;
}
- (BOOL) hasChatPresence {
  return resultChatMessageType.hasChatPresence;
}
- (CMChatPresence*) chatPresence {
  return resultChatMessageType.chatPresence;
}
- (CMChatMessageTypeBuilder*) setChatPresence:(CMChatPresence*) value {
  resultChatMessageType.hasChatPresence = YES;
  resultChatMessageType.chatPresence = value;
  return self;
}
- (CMChatMessageTypeBuilder*) setChatPresenceBuilder:(CMChatPresenceBuilder*) builderForValue {
  return [self setChatPresence:[builderForValue build]];
}
- (CMChatMessageTypeBuilder*) mergeChatPresence:(CMChatPresence*) value {
  if (resultChatMessageType.hasChatPresence &&
      resultChatMessageType.chatPresence != [CMChatPresence defaultInstance]) {
    resultChatMessageType.chatPresence =
      [[[CMChatPresence builderWithPrototype:resultChatMessageType.chatPresence] mergeFrom:value] buildPartial];
  } else {
    resultChatMessageType.chatPresence = value;
  }
  resultChatMessageType.hasChatPresence = YES;
  return self;
}
- (CMChatMessageTypeBuilder*) clearChatPresence {
  resultChatMessageType.hasChatPresence = NO;
  resultChatMessageType.chatPresence = [CMChatPresence defaultInstance];
  return self;
}
- (BOOL) hasChatResponse {
  return resultChatMessageType.hasChatResponse;
}
- (CMChatResponse*) chatResponse {
  return resultChatMessageType.chatResponse;
}
- (CMChatMessageTypeBuilder*) setChatResponse:(CMChatResponse*) value {
  resultChatMessageType.hasChatResponse = YES;
  resultChatMessageType.chatResponse = value;
  return self;
}
- (CMChatMessageTypeBuilder*) setChatResponseBuilder:(CMChatResponseBuilder*) builderForValue {
  return [self setChatResponse:[builderForValue build]];
}
- (CMChatMessageTypeBuilder*) mergeChatResponse:(CMChatResponse*) value {
  if (resultChatMessageType.hasChatResponse &&
      resultChatMessageType.chatResponse != [CMChatResponse defaultInstance]) {
    resultChatMessageType.chatResponse =
      [[[CMChatResponse builderWithPrototype:resultChatMessageType.chatResponse] mergeFrom:value] buildPartial];
  } else {
    resultChatMessageType.chatResponse = value;
  }
  resultChatMessageType.hasChatResponse = YES;
  return self;
}
- (CMChatMessageTypeBuilder*) clearChatResponse {
  resultChatMessageType.hasChatResponse = NO;
  resultChatMessageType.chatResponse = [CMChatResponse defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
