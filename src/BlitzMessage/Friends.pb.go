// Code generated by protoc-gen-go.
// source: Friends.proto
// DO NOT EDIT!

package BlitzMessage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"


// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FriendStatus int32

const (
	FriendStatus_FSUnknown  FriendStatus = 0
	FriendStatus_FSInviter  FriendStatus = 1
	FriendStatus_FSInvitee  FriendStatus = 2
	FriendStatus_FSIgnored  FriendStatus = 3
	FriendStatus_FSAccepted FriendStatus = 4
)

var FriendStatus_name = map[int32]string{
	0: "FSUnknown",
	1: "FSInviter",
	2: "FSInvitee",
	3: "FSIgnored",
	4: "FSAccepted",
}
var FriendStatus_value = map[string]int32{
	"FSUnknown":  0,
	"FSInviter":  1,
	"FSInvitee":  2,
	"FSIgnored":  3,
	"FSAccepted": 4,
}

func (x FriendStatus) Enum() *FriendStatus {
	p := new(FriendStatus)
	*p = x
	return p
}
func (x FriendStatus) String() string {
	return proto.EnumName(FriendStatus_name, int32(x))
}
func (x *FriendStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FriendStatus_value, data, "FriendStatus")
	if err != nil {
		return err
	}
	*x = FriendStatus(value)
	return nil
}
func (FriendStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type Friend struct {
	FriendID         *string       `protobuf:"bytes,1,req,name=friendID" json:"friendID,omitempty"`
	FriendStatus     *FriendStatus `protobuf:"varint,2,req,name=friendStatus,enum=BlitzMessage.FriendStatus" json:"friendStatus,omitempty"`
	IsInCircle       *bool         `protobuf:"varint,3,opt,name=isInCircle" json:"isInCircle,omitempty"`
	InviteLink       *string       `protobuf:"bytes,4,opt,name=inviteLink" json:"inviteLink,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Friend) Reset()                    { *m = Friend{} }
func (m *Friend) String() string            { return proto.CompactTextString(m) }
func (*Friend) ProtoMessage()               {}
func (*Friend) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Friend) GetFriendID() string {
	if m != nil && m.FriendID != nil {
		return *m.FriendID
	}
	return ""
}

func (m *Friend) GetFriendStatus() FriendStatus {
	if m != nil && m.FriendStatus != nil {
		return *m.FriendStatus
	}
	return FriendStatus_FSUnknown
}

func (m *Friend) GetIsInCircle() bool {
	if m != nil && m.IsInCircle != nil {
		return *m.IsInCircle
	}
	return false
}

func (m *Friend) GetInviteLink() string {
	if m != nil && m.InviteLink != nil {
		return *m.InviteLink
	}
	return ""
}

type FriendUpdate struct {
	Friends          []*Friend `protobuf:"bytes,1,rep,name=Friends" json:"Friends,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *FriendUpdate) Reset()                    { *m = FriendUpdate{} }
func (m *FriendUpdate) String() string            { return proto.CompactTextString(m) }
func (*FriendUpdate) ProtoMessage()               {}
func (*FriendUpdate) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *FriendUpdate) GetFriends() []*Friend {
	if m != nil {
		return m.Friends
	}
	return nil
}

type FriendRequest struct {
	FriendProfile    *UserProfile `protobuf:"bytes,1,opt,name=friendProfile" json:"friendProfile,omitempty"`
	IsInCircle       *bool        `protobuf:"varint,2,opt,name=isInCircle" json:"isInCircle,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *FriendRequest) Reset()                    { *m = FriendRequest{} }
func (m *FriendRequest) String() string            { return proto.CompactTextString(m) }
func (*FriendRequest) ProtoMessage()               {}
func (*FriendRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *FriendRequest) GetFriendProfile() *UserProfile {
	if m != nil {
		return m.FriendProfile
	}
	return nil
}

func (m *FriendRequest) GetIsInCircle() bool {
	if m != nil && m.IsInCircle != nil {
		return *m.IsInCircle
	}
	return false
}

type AcceptInviteRequest struct {
	UserID           *string        `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	FriendID         *string        `protobuf:"bytes,2,opt,name=friendID" json:"friendID,omitempty"`
	Message          *string        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	ContactInfo      *ContactInfo   `protobuf:"bytes,4,opt,name=contactInfo" json:"contactInfo,omitempty"`
	Profiles         []*UserProfile `protobuf:"bytes,5,rep,name=profiles" json:"profiles,omitempty"`
	ConfirmationCode *string        `protobuf:"bytes,6,opt,name=confirmationCode" json:"confirmationCode,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *AcceptInviteRequest) Reset()                    { *m = AcceptInviteRequest{} }
func (m *AcceptInviteRequest) String() string            { return proto.CompactTextString(m) }
func (*AcceptInviteRequest) ProtoMessage()               {}
func (*AcceptInviteRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *AcceptInviteRequest) GetUserID() string {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return ""
}

func (m *AcceptInviteRequest) GetFriendID() string {
	if m != nil && m.FriendID != nil {
		return *m.FriendID
	}
	return ""
}

func (m *AcceptInviteRequest) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *AcceptInviteRequest) GetContactInfo() *ContactInfo {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *AcceptInviteRequest) GetProfiles() []*UserProfile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *AcceptInviteRequest) GetConfirmationCode() string {
	if m != nil && m.ConfirmationCode != nil {
		return *m.ConfirmationCode
	}
	return ""
}

type AcceptInviteResponse struct {
	UserID           *string        `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	FriendID         *string        `protobuf:"bytes,2,opt,name=friendID" json:"friendID,omitempty"`
	Message          *string        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Friends          []*Friend      `protobuf:"bytes,4,rep,name=friends" json:"friends,omitempty"`
	Profiles         []*UserProfile `protobuf:"bytes,5,rep,name=profiles" json:"profiles,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *AcceptInviteResponse) Reset()                    { *m = AcceptInviteResponse{} }
func (m *AcceptInviteResponse) String() string            { return proto.CompactTextString(m) }
func (*AcceptInviteResponse) ProtoMessage()               {}
func (*AcceptInviteResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *AcceptInviteResponse) GetUserID() string {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return ""
}

func (m *AcceptInviteResponse) GetFriendID() string {
	if m != nil && m.FriendID != nil {
		return *m.FriendID
	}
	return ""
}

func (m *AcceptInviteResponse) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *AcceptInviteResponse) GetFriends() []*Friend {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *AcceptInviteResponse) GetProfiles() []*UserProfile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func init() {
	proto.RegisterType((*Friend)(nil), "BlitzMessage.Friend")
	proto.RegisterType((*FriendUpdate)(nil), "BlitzMessage.FriendUpdate")
	proto.RegisterType((*FriendRequest)(nil), "BlitzMessage.FriendRequest")
	proto.RegisterType((*AcceptInviteRequest)(nil), "BlitzMessage.AcceptInviteRequest")
	proto.RegisterType((*AcceptInviteResponse)(nil), "BlitzMessage.AcceptInviteResponse")
	proto.RegisterEnum("BlitzMessage.FriendStatus", FriendStatus_name, FriendStatus_value)
}

var fileDescriptor2 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xeb, 0x4d, 0x48, 0x93, 0x69, 0x52, 0x56, 0xa6, 0x07, 0xb3, 0x5c, 0xaa, 0x95, 0x90,
	0x22, 0x10, 0x0b, 0xaa, 0xc4, 0xb5, 0x12, 0x09, 0x5a, 0x29, 0x12, 0x48, 0x88, 0x68, 0x2f, 0xdc,
	0xb6, 0xde, 0xd9, 0x62, 0x9a, 0xd8, 0x8b, 0xed, 0x14, 0x89, 0x27, 0xe0, 0x25, 0x78, 0x16, 0xde,
	0xa1, 0x4f, 0x84, 0x6b, 0x6f, 0xc4, 0x2e, 0xff, 0x24, 0xb8, 0x79, 0x46, 0xf3, 0xcd, 0xfc, 0xbe,
	0x19, 0xc3, 0x2c, 0xd7, 0x02, 0x65, 0x65, 0xb2, 0x46, 0x2b, 0xab, 0xe8, 0x74, 0xb1, 0x11, 0xf6,
	0xf3, 0x6b, 0x34, 0xa6, 0xbc, 0xc4, 0xe4, 0x81, 0xba, 0xf8, 0x80, 0xdc, 0x8a, 0x6b, 0xe4, 0x4f,
	0x2a, 0x34, 0x5c, 0x8b, 0xc6, 0x2a, 0x1d, 0x4a, 0x13, 0x5a, 0x18, 0xd4, 0x6f, 0xb4, 0xaa, 0xc5,
	0x06, 0x5b, 0x79, 0x6a, 0x61, 0x14, 0xfa, 0xd1, 0x18, 0xc6, 0xb5, 0x7f, 0xad, 0x5e, 0x32, 0x72,
	0x1a, 0xcd, 0x27, 0xf4, 0x19, 0x4c, 0x43, 0x66, 0x6d, 0x4b, 0xbb, 0x33, 0x2c, 0x72, 0xd9, 0xe3,
	0xb3, 0x24, 0xeb, 0x4e, 0xcc, 0xf2, 0x4e, 0x05, 0xa5, 0x00, 0xc2, 0xac, 0xe4, 0x52, 0x68, 0xbe,
	0x41, 0x36, 0x38, 0x25, 0xf3, 0xb1, 0xcf, 0xc9, 0x6b, 0x61, 0xf1, 0x95, 0x90, 0x57, 0x6c, 0xe8,
	0x72, 0x93, 0xf4, 0x39, 0x4c, 0x83, 0xae, 0x68, 0xaa, 0xd2, 0x22, 0x7d, 0x08, 0x87, 0xad, 0x2b,
	0x37, 0x7a, 0x30, 0x3f, 0x3a, 0x3b, 0xf9, 0xdd, 0x90, 0xb4, 0xd8, 0x9b, 0x7f, 0x8b, 0x1f, 0x77,
	0x68, 0xac, 0x23, 0x9c, 0x05, 0xc2, 0xd6, 0x95, 0x53, 0x13, 0xa7, 0xbe, 0xdf, 0x57, 0x77, 0x6c,
	0xff, 0x44, 0x18, 0xdd, 0x12, 0xa6, 0xdf, 0x08, 0xdc, 0x7b, 0xc1, 0x39, 0x36, 0x76, 0xe5, 0x41,
	0xf7, 0xdd, 0x8f, 0x61, 0xb4, 0x73, 0x52, 0xbf, 0x0f, 0x47, 0xdd, 0xdb, 0x50, 0xe4, 0x33, 0x77,
	0xe1, 0x70, 0x1b, 0x86, 0x78, 0xb3, 0x13, 0x9a, 0xc1, 0x11, 0x57, 0xd2, 0x96, 0xdc, 0xb5, 0xaa,
	0x95, 0x77, 0xfb, 0x0b, 0xce, 0xf2, 0x47, 0x01, 0x7d, 0x0c, 0xe3, 0xa6, 0x3d, 0x08, 0xbb, 0xe3,
	0x9d, 0xff, 0x85, 0x9d, 0x41, 0xec, 0x9a, 0xd7, 0x42, 0x6f, 0x4b, 0x2b, 0x94, 0x5c, 0xaa, 0x0a,
	0xd9, 0xc8, 0xef, 0xf3, 0x2b, 0x81, 0x93, 0xbe, 0x03, 0xd3, 0x28, 0x69, 0xf0, 0x7f, 0x2c, 0xb8,
	0x5b, 0xd4, 0xed, 0x2d, 0x86, 0x7f, 0xbe, 0xc5, 0x3f, 0x91, 0x3f, 0x7a, 0xb7, 0xbf, 0x77, 0xfb,
	0x4f, 0x66, 0x30, 0xc9, 0xd7, 0x85, 0xbc, 0x92, 0xea, 0x93, 0x8c, 0x0f, 0x42, 0x18, 0xc8, 0x75,
	0x4c, 0xba, 0x21, 0xc6, 0x51, 0x1b, 0x5e, 0x4a, 0xa5, 0xb1, 0x8a, 0x07, 0xce, 0x12, 0xe4, 0xeb,
	0x60, 0xd6, 0xc5, 0xc3, 0xc5, 0xd3, 0x9b, 0xf3, 0x08, 0x0e, 0x6e, 0xce, 0x07, 0x94, 0x2c, 0xdc,
	0x93, 0x11, 0x48, 0xb8, 0xda, 0x66, 0x17, 0xb7, 0x2c, 0xef, 0x51, 0x63, 0x8f, 0xea, 0x0b, 0x21,
	0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x53, 0xa0, 0xc8, 0xef, 0x41, 0x03, 0x00, 0x00,
}
