// Code generated by protoc-gen-go.
// source: happiness.proto
// DO NOT EDIT!

/*
Package happiness is a generated protocol buffer package.

It is generated from these files:
	happiness.proto

It has these top-level messages:
	Globals
	Timestamp
	Timespan
	Location
	Size
	ColorRGB256
	KeyValue
	DeviceInfo
	UserEvent
	UserEventsRequest
	UserEventsResponse
	Weather
	UserResponse
	ScoreComponent
	Score
	SocialIdentity
	ContactInfo
	ScoreSummary
	WeatherSummary
	Profile
	ImageData
	ImageUpload
	ProfileUpdate
	ProfileQuery
	Friend
	FriendUpdate
	FriendRequest
	FriendResponse
	ConfirmationRequest
	Message
	MessageUpdate
	Story
	StoryUpdate
	DebugMessage
	AcceptInviteRequest
	AcceptInviteResponse
	FetchScoresRequest
	ScoreUpdate
	UserMessage
	BeingHappyOptions
	PulseMember
	PulseBeat
	Pulse
	PulseUpdate
	ProfilesFromContactInfo
	ScorePulseBeat
	PulseStatusUpdate
	ValidatedPulse
	SendPulse
	PulseOptions
	SessionRequest
	AppOptions
	SessionResponse
	ClientRequest
	ServerResponse
*/
package happiness

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"


// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type UserStatus int32

const (
	UserStatus_USUnknown    UserStatus = 0
	UserStatus_USBlocked    UserStatus = 1
	UserStatus_USInvited    UserStatus = 2
	UserStatus_USActive     UserStatus = 3
	UserStatus_USConfirming UserStatus = 4
	UserStatus_USConfirmed  UserStatus = 5
)

var UserStatus_name = map[int32]string{
	0: "USUnknown",
	1: "USBlocked",
	2: "USInvited",
	3: "USActive",
	4: "USConfirming",
	5: "USConfirmed",
}
var UserStatus_value = map[string]int32{
	"USUnknown":    0,
	"USBlocked":    1,
	"USInvited":    2,
	"USActive":     3,
	"USConfirming": 4,
	"USConfirmed":  5,
}

func (x UserStatus) Enum() *UserStatus {
	p := new(UserStatus)
	*p = x
	return p
}
func (x UserStatus) String() string {
	return proto.EnumName(UserStatus_name, int32(x))
}
func (x *UserStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserStatus_value, data, "UserStatus")
	if err != nil {
		return err
	}
	*x = UserStatus(value)
	return nil
}
func (UserStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Gender int32

const (
	Gender_GUnknown Gender = 0
	Gender_GFemale  Gender = 1
	Gender_GMale    Gender = 2
	Gender_GOther   Gender = 3
)

var Gender_name = map[int32]string{
	0: "GUnknown",
	1: "GFemale",
	2: "GMale",
	3: "GOther",
}
var Gender_value = map[string]int32{
	"GUnknown": 0,
	"GFemale":  1,
	"GMale":    2,
	"GOther":   3,
}

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}
func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (x *Gender) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Gender_value, data, "Gender")
	if err != nil {
		return err
	}
	*x = Gender(value)
	return nil
}
func (Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PlatformType int32

const (
	PlatformType_PTUnknown PlatformType = 0
	PlatformType_PTiOS     PlatformType = 1
	PlatformType_PTAndroid PlatformType = 2
	PlatformType_PTWeb     PlatformType = 3
)

var PlatformType_name = map[int32]string{
	0: "PTUnknown",
	1: "PTiOS",
	2: "PTAndroid",
	3: "PTWeb",
}
var PlatformType_value = map[string]int32{
	"PTUnknown": 0,
	"PTiOS":     1,
	"PTAndroid": 2,
	"PTWeb":     3,
}

func (x PlatformType) Enum() *PlatformType {
	p := new(PlatformType)
	*p = x
	return p
}
func (x PlatformType) String() string {
	return proto.EnumName(PlatformType_name, int32(x))
}
func (x *PlatformType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PlatformType_value, data, "PlatformType")
	if err != nil {
		return err
	}
	*x = PlatformType(value)
	return nil
}
func (PlatformType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type WeatherType int32

const (
	WeatherType_WTUnknown      WeatherType = 0
	WeatherType_WTClear        WeatherType = 1
	WeatherType_WTPartlyCloudy WeatherType = 2
	WeatherType_WTCloudy       WeatherType = 3
	WeatherType_WTOvercast     WeatherType = 4
	WeatherType_WTRain         WeatherType = 5
	WeatherType_WTStormy       WeatherType = 6
	WeatherType_WTSnow         WeatherType = 7
	WeatherType_WTSleet        WeatherType = 8
)

var WeatherType_name = map[int32]string{
	0: "WTUnknown",
	1: "WTClear",
	2: "WTPartlyCloudy",
	3: "WTCloudy",
	4: "WTOvercast",
	5: "WTRain",
	6: "WTStormy",
	7: "WTSnow",
	8: "WTSleet",
}
var WeatherType_value = map[string]int32{
	"WTUnknown":      0,
	"WTClear":        1,
	"WTPartlyCloudy": 2,
	"WTCloudy":       3,
	"WTOvercast":     4,
	"WTRain":         5,
	"WTStormy":       6,
	"WTSnow":         7,
	"WTSleet":        8,
}

func (x WeatherType) Enum() *WeatherType {
	p := new(WeatherType)
	*p = x
	return p
}
func (x WeatherType) String() string {
	return proto.EnumName(WeatherType_name, int32(x))
}
func (x *WeatherType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WeatherType_value, data, "WeatherType")
	if err != nil {
		return err
	}
	*x = WeatherType(value)
	return nil
}
func (WeatherType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PrecipitationType int32

const (
	PrecipitationType_PTNone  PrecipitationType = 0
	PrecipitationType_PTRain  PrecipitationType = 1
	PrecipitationType_PTSnow  PrecipitationType = 2
	PrecipitationType_PTSleet PrecipitationType = 3
	PrecipitationType_PTHail  PrecipitationType = 4
	PrecipitationType_PTFrogs PrecipitationType = 5
)

var PrecipitationType_name = map[int32]string{
	0: "PTNone",
	1: "PTRain",
	2: "PTSnow",
	3: "PTSleet",
	4: "PTHail",
	5: "PTFrogs",
}
var PrecipitationType_value = map[string]int32{
	"PTNone":  0,
	"PTRain":  1,
	"PTSnow":  2,
	"PTSleet": 3,
	"PTHail":  4,
	"PTFrogs": 5,
}

func (x PrecipitationType) Enum() *PrecipitationType {
	p := new(PrecipitationType)
	*p = x
	return p
}
func (x PrecipitationType) String() string {
	return proto.EnumName(PrecipitationType_name, int32(x))
}
func (x *PrecipitationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PrecipitationType_value, data, "PrecipitationType")
	if err != nil {
		return err
	}
	*x = PrecipitationType(value)
	return nil
}
func (PrecipitationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ContactType int32

const (
	ContactType_CTUnknown       ContactType = 0
	ContactType_CTPhoneSMS      ContactType = 1
	ContactType_CTEmail         ContactType = 2
	ContactType_CTChat          ContactType = 3
	ContactType_CTSocialService ContactType = 4
)

var ContactType_name = map[int32]string{
	0: "CTUnknown",
	1: "CTPhoneSMS",
	2: "CTEmail",
	3: "CTChat",
	4: "CTSocialService",
}
var ContactType_value = map[string]int32{
	"CTUnknown":       0,
	"CTPhoneSMS":      1,
	"CTEmail":         2,
	"CTChat":          3,
	"CTSocialService": 4,
}

func (x ContactType) Enum() *ContactType {
	p := new(ContactType)
	*p = x
	return p
}
func (x ContactType) String() string {
	return proto.EnumName(ContactType_name, int32(x))
}
func (x *ContactType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContactType_value, data, "ContactType")
	if err != nil {
		return err
	}
	*x = ContactType(value)
	return nil
}
func (ContactType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ImageContent int32

const (
	ImageContent_ICUnknown           ImageContent = 0
	ImageContent_ICProfile           ImageContent = 1
	ImageContent_ICProfileBackground ImageContent = 2
)

var ImageContent_name = map[int32]string{
	0: "ICUnknown",
	1: "ICProfile",
	2: "ICProfileBackground",
}
var ImageContent_value = map[string]int32{
	"ICUnknown":           0,
	"ICProfile":           1,
	"ICProfileBackground": 2,
}

func (x ImageContent) Enum() *ImageContent {
	p := new(ImageContent)
	*p = x
	return p
}
func (x ImageContent) String() string {
	return proto.EnumName(ImageContent_name, int32(x))
}
func (x *ImageContent) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ImageContent_value, data, "ImageContent")
	if err != nil {
		return err
	}
	*x = ImageContent(value)
	return nil
}
func (ImageContent) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type FriendStatus int32

const (
	FriendStatus_FSUnknown          FriendStatus = 0
	FriendStatus_FSInviter          FriendStatus = 1
	FriendStatus_FSInvitee          FriendStatus = 2
	FriendStatus_FSIgnored          FriendStatus = 3
	FriendStatus_FSAccepted         FriendStatus = 4
	FriendStatus_FSCircleDeprecated FriendStatus = 5
)

var FriendStatus_name = map[int32]string{
	0: "FSUnknown",
	1: "FSInviter",
	2: "FSInvitee",
	3: "FSIgnored",
	4: "FSAccepted",
	5: "FSCircleDeprecated",
}
var FriendStatus_value = map[string]int32{
	"FSUnknown":          0,
	"FSInviter":          1,
	"FSInvitee":          2,
	"FSIgnored":          3,
	"FSAccepted":         4,
	"FSCircleDeprecated": 5,
}

func (x FriendStatus) Enum() *FriendStatus {
	p := new(FriendStatus)
	*p = x
	return p
}
func (x FriendStatus) String() string {
	return proto.EnumName(FriendStatus_name, int32(x))
}
func (x *FriendStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FriendStatus_value, data, "FriendStatus")
	if err != nil {
		return err
	}
	*x = FriendStatus(value)
	return nil
}
func (FriendStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type FriendResponseType int32

const (
	FriendResponseType_FRUnknown FriendResponseType = 0
	FriendResponseType_FRList    FriendResponseType = 1
	FriendResponseType_FRUpdate  FriendResponseType = 2
	FriendResponseType_FRShare   FriendResponseType = 3
)

var FriendResponseType_name = map[int32]string{
	0: "FRUnknown",
	1: "FRList",
	2: "FRUpdate",
	3: "FRShare",
}
var FriendResponseType_value = map[string]int32{
	"FRUnknown": 0,
	"FRList":    1,
	"FRUpdate":  2,
	"FRShare":   3,
}

func (x FriendResponseType) Enum() *FriendResponseType {
	p := new(FriendResponseType)
	*p = x
	return p
}
func (x FriendResponseType) String() string {
	return proto.EnumName(FriendResponseType_name, int32(x))
}
func (x *FriendResponseType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FriendResponseType_value, data, "FriendResponseType")
	if err != nil {
		return err
	}
	*x = FriendResponseType(value)
	return nil
}
func (FriendResponseType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type MessageType int32

const (
	MessageType_MTRequestJoin   MessageType = 1
	MessageType_MTJoined        MessageType = 2
	MessageType_MTFriendRequest MessageType = 3
	MessageType_MTFriendAccept  MessageType = 4
	MessageType_MTFriendCircle  MessageType = 5
	MessageType_MTScored        MessageType = 6
	MessageType_MTScoreRequest  MessageType = 7
	MessageType_MTHearted       MessageType = 8
	MessageType_MTHeartedBack   MessageType = 9
	MessageType_MTSystem        MessageType = 10
	MessageType_MTPulse         MessageType = 11
)

var MessageType_name = map[int32]string{
	1:  "MTRequestJoin",
	2:  "MTJoined",
	3:  "MTFriendRequest",
	4:  "MTFriendAccept",
	5:  "MTFriendCircle",
	6:  "MTScored",
	7:  "MTScoreRequest",
	8:  "MTHearted",
	9:  "MTHeartedBack",
	10: "MTSystem",
	11: "MTPulse",
}
var MessageType_value = map[string]int32{
	"MTRequestJoin":   1,
	"MTJoined":        2,
	"MTFriendRequest": 3,
	"MTFriendAccept":  4,
	"MTFriendCircle":  5,
	"MTScored":        6,
	"MTScoreRequest":  7,
	"MTHearted":       8,
	"MTHeartedBack":   9,
	"MTSystem":        10,
	"MTPulse":         11,
}

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}
func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (x *MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageType_value, data, "MessageType")
	if err != nil {
		return err
	}
	*x = MessageType(value)
	return nil
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type MessageStatus int32

const (
	MessageStatus_MSNew    MessageStatus = 0
	MessageStatus_MSHidden MessageStatus = 1
	MessageStatus_MSRead   MessageStatus = 2
)

var MessageStatus_name = map[int32]string{
	0: "MSNew",
	1: "MSHidden",
	2: "MSRead",
}
var MessageStatus_value = map[string]int32{
	"MSNew":    0,
	"MSHidden": 1,
	"MSRead":   2,
}

func (x MessageStatus) Enum() *MessageStatus {
	p := new(MessageStatus)
	*p = x
	return p
}
func (x MessageStatus) String() string {
	return proto.EnumName(MessageStatus_name, int32(x))
}
func (x *MessageStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageStatus_value, data, "MessageStatus")
	if err != nil {
		return err
	}
	*x = MessageStatus(value)
	return nil
}
func (MessageStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type StoryType int32

const (
	StoryType_STUnknown StoryType = 0
	StoryType_STQuote   StoryType = 1
	StoryType_STAction  StoryType = 2
)

var StoryType_name = map[int32]string{
	0: "STUnknown",
	1: "STQuote",
	2: "STAction",
}
var StoryType_value = map[string]int32{
	"STUnknown": 0,
	"STQuote":   1,
	"STAction":  2,
}

func (x StoryType) Enum() *StoryType {
	p := new(StoryType)
	*p = x
	return p
}
func (x StoryType) String() string {
	return proto.EnumName(StoryType_name, int32(x))
}
func (x *StoryType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoryType_value, data, "StoryType")
	if err != nil {
		return err
	}
	*x = StoryType(value)
	return nil
}
func (StoryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type MessageCue int32

const (
	MessageCue_MCStartMessage MessageCue = 1
)

var MessageCue_name = map[int32]string{
	1: "MCStartMessage",
}
var MessageCue_value = map[string]int32{
	"MCStartMessage": 1,
}

func (x MessageCue) Enum() *MessageCue {
	p := new(MessageCue)
	*p = x
	return p
}
func (x MessageCue) String() string {
	return proto.EnumName(MessageCue_name, int32(x))
}
func (x *MessageCue) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageCue_value, data, "MessageCue")
	if err != nil {
		return err
	}
	*x = MessageCue(value)
	return nil
}
func (MessageCue) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type PulseStatus int32

const (
	PulseStatus_PSUnknown  PulseStatus = 0
	PulseStatus_PSUpdated  PulseStatus = 1
	PulseStatus_PSArchived PulseStatus = 2
	PulseStatus_PSDeleted  PulseStatus = 3
)

var PulseStatus_name = map[int32]string{
	0: "PSUnknown",
	1: "PSUpdated",
	2: "PSArchived",
	3: "PSDeleted",
}
var PulseStatus_value = map[string]int32{
	"PSUnknown":  0,
	"PSUpdated":  1,
	"PSArchived": 2,
	"PSDeleted":  3,
}

func (x PulseStatus) Enum() *PulseStatus {
	p := new(PulseStatus)
	*p = x
	return p
}
func (x PulseStatus) String() string {
	return proto.EnumName(PulseStatus_name, int32(x))
}
func (x *PulseStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PulseStatus_value, data, "PulseStatus")
	if err != nil {
		return err
	}
	*x = PulseStatus(value)
	return nil
}
func (PulseStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type PulseBeatState int32

const (
	PulseBeatState_BSUnknown  PulseBeatState = 0
	PulseBeatState_BSSent     PulseBeatState = 1
	PulseBeatState_BSReminded PulseBeatState = 2
	PulseBeatState_BSComplete PulseBeatState = 3
)

var PulseBeatState_name = map[int32]string{
	0: "BSUnknown",
	1: "BSSent",
	2: "BSReminded",
	3: "BSComplete",
}
var PulseBeatState_value = map[string]int32{
	"BSUnknown":  0,
	"BSSent":     1,
	"BSReminded": 2,
	"BSComplete": 3,
}

func (x PulseBeatState) Enum() *PulseBeatState {
	p := new(PulseBeatState)
	*p = x
	return p
}
func (x PulseBeatState) String() string {
	return proto.EnumName(PulseBeatState_name, int32(x))
}
func (x *PulseBeatState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PulseBeatState_value, data, "PulseBeatState")
	if err != nil {
		return err
	}
	*x = PulseBeatState(value)
	return nil
}
func (PulseBeatState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type ResponseCode int32

const (
	ResponseCode_RCSuccess       ResponseCode = 1
	ResponseCode_RCInputCorrupt  ResponseCode = 2
	ResponseCode_RCInputInvalid  ResponseCode = 3
	ResponseCode_RCServerWarning ResponseCode = 4
	ResponseCode_RCServerError   ResponseCode = 5
	ResponseCode_RCNotAuthorized ResponseCode = 6
	ResponseCode_RCClientTooOld  ResponseCode = 7
)

var ResponseCode_name = map[int32]string{
	1: "RCSuccess",
	2: "RCInputCorrupt",
	3: "RCInputInvalid",
	4: "RCServerWarning",
	5: "RCServerError",
	6: "RCNotAuthorized",
	7: "RCClientTooOld",
}
var ResponseCode_value = map[string]int32{
	"RCSuccess":       1,
	"RCInputCorrupt":  2,
	"RCInputInvalid":  3,
	"RCServerWarning": 4,
	"RCServerError":   5,
	"RCNotAuthorized": 6,
	"RCClientTooOld":  7,
}

func (x ResponseCode) Enum() *ResponseCode {
	p := new(ResponseCode)
	*p = x
	return p
}
func (x ResponseCode) String() string {
	return proto.EnumName(ResponseCode_name, int32(x))
}
func (x *ResponseCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResponseCode_value, data, "ResponseCode")
	if err != nil {
		return err
	}
	*x = ResponseCode(value)
	return nil
}
func (ResponseCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type Globals struct {
	SystemUserID     *string `protobuf:"bytes,1,req,name=systemUserID,def=652C03FF-597A-4B56-88FF-5630093AF2B5" json:"systemUserID,omitempty"`
	BeingHappyTestID *string `protobuf:"bytes,2,req,name=beingHappyTestID,def=4B9F0AAD-2ED5-4DBC-8C82-6BC3786C92A2" json:"beingHappyTestID,omitempty"`
	HappyPulseTestID *string `protobuf:"bytes,3,req,name=happyPulseTestID,def=DB3FC7BA-D4E8-4482-8262-F813AF57205B" json:"happyPulseTestID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Globals) Reset()                    { *m = Globals{} }
func (m *Globals) String() string            { return proto.CompactTextString(m) }
func (*Globals) ProtoMessage()               {}
func (*Globals) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_Globals_SystemUserID string = "652C03FF-597A-4B56-88FF-5630093AF2B5"
const Default_Globals_BeingHappyTestID string = "4B9F0AAD-2ED5-4DBC-8C82-6BC3786C92A2"
const Default_Globals_HappyPulseTestID string = "DB3FC7BA-D4E8-4482-8262-F813AF57205B"

func (m *Globals) GetSystemUserID() string {
	if m != nil && m.SystemUserID != nil {
		return *m.SystemUserID
	}
	return Default_Globals_SystemUserID
}

func (m *Globals) GetBeingHappyTestID() string {
	if m != nil && m.BeingHappyTestID != nil {
		return *m.BeingHappyTestID
	}
	return Default_Globals_BeingHappyTestID
}

func (m *Globals) GetHappyPulseTestID() string {
	if m != nil && m.HappyPulseTestID != nil {
		return *m.HappyPulseTestID
	}
	return Default_Globals_HappyPulseTestID
}

type Timestamp struct {
	Epoch            *float64 `protobuf:"fixed64,1,req,name=epoch" json:"epoch,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Timestamp) GetEpoch() float64 {
	if m != nil && m.Epoch != nil {
		return *m.Epoch
	}
	return 0
}

type Timespan struct {
	StartTimestamp   *Timestamp `protobuf:"bytes,1,opt,name=startTimestamp" json:"startTimestamp,omitempty"`
	StopTimestamp    *Timestamp `protobuf:"bytes,2,opt,name=stopTimestamp" json:"stopTimestamp,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Timespan) Reset()                    { *m = Timespan{} }
func (m *Timespan) String() string            { return proto.CompactTextString(m) }
func (*Timespan) ProtoMessage()               {}
func (*Timespan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Timespan) GetStartTimestamp() *Timestamp {
	if m != nil {
		return m.StartTimestamp
	}
	return nil
}

func (m *Timespan) GetStopTimestamp() *Timestamp {
	if m != nil {
		return m.StopTimestamp
	}
	return nil
}

type Location struct {
	Latitude         *float64 `protobuf:"fixed64,1,req,name=latitude,def=-360" json:"latitude,omitempty"`
	Longitude        *float64 `protobuf:"fixed64,2,req,name=longitude,def=-360" json:"longitude,omitempty"`
	Placename        *string  `protobuf:"bytes,3,opt,name=placename" json:"placename,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

const Default_Location_Latitude float64 = -360
const Default_Location_Longitude float64 = -360

func (m *Location) GetLatitude() float64 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return Default_Location_Latitude
}

func (m *Location) GetLongitude() float64 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return Default_Location_Longitude
}

func (m *Location) GetPlacename() string {
	if m != nil && m.Placename != nil {
		return *m.Placename
	}
	return ""
}

type Size struct {
	Width            *float64 `protobuf:"fixed64,1,req,name=width,def=0" json:"width,omitempty"`
	Height           *float64 `protobuf:"fixed64,2,req,name=height,def=0" json:"height,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Size) Reset()                    { *m = Size{} }
func (m *Size) String() string            { return proto.CompactTextString(m) }
func (*Size) ProtoMessage()               {}
func (*Size) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

const Default_Size_Width float64 = 0
const Default_Size_Height float64 = 0

func (m *Size) GetWidth() float64 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return Default_Size_Width
}

func (m *Size) GetHeight() float64 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return Default_Size_Height
}

type ColorRGB256 struct {
	Red              *int32   `protobuf:"varint,1,req,name=red" json:"red,omitempty"`
	Green            *int32   `protobuf:"varint,2,req,name=green" json:"green,omitempty"`
	Blue             *int32   `protobuf:"varint,3,req,name=blue" json:"blue,omitempty"`
	Alpha            *float64 `protobuf:"fixed64,4,opt,name=alpha" json:"alpha,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ColorRGB256) Reset()                    { *m = ColorRGB256{} }
func (m *ColorRGB256) String() string            { return proto.CompactTextString(m) }
func (*ColorRGB256) ProtoMessage()               {}
func (*ColorRGB256) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ColorRGB256) GetRed() int32 {
	if m != nil && m.Red != nil {
		return *m.Red
	}
	return 0
}

func (m *ColorRGB256) GetGreen() int32 {
	if m != nil && m.Green != nil {
		return *m.Green
	}
	return 0
}

func (m *ColorRGB256) GetBlue() int32 {
	if m != nil && m.Blue != nil {
		return *m.Blue
	}
	return 0
}

func (m *ColorRGB256) GetAlpha() float64 {
	if m != nil && m.Alpha != nil {
		return *m.Alpha
	}
	return 0
}

type KeyValue struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *KeyValue) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type DeviceInfo struct {
	VendorUID                     *string       `protobuf:"bytes,1,opt,name=vendorUID" json:"vendorUID,omitempty"`
	AdvertisingUID                *string       `protobuf:"bytes,2,opt,name=advertisingUID" json:"advertisingUID,omitempty"`
	PlatformType                  *PlatformType `protobuf:"varint,3,opt,name=platformType,enum=happiness.PlatformType" json:"platformType,omitempty"`
	ModelName                     *string       `protobuf:"bytes,4,opt,name=modelName" json:"modelName,omitempty"`
	SystemVersion                 *string       `protobuf:"bytes,5,opt,name=systemVersion" json:"systemVersion,omitempty"`
	Language                      *string       `protobuf:"bytes,6,opt,name=language" json:"language,omitempty"`
	Timezone                      *string       `protobuf:"bytes,7,opt,name=timezone" json:"timezone,omitempty"`
	PhoneCountryCode              *string       `protobuf:"bytes,8,opt,name=phoneCountryCode" json:"phoneCountryCode,omitempty"`
	ScreenSize                    *Size         `protobuf:"bytes,9,opt,name=screenSize" json:"screenSize,omitempty"`
	ScreenScale                   *float32      `protobuf:"fixed32,10,opt,name=screenScale,def=1" json:"screenScale,omitempty"`
	AppID                         *string       `protobuf:"bytes,11,opt,name=appID" json:"appID,omitempty"`
	AppVersion                    *string       `protobuf:"bytes,12,opt,name=appVersion" json:"appVersion,omitempty"`
	NotificationToken             *string       `protobuf:"bytes,13,opt,name=notificationToken" json:"notificationToken,omitempty"`
	LastContentRefresh_Deprecated *Timestamp    `protobuf:"bytes,14,opt,name=lastContentRefresh_Deprecated" json:"lastContentRefresh_Deprecated,omitempty"`
	UserTags                      []string      `protobuf:"bytes,15,rep,name=userTags" json:"userTags,omitempty"`
	DeviceUDID                    *string       `protobuf:"bytes,16,opt,name=deviceUDID" json:"deviceUDID,omitempty"`
	AppIsReleaseVersion           *bool         `protobuf:"varint,17,opt,name=appIsReleaseVersion" json:"appIsReleaseVersion,omitempty"`
	ColorDepth                    *float32      `protobuf:"fixed32,18,opt,name=colorDepth" json:"colorDepth,omitempty"`
	IPAddress                     *string       `protobuf:"bytes,19,opt,name=IPAddress" json:"IPAddress,omitempty"`
	SystemBuildVersion            *string       `protobuf:"bytes,20,opt,name=systemBuildVersion" json:"systemBuildVersion,omitempty"`
	LocalIPAddress                *string       `protobuf:"bytes,21,opt,name=localIPAddress" json:"localIPAddress,omitempty"`
	XXX_unrecognized              []byte        `json:"-"`
}

func (m *DeviceInfo) Reset()                    { *m = DeviceInfo{} }
func (m *DeviceInfo) String() string            { return proto.CompactTextString(m) }
func (*DeviceInfo) ProtoMessage()               {}
func (*DeviceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

const Default_DeviceInfo_ScreenScale float32 = 1

func (m *DeviceInfo) GetVendorUID() string {
	if m != nil && m.VendorUID != nil {
		return *m.VendorUID
	}
	return ""
}

func (m *DeviceInfo) GetAdvertisingUID() string {
	if m != nil && m.AdvertisingUID != nil {
		return *m.AdvertisingUID
	}
	return ""
}

func (m *DeviceInfo) GetPlatformType() PlatformType {
	if m != nil && m.PlatformType != nil {
		return *m.PlatformType
	}
	return PlatformType_PTUnknown
}

func (m *DeviceInfo) GetModelName() string {
	if m != nil && m.ModelName != nil {
		return *m.ModelName
	}
	return ""
}

func (m *DeviceInfo) GetSystemVersion() string {
	if m != nil && m.SystemVersion != nil {
		return *m.SystemVersion
	}
	return ""
}

func (m *DeviceInfo) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *DeviceInfo) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *DeviceInfo) GetPhoneCountryCode() string {
	if m != nil && m.PhoneCountryCode != nil {
		return *m.PhoneCountryCode
	}
	return ""
}

func (m *DeviceInfo) GetScreenSize() *Size {
	if m != nil {
		return m.ScreenSize
	}
	return nil
}

func (m *DeviceInfo) GetScreenScale() float32 {
	if m != nil && m.ScreenScale != nil {
		return *m.ScreenScale
	}
	return Default_DeviceInfo_ScreenScale
}

func (m *DeviceInfo) GetAppID() string {
	if m != nil && m.AppID != nil {
		return *m.AppID
	}
	return ""
}

func (m *DeviceInfo) GetAppVersion() string {
	if m != nil && m.AppVersion != nil {
		return *m.AppVersion
	}
	return ""
}

func (m *DeviceInfo) GetNotificationToken() string {
	if m != nil && m.NotificationToken != nil {
		return *m.NotificationToken
	}
	return ""
}

func (m *DeviceInfo) GetLastContentRefresh_Deprecated() *Timestamp {
	if m != nil {
		return m.LastContentRefresh_Deprecated
	}
	return nil
}

func (m *DeviceInfo) GetUserTags() []string {
	if m != nil {
		return m.UserTags
	}
	return nil
}

func (m *DeviceInfo) GetDeviceUDID() string {
	if m != nil && m.DeviceUDID != nil {
		return *m.DeviceUDID
	}
	return ""
}

func (m *DeviceInfo) GetAppIsReleaseVersion() bool {
	if m != nil && m.AppIsReleaseVersion != nil {
		return *m.AppIsReleaseVersion
	}
	return false
}

func (m *DeviceInfo) GetColorDepth() float32 {
	if m != nil && m.ColorDepth != nil {
		return *m.ColorDepth
	}
	return 0
}

func (m *DeviceInfo) GetIPAddress() string {
	if m != nil && m.IPAddress != nil {
		return *m.IPAddress
	}
	return ""
}

func (m *DeviceInfo) GetSystemBuildVersion() string {
	if m != nil && m.SystemBuildVersion != nil {
		return *m.SystemBuildVersion
	}
	return ""
}

func (m *DeviceInfo) GetLocalIPAddress() string {
	if m != nil && m.LocalIPAddress != nil {
		return *m.LocalIPAddress
	}
	return ""
}

type UserEvent struct {
	Timestamp        *Timestamp `protobuf:"bytes,1,req,name=timestamp" json:"timestamp,omitempty"`
	Location         *Location  `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	Event            *string    `protobuf:"bytes,3,req,name=event" json:"event,omitempty"`
	EventData        []string   `protobuf:"bytes,4,rep,name=eventData" json:"eventData,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *UserEvent) Reset()                    { *m = UserEvent{} }
func (m *UserEvent) String() string            { return proto.CompactTextString(m) }
func (*UserEvent) ProtoMessage()               {}
func (*UserEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UserEvent) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *UserEvent) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *UserEvent) GetEvent() string {
	if m != nil && m.Event != nil {
		return *m.Event
	}
	return ""
}

func (m *UserEvent) GetEventData() []string {
	if m != nil {
		return m.EventData
	}
	return nil
}

type UserEventsRequest struct {
	UserEvents       []*UserEvent `protobuf:"bytes,1,rep,name=userEvents" json:"userEvents,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *UserEventsRequest) Reset()                    { *m = UserEventsRequest{} }
func (m *UserEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*UserEventsRequest) ProtoMessage()               {}
func (*UserEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UserEventsRequest) GetUserEvents() []*UserEvent {
	if m != nil {
		return m.UserEvents
	}
	return nil
}

type UserEventsResponse struct {
	LatestEventUpdate *Timestamp `protobuf:"bytes,1,opt,name=latestEventUpdate" json:"latestEventUpdate,omitempty"`
	XXX_unrecognized  []byte     `json:"-"`
}

func (m *UserEventsResponse) Reset()                    { *m = UserEventsResponse{} }
func (m *UserEventsResponse) String() string            { return proto.CompactTextString(m) }
func (*UserEventsResponse) ProtoMessage()               {}
func (*UserEventsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UserEventsResponse) GetLatestEventUpdate() *Timestamp {
	if m != nil {
		return m.LatestEventUpdate
	}
	return nil
}

type Weather struct {
	Timestamp         *Timestamp         `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Location          *Location          `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	WeatherType       *WeatherType       `protobuf:"varint,3,opt,name=weatherType,enum=happiness.WeatherType" json:"weatherType,omitempty"`
	Temperature       *float32           `protobuf:"fixed32,4,opt,name=temperature" json:"temperature,omitempty"`
	CloudCover        *float32           `protobuf:"fixed32,5,opt,name=cloudCover" json:"cloudCover,omitempty"`
	Precipitation     *float32           `protobuf:"fixed32,6,opt,name=precipitation" json:"precipitation,omitempty"`
	PrecipitationType *PrecipitationType `protobuf:"varint,7,opt,name=precipitationType,enum=happiness.PrecipitationType" json:"precipitationType,omitempty"`
	Pressure          *float32           `protobuf:"fixed32,8,opt,name=pressure" json:"pressure,omitempty"`
	WindSpeed         *float32           `protobuf:"fixed32,9,opt,name=windSpeed" json:"windSpeed,omitempty"`
	WindBearing       *float32           `protobuf:"fixed32,10,opt,name=windBearing" json:"windBearing,omitempty"`
	XXX_unrecognized  []byte             `json:"-"`
}

func (m *Weather) Reset()                    { *m = Weather{} }
func (m *Weather) String() string            { return proto.CompactTextString(m) }
func (*Weather) ProtoMessage()               {}
func (*Weather) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Weather) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Weather) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Weather) GetWeatherType() WeatherType {
	if m != nil && m.WeatherType != nil {
		return *m.WeatherType
	}
	return WeatherType_WTUnknown
}

func (m *Weather) GetTemperature() float32 {
	if m != nil && m.Temperature != nil {
		return *m.Temperature
	}
	return 0
}

func (m *Weather) GetCloudCover() float32 {
	if m != nil && m.CloudCover != nil {
		return *m.CloudCover
	}
	return 0
}

func (m *Weather) GetPrecipitation() float32 {
	if m != nil && m.Precipitation != nil {
		return *m.Precipitation
	}
	return 0
}

func (m *Weather) GetPrecipitationType() PrecipitationType {
	if m != nil && m.PrecipitationType != nil {
		return *m.PrecipitationType
	}
	return PrecipitationType_PTNone
}

func (m *Weather) GetPressure() float32 {
	if m != nil && m.Pressure != nil {
		return *m.Pressure
	}
	return 0
}

func (m *Weather) GetWindSpeed() float32 {
	if m != nil && m.WindSpeed != nil {
		return *m.WindSpeed
	}
	return 0
}

func (m *Weather) GetWindBearing() float32 {
	if m != nil && m.WindBearing != nil {
		return *m.WindBearing
	}
	return 0
}

type UserResponse struct {
	EmotionID        *int32   `protobuf:"varint,1,opt,name=emotionID" json:"emotionID,omitempty"`
	EmotionCount     *int32   `protobuf:"varint,2,opt,name=emotionCount" json:"emotionCount,omitempty"`
	EmotionValue     *float32 `protobuf:"fixed32,3,opt,name=emotionValue" json:"emotionValue,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UserResponse) GetEmotionID() int32 {
	if m != nil && m.EmotionID != nil {
		return *m.EmotionID
	}
	return 0
}

func (m *UserResponse) GetEmotionCount() int32 {
	if m != nil && m.EmotionCount != nil {
		return *m.EmotionCount
	}
	return 0
}

func (m *UserResponse) GetEmotionValue() float32 {
	if m != nil && m.EmotionValue != nil {
		return *m.EmotionValue
	}
	return 0
}

type ScoreComponent struct {
	Label            *string  `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Score            *float64 `protobuf:"fixed64,2,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ScoreComponent) Reset()                    { *m = ScoreComponent{} }
func (m *ScoreComponent) String() string            { return proto.CompactTextString(m) }
func (*ScoreComponent) ProtoMessage()               {}
func (*ScoreComponent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ScoreComponent) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *ScoreComponent) GetScore() float64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type Score struct {
	Timestamp              *Timestamp        `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	PreviousTimestamp      *Timestamp        `protobuf:"bytes,2,opt,name=previousTimestamp" json:"previousTimestamp,omitempty"`
	PreviousBaseScore      *float64          `protobuf:"fixed64,3,opt,name=previousBaseScore" json:"previousBaseScore,omitempty"`
	HappyScore             *float64          `protobuf:"fixed64,4,opt,name=happyScore" json:"happyScore,omitempty"`
	BaseScore              *float64          `protobuf:"fixed64,5,opt,name=baseScore" json:"baseScore,omitempty"`
	DisplayScore           *float64          `protobuf:"fixed64,6,opt,name=displayScore" json:"displayScore,omitempty"`
	Physical               *float64          `protobuf:"fixed64,7,opt,name=physical" json:"physical,omitempty"`
	Mental                 *float64          `protobuf:"fixed64,8,opt,name=mental" json:"mental,omitempty"`
	Vital                  *float64          `protobuf:"fixed64,9,opt,name=vital" json:"vital,omitempty"`
	Environmental          *float64          `protobuf:"fixed64,10,opt,name=environmental" json:"environmental,omitempty"`
	Location               *Location         `protobuf:"bytes,11,opt,name=location" json:"location,omitempty"`
	Weather                *Weather          `protobuf:"bytes,12,opt,name=weather" json:"weather,omitempty"`
	TestIDDeprecated       *int32            `protobuf:"varint,13,opt,name=testID_deprecated" json:"testID_deprecated,omitempty"`
	TestSequenceDeprecated []int32           `protobuf:"varint,14,rep,name=testSequence_deprecated" json:"testSequence_deprecated,omitempty"`
	UserTestAssessment     *float64          `protobuf:"fixed64,15,opt,name=userTestAssessment" json:"userTestAssessment,omitempty"`
	UserResponse           []*UserResponse   `protobuf:"bytes,16,rep,name=userResponse" json:"userResponse,omitempty"`
	UserIDDeprecated       *string           `protobuf:"bytes,17,opt,name=userID_deprecated" json:"userID_deprecated,omitempty"`
	TestID                 *string           `protobuf:"bytes,18,opt,name=testID" json:"testID,omitempty"`
	ScoreComponents        []*ScoreComponent `protobuf:"bytes,19,rep,name=scoreComponents" json:"scoreComponents,omitempty"`
	XXX_unrecognized       []byte            `json:"-"`
}

func (m *Score) Reset()                    { *m = Score{} }
func (m *Score) String() string            { return proto.CompactTextString(m) }
func (*Score) ProtoMessage()               {}
func (*Score) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Score) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Score) GetPreviousTimestamp() *Timestamp {
	if m != nil {
		return m.PreviousTimestamp
	}
	return nil
}

func (m *Score) GetPreviousBaseScore() float64 {
	if m != nil && m.PreviousBaseScore != nil {
		return *m.PreviousBaseScore
	}
	return 0
}

func (m *Score) GetHappyScore() float64 {
	if m != nil && m.HappyScore != nil {
		return *m.HappyScore
	}
	return 0
}

func (m *Score) GetBaseScore() float64 {
	if m != nil && m.BaseScore != nil {
		return *m.BaseScore
	}
	return 0
}

func (m *Score) GetDisplayScore() float64 {
	if m != nil && m.DisplayScore != nil {
		return *m.DisplayScore
	}
	return 0
}

func (m *Score) GetPhysical() float64 {
	if m != nil && m.Physical != nil {
		return *m.Physical
	}
	return 0
}

func (m *Score) GetMental() float64 {
	if m != nil && m.Mental != nil {
		return *m.Mental
	}
	return 0
}

func (m *Score) GetVital() float64 {
	if m != nil && m.Vital != nil {
		return *m.Vital
	}
	return 0
}

func (m *Score) GetEnvironmental() float64 {
	if m != nil && m.Environmental != nil {
		return *m.Environmental
	}
	return 0
}

func (m *Score) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Score) GetWeather() *Weather {
	if m != nil {
		return m.Weather
	}
	return nil
}

func (m *Score) GetTestIDDeprecated() int32 {
	if m != nil && m.TestIDDeprecated != nil {
		return *m.TestIDDeprecated
	}
	return 0
}

func (m *Score) GetTestSequenceDeprecated() []int32 {
	if m != nil {
		return m.TestSequenceDeprecated
	}
	return nil
}

func (m *Score) GetUserTestAssessment() float64 {
	if m != nil && m.UserTestAssessment != nil {
		return *m.UserTestAssessment
	}
	return 0
}

func (m *Score) GetUserResponse() []*UserResponse {
	if m != nil {
		return m.UserResponse
	}
	return nil
}

func (m *Score) GetUserIDDeprecated() string {
	if m != nil && m.UserIDDeprecated != nil {
		return *m.UserIDDeprecated
	}
	return ""
}

func (m *Score) GetTestID() string {
	if m != nil && m.TestID != nil {
		return *m.TestID
	}
	return ""
}

func (m *Score) GetScoreComponents() []*ScoreComponent {
	if m != nil {
		return m.ScoreComponents
	}
	return nil
}

type SocialIdentity struct {
	SocialService    *string    `protobuf:"bytes,1,req,name=socialService" json:"socialService,omitempty"`
	SocialID         *string    `protobuf:"bytes,2,opt,name=socialID" json:"socialID,omitempty"`
	UserName         *string    `protobuf:"bytes,3,opt,name=userName" json:"userName,omitempty"`
	DisplayName      *string    `protobuf:"bytes,4,opt,name=displayName" json:"displayName,omitempty"`
	UserURI          *string    `protobuf:"bytes,5,opt,name=userURI" json:"userURI,omitempty"`
	AuthToken        *string    `protobuf:"bytes,6,opt,name=authToken" json:"authToken,omitempty"`
	AuthExpire       *Timestamp `protobuf:"bytes,7,opt,name=authExpire" json:"authExpire,omitempty"`
	AuthSecret       *string    `protobuf:"bytes,8,opt,name=authSecret" json:"authSecret,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *SocialIdentity) Reset()                    { *m = SocialIdentity{} }
func (m *SocialIdentity) String() string            { return proto.CompactTextString(m) }
func (*SocialIdentity) ProtoMessage()               {}
func (*SocialIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SocialIdentity) GetSocialService() string {
	if m != nil && m.SocialService != nil {
		return *m.SocialService
	}
	return ""
}

func (m *SocialIdentity) GetSocialID() string {
	if m != nil && m.SocialID != nil {
		return *m.SocialID
	}
	return ""
}

func (m *SocialIdentity) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *SocialIdentity) GetDisplayName() string {
	if m != nil && m.DisplayName != nil {
		return *m.DisplayName
	}
	return ""
}

func (m *SocialIdentity) GetUserURI() string {
	if m != nil && m.UserURI != nil {
		return *m.UserURI
	}
	return ""
}

func (m *SocialIdentity) GetAuthToken() string {
	if m != nil && m.AuthToken != nil {
		return *m.AuthToken
	}
	return ""
}

func (m *SocialIdentity) GetAuthExpire() *Timestamp {
	if m != nil {
		return m.AuthExpire
	}
	return nil
}

func (m *SocialIdentity) GetAuthSecret() string {
	if m != nil && m.AuthSecret != nil {
		return *m.AuthSecret
	}
	return ""
}

type ContactInfo struct {
	ContactType      *ContactType `protobuf:"varint,1,req,name=contactType,enum=happiness.ContactType" json:"contactType,omitempty"`
	Contact          *string      `protobuf:"bytes,2,req,name=contact" json:"contact,omitempty"`
	IsVerified       *bool        `protobuf:"varint,3,opt,name=isVerified" json:"isVerified,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ContactInfo) Reset()                    { *m = ContactInfo{} }
func (m *ContactInfo) String() string            { return proto.CompactTextString(m) }
func (*ContactInfo) ProtoMessage()               {}
func (*ContactInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ContactInfo) GetContactType() ContactType {
	if m != nil && m.ContactType != nil {
		return *m.ContactType
	}
	return ContactType_CTUnknown
}

func (m *ContactInfo) GetContact() string {
	if m != nil && m.Contact != nil {
		return *m.Contact
	}
	return ""
}

func (m *ContactInfo) GetIsVerified() bool {
	if m != nil && m.IsVerified != nil {
		return *m.IsVerified
	}
	return false
}

type ScoreSummary struct {
	Week             []*Score `protobuf:"bytes,1,rep,name=week" json:"week,omitempty"`
	Month            []*Score `protobuf:"bytes,2,rep,name=month" json:"month,omitempty"`
	Year             []*Score `protobuf:"bytes,3,rep,name=year" json:"year,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ScoreSummary) Reset()                    { *m = ScoreSummary{} }
func (m *ScoreSummary) String() string            { return proto.CompactTextString(m) }
func (*ScoreSummary) ProtoMessage()               {}
func (*ScoreSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ScoreSummary) GetWeek() []*Score {
	if m != nil {
		return m.Week
	}
	return nil
}

func (m *ScoreSummary) GetMonth() []*Score {
	if m != nil {
		return m.Month
	}
	return nil
}

func (m *ScoreSummary) GetYear() []*Score {
	if m != nil {
		return m.Year
	}
	return nil
}

type WeatherSummary struct {
	WeatherType      *WeatherType `protobuf:"varint,1,opt,name=weatherType,enum=happiness.WeatherType" json:"weatherType,omitempty"`
	WeatherCount     *int32       `protobuf:"varint,2,opt,name=weatherCount" json:"weatherCount,omitempty"`
	HappyScore       *float32     `protobuf:"fixed32,3,opt,name=happyScore" json:"happyScore,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *WeatherSummary) Reset()                    { *m = WeatherSummary{} }
func (m *WeatherSummary) String() string            { return proto.CompactTextString(m) }
func (*WeatherSummary) ProtoMessage()               {}
func (*WeatherSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *WeatherSummary) GetWeatherType() WeatherType {
	if m != nil && m.WeatherType != nil {
		return *m.WeatherType
	}
	return WeatherType_WTUnknown
}

func (m *WeatherSummary) GetWeatherCount() int32 {
	if m != nil && m.WeatherCount != nil {
		return *m.WeatherCount
	}
	return 0
}

func (m *WeatherSummary) GetHappyScore() float32 {
	if m != nil && m.HappyScore != nil {
		return *m.HappyScore
	}
	return 0
}

type Profile struct {
	UserID            *string           `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Name              *string           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Gender            *Gender           `protobuf:"varint,3,opt,name=gender,enum=happiness.Gender" json:"gender,omitempty"`
	UserStatus        *UserStatus       `protobuf:"varint,4,opt,name=userStatus,enum=happiness.UserStatus" json:"userStatus,omitempty"`
	Birthday          *Timestamp        `protobuf:"bytes,5,opt,name=birthday" json:"birthday,omitempty"`
	ImageURL          []string          `protobuf:"bytes,6,rep,name=imageURL" json:"imageURL,omitempty"`
	Phone_Deprecated  []string          `protobuf:"bytes,7,rep,name=phone_Deprecated" json:"phone_Deprecated,omitempty"`
	Email_Deprecated  []string          `protobuf:"bytes,8,rep,name=email_Deprecated" json:"email_Deprecated,omitempty"`
	SocialIdentities  []*SocialIdentity `protobuf:"bytes,9,rep,name=socialIdentities" json:"socialIdentities,omitempty"`
	Scores_Deprecated []*Score          `protobuf:"bytes,10,rep,name=scores_Deprecated" json:"scores_Deprecated,omitempty"`
	LastSeen          *Timestamp        `protobuf:"bytes,11,opt,name=lastSeen" json:"lastSeen,omitempty"`
	CreationDate      *Timestamp        `protobuf:"bytes,12,opt,name=creationDate" json:"creationDate,omitempty"`
	HeartsReceived    *int32            `protobuf:"varint,13,opt,name=heartsReceived" json:"heartsReceived,omitempty"`
	HeartsSent        *int32            `protobuf:"varint,14,opt,name=heartsSent" json:"heartsSent,omitempty"`
	ContactInfo       []*ContactInfo    `protobuf:"bytes,15,rep,name=contactInfo" json:"contactInfo,omitempty"`
	UserSummary       *ScoreSummary     `protobuf:"bytes,16,opt,name=userSummary" json:"userSummary,omitempty"`
	CircleSummary     *ScoreSummary     `protobuf:"bytes,17,opt,name=circleSummary" json:"circleSummary,omitempty"`
	GlobalSummary     *ScoreSummary     `protobuf:"bytes,18,opt,name=globalSummary" json:"globalSummary,omitempty"`
	WeatherSummary    []*WeatherSummary `protobuf:"bytes,19,rep,name=weatherSummary" json:"weatherSummary,omitempty"`
	LastHappyScore    *float64          `protobuf:"fixed64,20,opt,name=lastHappyScore" json:"lastHappyScore,omitempty"`
	LatestScore       *Score            `protobuf:"bytes,21,opt,name=latestScore" json:"latestScore,omitempty"`
	XXX_unrecognized  []byte            `json:"-"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Profile) GetUserID() string {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return ""
}

func (m *Profile) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Profile) GetGender() Gender {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return Gender_GUnknown
}

func (m *Profile) GetUserStatus() UserStatus {
	if m != nil && m.UserStatus != nil {
		return *m.UserStatus
	}
	return UserStatus_USUnknown
}

func (m *Profile) GetBirthday() *Timestamp {
	if m != nil {
		return m.Birthday
	}
	return nil
}

func (m *Profile) GetImageURL() []string {
	if m != nil {
		return m.ImageURL
	}
	return nil
}

func (m *Profile) GetPhone_Deprecated() []string {
	if m != nil {
		return m.Phone_Deprecated
	}
	return nil
}

func (m *Profile) GetEmail_Deprecated() []string {
	if m != nil {
		return m.Email_Deprecated
	}
	return nil
}

func (m *Profile) GetSocialIdentities() []*SocialIdentity {
	if m != nil {
		return m.SocialIdentities
	}
	return nil
}

func (m *Profile) GetScores_Deprecated() []*Score {
	if m != nil {
		return m.Scores_Deprecated
	}
	return nil
}

func (m *Profile) GetLastSeen() *Timestamp {
	if m != nil {
		return m.LastSeen
	}
	return nil
}

func (m *Profile) GetCreationDate() *Timestamp {
	if m != nil {
		return m.CreationDate
	}
	return nil
}

func (m *Profile) GetHeartsReceived() int32 {
	if m != nil && m.HeartsReceived != nil {
		return *m.HeartsReceived
	}
	return 0
}

func (m *Profile) GetHeartsSent() int32 {
	if m != nil && m.HeartsSent != nil {
		return *m.HeartsSent
	}
	return 0
}

func (m *Profile) GetContactInfo() []*ContactInfo {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *Profile) GetUserSummary() *ScoreSummary {
	if m != nil {
		return m.UserSummary
	}
	return nil
}

func (m *Profile) GetCircleSummary() *ScoreSummary {
	if m != nil {
		return m.CircleSummary
	}
	return nil
}

func (m *Profile) GetGlobalSummary() *ScoreSummary {
	if m != nil {
		return m.GlobalSummary
	}
	return nil
}

func (m *Profile) GetWeatherSummary() []*WeatherSummary {
	if m != nil {
		return m.WeatherSummary
	}
	return nil
}

func (m *Profile) GetLastHappyScore() float64 {
	if m != nil && m.LastHappyScore != nil {
		return *m.LastHappyScore
	}
	return 0
}

func (m *Profile) GetLatestScore() *Score {
	if m != nil {
		return m.LatestScore
	}
	return nil
}

type ImageData struct {
	ImageContent     *ImageContent `protobuf:"varint,1,opt,name=imageContent,enum=happiness.ImageContent" json:"imageContent,omitempty"`
	ImageBytes       []byte        `protobuf:"bytes,2,opt,name=imageBytes" json:"imageBytes,omitempty"`
	ContentType      *string       `protobuf:"bytes,3,opt,name=contentType" json:"contentType,omitempty"`
	ImageURL         *string       `protobuf:"bytes,4,opt,name=imageURL" json:"imageURL,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ImageData) Reset()                    { *m = ImageData{} }
func (m *ImageData) String() string            { return proto.CompactTextString(m) }
func (*ImageData) ProtoMessage()               {}
func (*ImageData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ImageData) GetImageContent() ImageContent {
	if m != nil && m.ImageContent != nil {
		return *m.ImageContent
	}
	return ImageContent_ICUnknown
}

func (m *ImageData) GetImageBytes() []byte {
	if m != nil {
		return m.ImageBytes
	}
	return nil
}

func (m *ImageData) GetContentType() string {
	if m != nil && m.ContentType != nil {
		return *m.ContentType
	}
	return ""
}

func (m *ImageData) GetImageURL() string {
	if m != nil && m.ImageURL != nil {
		return *m.ImageURL
	}
	return ""
}

type ImageUpload struct {
	ImageData        []*ImageData `protobuf:"bytes,1,rep,name=imageData" json:"imageData,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ImageUpload) Reset()                    { *m = ImageUpload{} }
func (m *ImageUpload) String() string            { return proto.CompactTextString(m) }
func (*ImageUpload) ProtoMessage()               {}
func (*ImageUpload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ImageUpload) GetImageData() []*ImageData {
	if m != nil {
		return m.ImageData
	}
	return nil
}

type ProfileUpdate struct {
	Profiles         []*Profile `protobuf:"bytes,1,rep,name=profiles" json:"profiles,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ProfileUpdate) Reset()                    { *m = ProfileUpdate{} }
func (m *ProfileUpdate) String() string            { return proto.CompactTextString(m) }
func (*ProfileUpdate) ProtoMessage()               {}
func (*ProfileUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ProfileUpdate) GetProfiles() []*Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type ProfileQuery struct {
	UserIDs          []string `protobuf:"bytes,1,rep,name=userIDs" json:"userIDs,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ProfileQuery) Reset()                    { *m = ProfileQuery{} }
func (m *ProfileQuery) String() string            { return proto.CompactTextString(m) }
func (*ProfileQuery) ProtoMessage()               {}
func (*ProfileQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ProfileQuery) GetUserIDs() []string {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

type Friend struct {
	FriendID         *string       `protobuf:"bytes,1,req,name=friendID" json:"friendID,omitempty"`
	FriendStatus     *FriendStatus `protobuf:"varint,2,req,name=friendStatus,enum=happiness.FriendStatus" json:"friendStatus,omitempty"`
	IsInCircle       *bool         `protobuf:"varint,3,opt,name=isInCircle" json:"isInCircle,omitempty"`
	InviteLink       *string       `protobuf:"bytes,4,opt,name=inviteLink" json:"inviteLink,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Friend) Reset()                    { *m = Friend{} }
func (m *Friend) String() string            { return proto.CompactTextString(m) }
func (*Friend) ProtoMessage()               {}
func (*Friend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Friend) GetFriendID() string {
	if m != nil && m.FriendID != nil {
		return *m.FriendID
	}
	return ""
}

func (m *Friend) GetFriendStatus() FriendStatus {
	if m != nil && m.FriendStatus != nil {
		return *m.FriendStatus
	}
	return FriendStatus_FSUnknown
}

func (m *Friend) GetIsInCircle() bool {
	if m != nil && m.IsInCircle != nil {
		return *m.IsInCircle
	}
	return false
}

func (m *Friend) GetInviteLink() string {
	if m != nil && m.InviteLink != nil {
		return *m.InviteLink
	}
	return ""
}

type FriendUpdate struct {
	Friends          []*Friend `protobuf:"bytes,1,rep,name=friends" json:"friends,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *FriendUpdate) Reset()                    { *m = FriendUpdate{} }
func (m *FriendUpdate) String() string            { return proto.CompactTextString(m) }
func (*FriendUpdate) ProtoMessage()               {}
func (*FriendUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *FriendUpdate) GetFriends() []*Friend {
	if m != nil {
		return m.Friends
	}
	return nil
}

type FriendRequest struct {
	FriendProfile    *Profile `protobuf:"bytes,1,opt,name=friendProfile" json:"friendProfile,omitempty"`
	IsInCircle       *bool    `protobuf:"varint,2,opt,name=isInCircle" json:"isInCircle,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FriendRequest) Reset()                    { *m = FriendRequest{} }
func (m *FriendRequest) String() string            { return proto.CompactTextString(m) }
func (*FriendRequest) ProtoMessage()               {}
func (*FriendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *FriendRequest) GetFriendProfile() *Profile {
	if m != nil {
		return m.FriendProfile
	}
	return nil
}

func (m *FriendRequest) GetIsInCircle() bool {
	if m != nil && m.IsInCircle != nil {
		return *m.IsInCircle
	}
	return false
}

type FriendResponse struct {
	Friends          []*Friend           `protobuf:"bytes,1,rep,name=friends" json:"friends,omitempty"`
	FriendProfiles   []*Profile          `protobuf:"bytes,2,rep,name=friendProfiles" json:"friendProfiles,omitempty"`
	InviteLink       *string             `protobuf:"bytes,3,opt,name=inviteLink" json:"inviteLink,omitempty"`
	ResponseType     *FriendResponseType `protobuf:"varint,4,opt,name=responseType,enum=happiness.FriendResponseType" json:"responseType,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *FriendResponse) Reset()                    { *m = FriendResponse{} }
func (m *FriendResponse) String() string            { return proto.CompactTextString(m) }
func (*FriendResponse) ProtoMessage()               {}
func (*FriendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *FriendResponse) GetFriends() []*Friend {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *FriendResponse) GetFriendProfiles() []*Profile {
	if m != nil {
		return m.FriendProfiles
	}
	return nil
}

func (m *FriendResponse) GetInviteLink() string {
	if m != nil && m.InviteLink != nil {
		return *m.InviteLink
	}
	return ""
}

func (m *FriendResponse) GetResponseType() FriendResponseType {
	if m != nil && m.ResponseType != nil {
		return *m.ResponseType
	}
	return FriendResponseType_FRUnknown
}

type ConfirmationRequest struct {
	ContactInfo      *ContactInfo `protobuf:"bytes,1,opt,name=contactInfo" json:"contactInfo,omitempty"`
	Profile          *Profile     `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
	ConfirmationCode *string      `protobuf:"bytes,3,opt,name=confirmationCode" json:"confirmationCode,omitempty"`
	InviterUserID    *string      `protobuf:"bytes,4,opt,name=inviterUserID" json:"inviterUserID,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ConfirmationRequest) Reset()                    { *m = ConfirmationRequest{} }
func (m *ConfirmationRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfirmationRequest) ProtoMessage()               {}
func (*ConfirmationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ConfirmationRequest) GetContactInfo() *ContactInfo {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *ConfirmationRequest) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *ConfirmationRequest) GetConfirmationCode() string {
	if m != nil && m.ConfirmationCode != nil {
		return *m.ConfirmationCode
	}
	return ""
}

func (m *ConfirmationRequest) GetInviterUserID() string {
	if m != nil && m.InviterUserID != nil {
		return *m.InviterUserID
	}
	return ""
}

type Message struct {
	MessageID        *string        `protobuf:"bytes,1,req,name=messageID" json:"messageID,omitempty"`
	SenderID         *string        `protobuf:"bytes,2,req,name=senderID" json:"senderID,omitempty"`
	Recipients       []string       `protobuf:"bytes,3,rep,name=recipients" json:"recipients,omitempty"`
	CreationDate     *Timestamp     `protobuf:"bytes,4,opt,name=creationDate" json:"creationDate,omitempty"`
	NotificationDate *Timestamp     `protobuf:"bytes,5,opt,name=notificationDate" json:"notificationDate,omitempty"`
	ReadDate         *Timestamp     `protobuf:"bytes,6,opt,name=readDate" json:"readDate,omitempty"`
	MessageType      *MessageType   `protobuf:"varint,7,opt,name=messageType,enum=happiness.MessageType" json:"messageType,omitempty"`
	MessageText      *string        `protobuf:"bytes,8,opt,name=messageText" json:"messageText,omitempty"`
	MessageStatus    *MessageStatus `protobuf:"varint,9,opt,name=messageStatus,enum=happiness.MessageStatus" json:"messageStatus,omitempty"`
	ActionIcon       *string        `protobuf:"bytes,10,opt,name=actionIcon" json:"actionIcon,omitempty"`
	ActionURL        *string        `protobuf:"bytes,11,opt,name=actionURL" json:"actionURL,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *Message) GetMessageID() string {
	if m != nil && m.MessageID != nil {
		return *m.MessageID
	}
	return ""
}

func (m *Message) GetSenderID() string {
	if m != nil && m.SenderID != nil {
		return *m.SenderID
	}
	return ""
}

func (m *Message) GetRecipients() []string {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (m *Message) GetCreationDate() *Timestamp {
	if m != nil {
		return m.CreationDate
	}
	return nil
}

func (m *Message) GetNotificationDate() *Timestamp {
	if m != nil {
		return m.NotificationDate
	}
	return nil
}

func (m *Message) GetReadDate() *Timestamp {
	if m != nil {
		return m.ReadDate
	}
	return nil
}

func (m *Message) GetMessageType() MessageType {
	if m != nil && m.MessageType != nil {
		return *m.MessageType
	}
	return MessageType_MTRequestJoin
}

func (m *Message) GetMessageText() string {
	if m != nil && m.MessageText != nil {
		return *m.MessageText
	}
	return ""
}

func (m *Message) GetMessageStatus() MessageStatus {
	if m != nil && m.MessageStatus != nil {
		return *m.MessageStatus
	}
	return MessageStatus_MSNew
}

func (m *Message) GetActionIcon() string {
	if m != nil && m.ActionIcon != nil {
		return *m.ActionIcon
	}
	return ""
}

func (m *Message) GetActionURL() string {
	if m != nil && m.ActionURL != nil {
		return *m.ActionURL
	}
	return ""
}

type MessageUpdate struct {
	Timespan         *Timespan  `protobuf:"bytes,1,opt,name=timespan" json:"timespan,omitempty"`
	Messages         []*Message `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *MessageUpdate) Reset()                    { *m = MessageUpdate{} }
func (m *MessageUpdate) String() string            { return proto.CompactTextString(m) }
func (*MessageUpdate) ProtoMessage()               {}
func (*MessageUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *MessageUpdate) GetTimespan() *Timespan {
	if m != nil {
		return m.Timespan
	}
	return nil
}

func (m *MessageUpdate) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type Story struct {
	StoryID          *string    `protobuf:"bytes,1,opt,name=storyID" json:"storyID,omitempty"`
	StoryType        *StoryType `protobuf:"varint,2,opt,name=storyType,enum=happiness.StoryType" json:"storyType,omitempty"`
	CreationDate     *Timestamp `protobuf:"bytes,3,opt,name=creationDate" json:"creationDate,omitempty"`
	HappyScore       *float64   `protobuf:"fixed64,4,opt,name=happyScore" json:"happyScore,omitempty"`
	StoryText        *string    `protobuf:"bytes,5,opt,name=storyText" json:"storyText,omitempty"`
	StoryAttribution *string    `protobuf:"bytes,6,opt,name=storyAttribution" json:"storyAttribution,omitempty"`
	WasRead          *bool      `protobuf:"varint,7,opt,name=wasRead" json:"wasRead,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Story) Reset()                    { *m = Story{} }
func (m *Story) String() string            { return proto.CompactTextString(m) }
func (*Story) ProtoMessage()               {}
func (*Story) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *Story) GetStoryID() string {
	if m != nil && m.StoryID != nil {
		return *m.StoryID
	}
	return ""
}

func (m *Story) GetStoryType() StoryType {
	if m != nil && m.StoryType != nil {
		return *m.StoryType
	}
	return StoryType_STUnknown
}

func (m *Story) GetCreationDate() *Timestamp {
	if m != nil {
		return m.CreationDate
	}
	return nil
}

func (m *Story) GetHappyScore() float64 {
	if m != nil && m.HappyScore != nil {
		return *m.HappyScore
	}
	return 0
}

func (m *Story) GetStoryText() string {
	if m != nil && m.StoryText != nil {
		return *m.StoryText
	}
	return ""
}

func (m *Story) GetStoryAttribution() string {
	if m != nil && m.StoryAttribution != nil {
		return *m.StoryAttribution
	}
	return ""
}

func (m *Story) GetWasRead() bool {
	if m != nil && m.WasRead != nil {
		return *m.WasRead
	}
	return false
}

type StoryUpdate struct {
	Timespan         *Timespan `protobuf:"bytes,1,opt,name=timespan" json:"timespan,omitempty"`
	Stories          []*Story  `protobuf:"bytes,2,rep,name=stories" json:"stories,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *StoryUpdate) Reset()                    { *m = StoryUpdate{} }
func (m *StoryUpdate) String() string            { return proto.CompactTextString(m) }
func (*StoryUpdate) ProtoMessage()               {}
func (*StoryUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *StoryUpdate) GetTimespan() *Timespan {
	if m != nil {
		return m.Timespan
	}
	return nil
}

func (m *StoryUpdate) GetStories() []*Story {
	if m != nil {
		return m.Stories
	}
	return nil
}

type DebugMessage struct {
	DebugText        []string `protobuf:"bytes,1,rep,name=debugText" json:"debugText,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DebugMessage) Reset()                    { *m = DebugMessage{} }
func (m *DebugMessage) String() string            { return proto.CompactTextString(m) }
func (*DebugMessage) ProtoMessage()               {}
func (*DebugMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *DebugMessage) GetDebugText() []string {
	if m != nil {
		return m.DebugText
	}
	return nil
}

type AcceptInviteRequest struct {
	UserID           *string      `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	FriendID         *string      `protobuf:"bytes,2,opt,name=friendID" json:"friendID,omitempty"`
	Message          *string      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	ContactInfo      *ContactInfo `protobuf:"bytes,4,opt,name=contactInfo" json:"contactInfo,omitempty"`
	Profiles         []*Profile   `protobuf:"bytes,5,rep,name=profiles" json:"profiles,omitempty"`
	ConfirmationCode *string      `protobuf:"bytes,6,opt,name=confirmationCode" json:"confirmationCode,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *AcceptInviteRequest) Reset()                    { *m = AcceptInviteRequest{} }
func (m *AcceptInviteRequest) String() string            { return proto.CompactTextString(m) }
func (*AcceptInviteRequest) ProtoMessage()               {}
func (*AcceptInviteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *AcceptInviteRequest) GetUserID() string {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return ""
}

func (m *AcceptInviteRequest) GetFriendID() string {
	if m != nil && m.FriendID != nil {
		return *m.FriendID
	}
	return ""
}

func (m *AcceptInviteRequest) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *AcceptInviteRequest) GetContactInfo() *ContactInfo {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *AcceptInviteRequest) GetProfiles() []*Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *AcceptInviteRequest) GetConfirmationCode() string {
	if m != nil && m.ConfirmationCode != nil {
		return *m.ConfirmationCode
	}
	return ""
}

type AcceptInviteResponse struct {
	UserID           *string    `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	FriendID         *string    `protobuf:"bytes,2,opt,name=friendID" json:"friendID,omitempty"`
	Message          *string    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Friends          []*Friend  `protobuf:"bytes,4,rep,name=friends" json:"friends,omitempty"`
	Profiles         []*Profile `protobuf:"bytes,5,rep,name=profiles" json:"profiles,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *AcceptInviteResponse) Reset()                    { *m = AcceptInviteResponse{} }
func (m *AcceptInviteResponse) String() string            { return proto.CompactTextString(m) }
func (*AcceptInviteResponse) ProtoMessage()               {}
func (*AcceptInviteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *AcceptInviteResponse) GetUserID() string {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return ""
}

func (m *AcceptInviteResponse) GetFriendID() string {
	if m != nil && m.FriendID != nil {
		return *m.FriendID
	}
	return ""
}

func (m *AcceptInviteResponse) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *AcceptInviteResponse) GetFriends() []*Friend {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *AcceptInviteResponse) GetProfiles() []*Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type FetchScoresRequest struct {
	ScoreTimespan    *Timespan `protobuf:"bytes,1,opt,name=scoreTimespan" json:"scoreTimespan,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *FetchScoresRequest) Reset()                    { *m = FetchScoresRequest{} }
func (m *FetchScoresRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchScoresRequest) ProtoMessage()               {}
func (*FetchScoresRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *FetchScoresRequest) GetScoreTimespan() *Timespan {
	if m != nil {
		return m.ScoreTimespan
	}
	return nil
}

type ScoreUpdate struct {
	Scores           []*Score `protobuf:"bytes,1,rep,name=scores" json:"scores,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ScoreUpdate) Reset()                    { *m = ScoreUpdate{} }
func (m *ScoreUpdate) String() string            { return proto.CompactTextString(m) }
func (*ScoreUpdate) ProtoMessage()               {}
func (*ScoreUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ScoreUpdate) GetScores() []*Score {
	if m != nil {
		return m.Scores
	}
	return nil
}

type UserMessage struct {
	MessageID        *int32      `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
	MessageCue       *MessageCue `protobuf:"varint,2,opt,name=messageCue,enum=happiness.MessageCue" json:"messageCue,omitempty"`
	URL              *string     `protobuf:"bytes,3,opt,name=URL" json:"URL,omitempty"`
	MessageTimespan  *Timespan   `protobuf:"bytes,4,opt,name=messageTimespan" json:"messageTimespan,omitempty"`
	ShowCount        *int32      `protobuf:"varint,5,opt,name=showCount" json:"showCount,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *UserMessage) Reset()                    { *m = UserMessage{} }
func (m *UserMessage) String() string            { return proto.CompactTextString(m) }
func (*UserMessage) ProtoMessage()               {}
func (*UserMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *UserMessage) GetMessageID() int32 {
	if m != nil && m.MessageID != nil {
		return *m.MessageID
	}
	return 0
}

func (m *UserMessage) GetMessageCue() MessageCue {
	if m != nil && m.MessageCue != nil {
		return *m.MessageCue
	}
	return MessageCue_MCStartMessage
}

func (m *UserMessage) GetURL() string {
	if m != nil && m.URL != nil {
		return *m.URL
	}
	return ""
}

func (m *UserMessage) GetMessageTimespan() *Timespan {
	if m != nil {
		return m.MessageTimespan
	}
	return nil
}

func (m *UserMessage) GetShowCount() int32 {
	if m != nil && m.ShowCount != nil {
		return *m.ShowCount
	}
	return 0
}

type BeingHappyOptions struct {
	MinimumEmotionsToScore *int32 `protobuf:"varint,1,opt,name=MinimumEmotionsToScore,def=3" json:"MinimumEmotionsToScore,omitempty"`
	XXX_unrecognized       []byte `json:"-"`
}

func (m *BeingHappyOptions) Reset()                    { *m = BeingHappyOptions{} }
func (m *BeingHappyOptions) String() string            { return proto.CompactTextString(m) }
func (*BeingHappyOptions) ProtoMessage()               {}
func (*BeingHappyOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

const Default_BeingHappyOptions_MinimumEmotionsToScore int32 = 3

func (m *BeingHappyOptions) GetMinimumEmotionsToScore() int32 {
	if m != nil && m.MinimumEmotionsToScore != nil {
		return *m.MinimumEmotionsToScore
	}
	return Default_BeingHappyOptions_MinimumEmotionsToScore
}

type PulseMember struct {
	UserID           *string      `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Name             *string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ScoreDate        *Timestamp   `protobuf:"bytes,3,opt,name=scoreDate" json:"scoreDate,omitempty"`
	ContactInfo      *ContactInfo `protobuf:"bytes,4,opt,name=contactInfo" json:"contactInfo,omitempty"`
	Profile          *Profile     `protobuf:"bytes,5,opt,name=profile" json:"profile,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PulseMember) Reset()                    { *m = PulseMember{} }
func (m *PulseMember) String() string            { return proto.CompactTextString(m) }
func (*PulseMember) ProtoMessage()               {}
func (*PulseMember) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *PulseMember) GetUserID() string {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return ""
}

func (m *PulseMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PulseMember) GetScoreDate() *Timestamp {
	if m != nil {
		return m.ScoreDate
	}
	return nil
}

func (m *PulseMember) GetContactInfo() *ContactInfo {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *PulseMember) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type PulseBeat struct {
	BeatDate                  *Timestamp        `protobuf:"bytes,1,opt,name=beatDate" json:"beatDate,omitempty"`
	ExpirationDate            *Timestamp        `protobuf:"bytes,2,opt,name=expirationDate" json:"expirationDate,omitempty"`
	UpdateDate                *Timestamp        `protobuf:"bytes,3,opt,name=updateDate" json:"updateDate,omitempty"`
	ResponseRate              *float64          `protobuf:"fixed64,4,opt,name=responseRate" json:"responseRate,omitempty"`
	HappyScore                *float64          `protobuf:"fixed64,5,opt,name=happyScore" json:"happyScore,omitempty"`
	ScoreComponentsDeprecated []float64         `protobuf:"fixed64,6,rep,name=scoreComponents_deprecated" json:"scoreComponents_deprecated,omitempty"`
	Members                   []*PulseMember    `protobuf:"bytes,7,rep,name=members" json:"members,omitempty"`
	ScoreComponents           []*ScoreComponent `protobuf:"bytes,8,rep,name=scoreComponents" json:"scoreComponents,omitempty"`
	XXX_unrecognized          []byte            `json:"-"`
}

func (m *PulseBeat) Reset()                    { *m = PulseBeat{} }
func (m *PulseBeat) String() string            { return proto.CompactTextString(m) }
func (*PulseBeat) ProtoMessage()               {}
func (*PulseBeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *PulseBeat) GetBeatDate() *Timestamp {
	if m != nil {
		return m.BeatDate
	}
	return nil
}

func (m *PulseBeat) GetExpirationDate() *Timestamp {
	if m != nil {
		return m.ExpirationDate
	}
	return nil
}

func (m *PulseBeat) GetUpdateDate() *Timestamp {
	if m != nil {
		return m.UpdateDate
	}
	return nil
}

func (m *PulseBeat) GetResponseRate() float64 {
	if m != nil && m.ResponseRate != nil {
		return *m.ResponseRate
	}
	return 0
}

func (m *PulseBeat) GetHappyScore() float64 {
	if m != nil && m.HappyScore != nil {
		return *m.HappyScore
	}
	return 0
}

func (m *PulseBeat) GetScoreComponentsDeprecated() []float64 {
	if m != nil {
		return m.ScoreComponentsDeprecated
	}
	return nil
}

func (m *PulseBeat) GetMembers() []*PulseMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *PulseBeat) GetScoreComponents() []*ScoreComponent {
	if m != nil {
		return m.ScoreComponents
	}
	return nil
}

type Pulse struct {
	PulseID          *string      `protobuf:"bytes,1,opt,name=pulseID" json:"pulseID,omitempty"`
	SenderID         *string      `protobuf:"bytes,2,opt,name=senderID" json:"senderID,omitempty"`
	Title            *string      `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Body             *string      `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
	Color            *ColorRGB256 `protobuf:"bytes,5,opt,name=color" json:"color,omitempty"`
	TeamIsVisible    *bool        `protobuf:"varint,6,opt,name=teamIsVisible" json:"teamIsVisible,omitempty"`
	CreationDate     *Timestamp   `protobuf:"bytes,7,opt,name=creationDate" json:"creationDate,omitempty"`
	TestID           *string      `protobuf:"bytes,8,opt,name=testID" json:"testID,omitempty"`
	Beats            []*PulseBeat `protobuf:"bytes,9,rep,name=beats" json:"beats,omitempty"`
	PulseStatus      *PulseStatus `protobuf:"varint,10,opt,name=pulseStatus,enum=happiness.PulseStatus" json:"pulseStatus,omitempty"`
	UpdateDate       *Timestamp   `protobuf:"bytes,11,opt,name=updateDate" json:"updateDate,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Pulse) Reset()                    { *m = Pulse{} }
func (m *Pulse) String() string            { return proto.CompactTextString(m) }
func (*Pulse) ProtoMessage()               {}
func (*Pulse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *Pulse) GetPulseID() string {
	if m != nil && m.PulseID != nil {
		return *m.PulseID
	}
	return ""
}

func (m *Pulse) GetSenderID() string {
	if m != nil && m.SenderID != nil {
		return *m.SenderID
	}
	return ""
}

func (m *Pulse) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Pulse) GetBody() string {
	if m != nil && m.Body != nil {
		return *m.Body
	}
	return ""
}

func (m *Pulse) GetColor() *ColorRGB256 {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *Pulse) GetTeamIsVisible() bool {
	if m != nil && m.TeamIsVisible != nil {
		return *m.TeamIsVisible
	}
	return false
}

func (m *Pulse) GetCreationDate() *Timestamp {
	if m != nil {
		return m.CreationDate
	}
	return nil
}

func (m *Pulse) GetTestID() string {
	if m != nil && m.TestID != nil {
		return *m.TestID
	}
	return ""
}

func (m *Pulse) GetBeats() []*PulseBeat {
	if m != nil {
		return m.Beats
	}
	return nil
}

func (m *Pulse) GetPulseStatus() PulseStatus {
	if m != nil && m.PulseStatus != nil {
		return *m.PulseStatus
	}
	return PulseStatus_PSUnknown
}

func (m *Pulse) GetUpdateDate() *Timestamp {
	if m != nil {
		return m.UpdateDate
	}
	return nil
}

type PulseUpdate struct {
	Timespan         *Timespan  `protobuf:"bytes,1,opt,name=timespan" json:"timespan,omitempty"`
	Pulses           []*Pulse   `protobuf:"bytes,2,rep,name=pulses" json:"pulses,omitempty"`
	MemberProfiles   []*Profile `protobuf:"bytes,3,rep,name=memberProfiles" json:"memberProfiles,omitempty"`
	Scores           []*Score   `protobuf:"bytes,4,rep,name=scores" json:"scores,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *PulseUpdate) Reset()                    { *m = PulseUpdate{} }
func (m *PulseUpdate) String() string            { return proto.CompactTextString(m) }
func (*PulseUpdate) ProtoMessage()               {}
func (*PulseUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *PulseUpdate) GetTimespan() *Timespan {
	if m != nil {
		return m.Timespan
	}
	return nil
}

func (m *PulseUpdate) GetPulses() []*Pulse {
	if m != nil {
		return m.Pulses
	}
	return nil
}

func (m *PulseUpdate) GetMemberProfiles() []*Profile {
	if m != nil {
		return m.MemberProfiles
	}
	return nil
}

func (m *PulseUpdate) GetScores() []*Score {
	if m != nil {
		return m.Scores
	}
	return nil
}

type ProfilesFromContactInfo struct {
	Profiles         []*Profile `protobuf:"bytes,1,rep,name=profiles" json:"profiles,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ProfilesFromContactInfo) Reset()                    { *m = ProfilesFromContactInfo{} }
func (m *ProfilesFromContactInfo) String() string            { return proto.CompactTextString(m) }
func (*ProfilesFromContactInfo) ProtoMessage()               {}
func (*ProfilesFromContactInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ProfilesFromContactInfo) GetProfiles() []*Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type ScorePulseBeat struct {
	PulseID          *string         `protobuf:"bytes,1,opt,name=pulseID" json:"pulseID,omitempty"`
	BeatDate         *Timestamp      `protobuf:"bytes,2,opt,name=beatDate" json:"beatDate,omitempty"`
	Responses        []*UserResponse `protobuf:"bytes,3,rep,name=responses" json:"responses,omitempty"`
	Weather          *Weather        `protobuf:"bytes,4,opt,name=weather" json:"weather,omitempty"`
	Location         *Location       `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	ScoreDate        *Timestamp      `protobuf:"bytes,6,opt,name=scoreDate" json:"scoreDate,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ScorePulseBeat) Reset()                    { *m = ScorePulseBeat{} }
func (m *ScorePulseBeat) String() string            { return proto.CompactTextString(m) }
func (*ScorePulseBeat) ProtoMessage()               {}
func (*ScorePulseBeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *ScorePulseBeat) GetPulseID() string {
	if m != nil && m.PulseID != nil {
		return *m.PulseID
	}
	return ""
}

func (m *ScorePulseBeat) GetBeatDate() *Timestamp {
	if m != nil {
		return m.BeatDate
	}
	return nil
}

func (m *ScorePulseBeat) GetResponses() []*UserResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *ScorePulseBeat) GetWeather() *Weather {
	if m != nil {
		return m.Weather
	}
	return nil
}

func (m *ScorePulseBeat) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *ScorePulseBeat) GetScoreDate() *Timestamp {
	if m != nil {
		return m.ScoreDate
	}
	return nil
}

type PulseStatusUpdate struct {
	Status           []*PulseStatusUpdate_Status `protobuf:"bytes,1,rep,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *PulseStatusUpdate) Reset()                    { *m = PulseStatusUpdate{} }
func (m *PulseStatusUpdate) String() string            { return proto.CompactTextString(m) }
func (*PulseStatusUpdate) ProtoMessage()               {}
func (*PulseStatusUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *PulseStatusUpdate) GetStatus() []*PulseStatusUpdate_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type PulseStatusUpdate_Status struct {
	PulseID          *string      `protobuf:"bytes,1,opt,name=pulseID" json:"pulseID,omitempty"`
	PulseStatus      *PulseStatus `protobuf:"varint,2,opt,name=pulseStatus,enum=happiness.PulseStatus" json:"pulseStatus,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PulseStatusUpdate_Status) Reset()                    { *m = PulseStatusUpdate_Status{} }
func (m *PulseStatusUpdate_Status) String() string            { return proto.CompactTextString(m) }
func (*PulseStatusUpdate_Status) ProtoMessage()               {}
func (*PulseStatusUpdate_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46, 0} }

func (m *PulseStatusUpdate_Status) GetPulseID() string {
	if m != nil && m.PulseID != nil {
		return *m.PulseID
	}
	return ""
}

func (m *PulseStatusUpdate_Status) GetPulseStatus() PulseStatus {
	if m != nil && m.PulseStatus != nil {
		return *m.PulseStatus
	}
	return PulseStatus_PSUnknown
}

type ValidatedPulse struct {
	Pulse            *Pulse     `protobuf:"bytes,1,opt,name=pulse" json:"pulse,omitempty"`
	Beat             *PulseBeat `protobuf:"bytes,2,opt,name=beat" json:"beat,omitempty"`
	ProductID        *string    `protobuf:"bytes,3,opt,name=productID" json:"productID,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ValidatedPulse) Reset()                    { *m = ValidatedPulse{} }
func (m *ValidatedPulse) String() string            { return proto.CompactTextString(m) }
func (*ValidatedPulse) ProtoMessage()               {}
func (*ValidatedPulse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *ValidatedPulse) GetPulse() *Pulse {
	if m != nil {
		return m.Pulse
	}
	return nil
}

func (m *ValidatedPulse) GetBeat() *PulseBeat {
	if m != nil {
		return m.Beat
	}
	return nil
}

func (m *ValidatedPulse) GetProductID() string {
	if m != nil && m.ProductID != nil {
		return *m.ProductID
	}
	return ""
}

type SendPulse struct {
	ValidatedPulse   *ValidatedPulse `protobuf:"bytes,1,opt,name=validatedPulse" json:"validatedPulse,omitempty"`
	TransactionID    *string         `protobuf:"bytes,2,opt,name=transactionID" json:"transactionID,omitempty"`
	ReceiptData      []byte          `protobuf:"bytes,3,opt,name=receiptData" json:"receiptData,omitempty"`
	LocalizedPrice   *string         `protobuf:"bytes,4,opt,name=localizedPrice" json:"localizedPrice,omitempty"`
	Locale           *string         `protobuf:"bytes,5,opt,name=locale" json:"locale,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SendPulse) Reset()                    { *m = SendPulse{} }
func (m *SendPulse) String() string            { return proto.CompactTextString(m) }
func (*SendPulse) ProtoMessage()               {}
func (*SendPulse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *SendPulse) GetValidatedPulse() *ValidatedPulse {
	if m != nil {
		return m.ValidatedPulse
	}
	return nil
}

func (m *SendPulse) GetTransactionID() string {
	if m != nil && m.TransactionID != nil {
		return *m.TransactionID
	}
	return ""
}

func (m *SendPulse) GetReceiptData() []byte {
	if m != nil {
		return m.ReceiptData
	}
	return nil
}

func (m *SendPulse) GetLocalizedPrice() string {
	if m != nil && m.LocalizedPrice != nil {
		return *m.LocalizedPrice
	}
	return ""
}

func (m *SendPulse) GetLocale() string {
	if m != nil && m.Locale != nil {
		return *m.Locale
	}
	return ""
}

type PulseOptions struct {
	MinimumEmotionsToScore        *int32 `protobuf:"varint,1,opt,name=MinimumEmotionsToScore,def=3" json:"MinimumEmotionsToScore,omitempty"`
	MinimumMembersForPulse        *int32 `protobuf:"varint,2,opt,name=MinimumMembersForPulse,def=3" json:"MinimumMembersForPulse,omitempty"`
	MinimumResponsesForPulseStats *int32 `protobuf:"varint,3,opt,name=MinimumResponsesForPulseStats,def=3" json:"MinimumResponsesForPulseStats,omitempty"`
	XXX_unrecognized              []byte `json:"-"`
}

func (m *PulseOptions) Reset()                    { *m = PulseOptions{} }
func (m *PulseOptions) String() string            { return proto.CompactTextString(m) }
func (*PulseOptions) ProtoMessage()               {}
func (*PulseOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

const Default_PulseOptions_MinimumEmotionsToScore int32 = 3
const Default_PulseOptions_MinimumMembersForPulse int32 = 3
const Default_PulseOptions_MinimumResponsesForPulseStats int32 = 3

func (m *PulseOptions) GetMinimumEmotionsToScore() int32 {
	if m != nil && m.MinimumEmotionsToScore != nil {
		return *m.MinimumEmotionsToScore
	}
	return Default_PulseOptions_MinimumEmotionsToScore
}

func (m *PulseOptions) GetMinimumMembersForPulse() int32 {
	if m != nil && m.MinimumMembersForPulse != nil {
		return *m.MinimumMembersForPulse
	}
	return Default_PulseOptions_MinimumMembersForPulse
}

func (m *PulseOptions) GetMinimumResponsesForPulseStats() int32 {
	if m != nil && m.MinimumResponsesForPulseStats != nil {
		return *m.MinimumResponsesForPulseStats
	}
	return Default_PulseOptions_MinimumResponsesForPulseStats
}

type SessionRequest struct {
	UserID_Deprecated    *string     `protobuf:"bytes,1,opt,name=userID_Deprecated" json:"userID_Deprecated,omitempty"`
	Location             *Location   `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	DeviceInfo           *DeviceInfo `protobuf:"bytes,3,opt,name=deviceInfo" json:"deviceInfo,omitempty"`
	Profile              *Profile    `protobuf:"bytes,4,opt,name=profile" json:"profile,omitempty"`
	LastAppDataResetDate *Timestamp  `protobuf:"bytes,5,opt,name=lastAppDataResetDate" json:"lastAppDataResetDate,omitempty"`
	XXX_unrecognized     []byte      `json:"-"`
}

func (m *SessionRequest) Reset()                    { *m = SessionRequest{} }
func (m *SessionRequest) String() string            { return proto.CompactTextString(m) }
func (*SessionRequest) ProtoMessage()               {}
func (*SessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *SessionRequest) GetUserID_Deprecated() string {
	if m != nil && m.UserID_Deprecated != nil {
		return *m.UserID_Deprecated
	}
	return ""
}

func (m *SessionRequest) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *SessionRequest) GetDeviceInfo() *DeviceInfo {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

func (m *SessionRequest) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *SessionRequest) GetLastAppDataResetDate() *Timestamp {
	if m != nil {
		return m.LastAppDataResetDate
	}
	return nil
}

type AppOptions struct {
	// Types that are valid to be assigned to Options:
	//	*AppOptions_BeingHappyOptions
	//	*AppOptions_PulseOptions
	Options          isAppOptions_Options `protobuf_oneof:"Options"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *AppOptions) Reset()                    { *m = AppOptions{} }
func (m *AppOptions) String() string            { return proto.CompactTextString(m) }
func (*AppOptions) ProtoMessage()               {}
func (*AppOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

type isAppOptions_Options interface {
	isAppOptions_Options()
}

type AppOptions_BeingHappyOptions struct {
	BeingHappyOptions *BeingHappyOptions `protobuf:"bytes,1,opt,name=beingHappyOptions,oneof"`
}
type AppOptions_PulseOptions struct {
	PulseOptions *PulseOptions `protobuf:"bytes,2,opt,name=pulseOptions,oneof"`
}

func (*AppOptions_BeingHappyOptions) isAppOptions_Options() {}
func (*AppOptions_PulseOptions) isAppOptions_Options()      {}

func (m *AppOptions) GetOptions() isAppOptions_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *AppOptions) GetBeingHappyOptions() *BeingHappyOptions {
	if x, ok := m.GetOptions().(*AppOptions_BeingHappyOptions); ok {
		return x.BeingHappyOptions
	}
	return nil
}

func (m *AppOptions) GetPulseOptions() *PulseOptions {
	if x, ok := m.GetOptions().(*AppOptions_PulseOptions); ok {
		return x.PulseOptions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AppOptions) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AppOptions_OneofMarshaler, _AppOptions_OneofUnmarshaler, _AppOptions_OneofSizer, []interface{}{
		(*AppOptions_BeingHappyOptions)(nil),
		(*AppOptions_PulseOptions)(nil),
	}
}

func _AppOptions_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AppOptions)
	// Options
	switch x := m.Options.(type) {
	case *AppOptions_BeingHappyOptions:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BeingHappyOptions); err != nil {
			return err
		}
	case *AppOptions_PulseOptions:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PulseOptions); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AppOptions.Options has unexpected type %T", x)
	}
	return nil
}

func _AppOptions_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AppOptions)
	switch tag {
	case 1: // Options.beingHappyOptions
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BeingHappyOptions)
		err := b.DecodeMessage(msg)
		m.Options = &AppOptions_BeingHappyOptions{msg}
		return true, err
	case 2: // Options.pulseOptions
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PulseOptions)
		err := b.DecodeMessage(msg)
		m.Options = &AppOptions_PulseOptions{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AppOptions_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AppOptions)
	// Options
	switch x := m.Options.(type) {
	case *AppOptions_BeingHappyOptions:
		s := proto.Size(x.BeingHappyOptions)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AppOptions_PulseOptions:
		s := proto.Size(x.PulseOptions)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SessionResponse struct {
	UserID                  *string              `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	SessionToken            *string              `protobuf:"bytes,2,opt,name=sessionToken" json:"sessionToken,omitempty"`
	ServerURL               *string              `protobuf:"bytes,3,opt,name=serverURL" json:"serverURL,omitempty"`
	UserMessages            []*UserMessage       `protobuf:"bytes,5,rep,name=userMessages" json:"userMessages,omitempty"`
	UserProfile             *Profile             `protobuf:"bytes,6,opt,name=userProfile" json:"userProfile,omitempty"`
	ResetCache              *bool                `protobuf:"varint,4,opt,name=resetCache" json:"resetCache,omitempty"`
	ResetUserDefaults       *bool                `protobuf:"varint,7,opt,name=resetUserDefaults" json:"resetUserDefaults,omitempty"`
	ResetAllAppData         *bool                `protobuf:"varint,8,opt,name=resetAllAppData" json:"resetAllAppData,omitempty"`
	AppDeepLinks_Deprecated []string             `protobuf:"bytes,9,rep,name=appDeepLinks_Deprecated" json:"appDeepLinks_Deprecated,omitempty"`
	InviteRequest           *AcceptInviteRequest `protobuf:"bytes,10,opt,name=inviteRequest" json:"inviteRequest,omitempty"`
	AppOptions              *AppOptions          `protobuf:"bytes,11,opt,name=appOptions" json:"appOptions,omitempty"`
	XXX_unrecognized        []byte               `json:"-"`
}

func (m *SessionResponse) Reset()                    { *m = SessionResponse{} }
func (m *SessionResponse) String() string            { return proto.CompactTextString(m) }
func (*SessionResponse) ProtoMessage()               {}
func (*SessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *SessionResponse) GetUserID() string {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return ""
}

func (m *SessionResponse) GetSessionToken() string {
	if m != nil && m.SessionToken != nil {
		return *m.SessionToken
	}
	return ""
}

func (m *SessionResponse) GetServerURL() string {
	if m != nil && m.ServerURL != nil {
		return *m.ServerURL
	}
	return ""
}

func (m *SessionResponse) GetUserMessages() []*UserMessage {
	if m != nil {
		return m.UserMessages
	}
	return nil
}

func (m *SessionResponse) GetUserProfile() *Profile {
	if m != nil {
		return m.UserProfile
	}
	return nil
}

func (m *SessionResponse) GetResetCache() bool {
	if m != nil && m.ResetCache != nil {
		return *m.ResetCache
	}
	return false
}

func (m *SessionResponse) GetResetUserDefaults() bool {
	if m != nil && m.ResetUserDefaults != nil {
		return *m.ResetUserDefaults
	}
	return false
}

func (m *SessionResponse) GetResetAllAppData() bool {
	if m != nil && m.ResetAllAppData != nil {
		return *m.ResetAllAppData
	}
	return false
}

func (m *SessionResponse) GetAppDeepLinks_Deprecated() []string {
	if m != nil {
		return m.AppDeepLinks_Deprecated
	}
	return nil
}

func (m *SessionResponse) GetInviteRequest() *AcceptInviteRequest {
	if m != nil {
		return m.InviteRequest
	}
	return nil
}

func (m *SessionResponse) GetAppOptions() *AppOptions {
	if m != nil {
		return m.AppOptions
	}
	return nil
}

type ClientRequest struct {
	SessionToken *string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	// Types that are valid to be assigned to ClientRequestMessage:
	//	*ClientRequest_SessionRequest
	//	*ClientRequest_UserEventsRequest
	//	*ClientRequest_ProfileUpdate
	//	*ClientRequest_ProfileQuery
	//	*ClientRequest_FriendUpdate
	//	*ClientRequest_FriendRequest
	//	*ClientRequest_ConfirmationRequest
	//	*ClientRequest_MessageSendRequest
	//	*ClientRequest_MessageFetchRequest
	//	*ClientRequest_StoryFetchRequest
	//	*ClientRequest_DebugMessage
	//	*ClientRequest_ImageUpload
	//	*ClientRequest_AcceptInviteRequest
	//	*ClientRequest_PulsesForUser
	//	*ClientRequest_ProfilesFromContactInfo
	//	*ClientRequest_SendNewPulseBeat
	//	*ClientRequest_ScorePulseBeat
	//	*ClientRequest_PulseStatusUpdate
	//	*ClientRequest_FetchScoresRequest
	//	*ClientRequest_ValidatePulseRequest
	//	*ClientRequest_ScoreUpdate
	ClientRequestMessage isClientRequest_ClientRequestMessage `protobuf_oneof:"clientRequestMessage"`
	XXX_unrecognized     []byte                               `json:"-"`
}

func (m *ClientRequest) Reset()                    { *m = ClientRequest{} }
func (m *ClientRequest) String() string            { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()               {}
func (*ClientRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

type isClientRequest_ClientRequestMessage interface {
	isClientRequest_ClientRequestMessage()
}

type ClientRequest_SessionRequest struct {
	SessionRequest *SessionRequest `protobuf:"bytes,2,opt,name=sessionRequest,oneof"`
}
type ClientRequest_UserEventsRequest struct {
	UserEventsRequest *UserEventsRequest `protobuf:"bytes,3,opt,name=userEventsRequest,oneof"`
}
type ClientRequest_ProfileUpdate struct {
	ProfileUpdate *ProfileUpdate `protobuf:"bytes,4,opt,name=profileUpdate,oneof"`
}
type ClientRequest_ProfileQuery struct {
	ProfileQuery *ProfileQuery `protobuf:"bytes,5,opt,name=profileQuery,oneof"`
}
type ClientRequest_FriendUpdate struct {
	FriendUpdate *FriendUpdate `protobuf:"bytes,7,opt,name=friendUpdate,oneof"`
}
type ClientRequest_FriendRequest struct {
	FriendRequest *FriendRequest `protobuf:"bytes,8,opt,name=friendRequest,oneof"`
}
type ClientRequest_ConfirmationRequest struct {
	ConfirmationRequest *ConfirmationRequest `protobuf:"bytes,9,opt,name=confirmationRequest,oneof"`
}
type ClientRequest_MessageSendRequest struct {
	MessageSendRequest *MessageUpdate `protobuf:"bytes,10,opt,name=messageSendRequest,oneof"`
}
type ClientRequest_MessageFetchRequest struct {
	MessageFetchRequest *MessageUpdate `protobuf:"bytes,11,opt,name=messageFetchRequest,oneof"`
}
type ClientRequest_StoryFetchRequest struct {
	StoryFetchRequest *StoryUpdate `protobuf:"bytes,12,opt,name=storyFetchRequest,oneof"`
}
type ClientRequest_DebugMessage struct {
	DebugMessage *DebugMessage `protobuf:"bytes,13,opt,name=debugMessage,oneof"`
}
type ClientRequest_ImageUpload struct {
	ImageUpload *ImageUpload `protobuf:"bytes,14,opt,name=imageUpload,oneof"`
}
type ClientRequest_AcceptInviteRequest struct {
	AcceptInviteRequest *AcceptInviteRequest `protobuf:"bytes,15,opt,name=acceptInviteRequest,oneof"`
}
type ClientRequest_PulsesForUser struct {
	PulsesForUser *PulseUpdate `protobuf:"bytes,16,opt,name=pulsesForUser,oneof"`
}
type ClientRequest_ProfilesFromContactInfo struct {
	ProfilesFromContactInfo *ProfilesFromContactInfo `protobuf:"bytes,17,opt,name=profilesFromContactInfo,oneof"`
}
type ClientRequest_SendNewPulseBeat struct {
	SendNewPulseBeat *SendPulse `protobuf:"bytes,18,opt,name=sendNewPulseBeat,oneof"`
}
type ClientRequest_ScorePulseBeat struct {
	ScorePulseBeat *ScorePulseBeat `protobuf:"bytes,19,opt,name=scorePulseBeat,oneof"`
}
type ClientRequest_PulseStatusUpdate struct {
	PulseStatusUpdate *PulseStatusUpdate `protobuf:"bytes,20,opt,name=pulseStatusUpdate,oneof"`
}
type ClientRequest_FetchScoresRequest struct {
	FetchScoresRequest *FetchScoresRequest `protobuf:"bytes,21,opt,name=fetchScoresRequest,oneof"`
}
type ClientRequest_ValidatePulseRequest struct {
	ValidatePulseRequest *ValidatedPulse `protobuf:"bytes,22,opt,name=validatePulseRequest,oneof"`
}
type ClientRequest_ScoreUpdate struct {
	ScoreUpdate *ScoreUpdate `protobuf:"bytes,23,opt,name=scoreUpdate,oneof"`
}

func (*ClientRequest_SessionRequest) isClientRequest_ClientRequestMessage()          {}
func (*ClientRequest_UserEventsRequest) isClientRequest_ClientRequestMessage()       {}
func (*ClientRequest_ProfileUpdate) isClientRequest_ClientRequestMessage()           {}
func (*ClientRequest_ProfileQuery) isClientRequest_ClientRequestMessage()            {}
func (*ClientRequest_FriendUpdate) isClientRequest_ClientRequestMessage()            {}
func (*ClientRequest_FriendRequest) isClientRequest_ClientRequestMessage()           {}
func (*ClientRequest_ConfirmationRequest) isClientRequest_ClientRequestMessage()     {}
func (*ClientRequest_MessageSendRequest) isClientRequest_ClientRequestMessage()      {}
func (*ClientRequest_MessageFetchRequest) isClientRequest_ClientRequestMessage()     {}
func (*ClientRequest_StoryFetchRequest) isClientRequest_ClientRequestMessage()       {}
func (*ClientRequest_DebugMessage) isClientRequest_ClientRequestMessage()            {}
func (*ClientRequest_ImageUpload) isClientRequest_ClientRequestMessage()             {}
func (*ClientRequest_AcceptInviteRequest) isClientRequest_ClientRequestMessage()     {}
func (*ClientRequest_PulsesForUser) isClientRequest_ClientRequestMessage()           {}
func (*ClientRequest_ProfilesFromContactInfo) isClientRequest_ClientRequestMessage() {}
func (*ClientRequest_SendNewPulseBeat) isClientRequest_ClientRequestMessage()        {}
func (*ClientRequest_ScorePulseBeat) isClientRequest_ClientRequestMessage()          {}
func (*ClientRequest_PulseStatusUpdate) isClientRequest_ClientRequestMessage()       {}
func (*ClientRequest_FetchScoresRequest) isClientRequest_ClientRequestMessage()      {}
func (*ClientRequest_ValidatePulseRequest) isClientRequest_ClientRequestMessage()    {}
func (*ClientRequest_ScoreUpdate) isClientRequest_ClientRequestMessage()             {}

func (m *ClientRequest) GetClientRequestMessage() isClientRequest_ClientRequestMessage {
	if m != nil {
		return m.ClientRequestMessage
	}
	return nil
}

func (m *ClientRequest) GetSessionToken() string {
	if m != nil && m.SessionToken != nil {
		return *m.SessionToken
	}
	return ""
}

func (m *ClientRequest) GetSessionRequest() *SessionRequest {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_SessionRequest); ok {
		return x.SessionRequest
	}
	return nil
}

func (m *ClientRequest) GetUserEventsRequest() *UserEventsRequest {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_UserEventsRequest); ok {
		return x.UserEventsRequest
	}
	return nil
}

func (m *ClientRequest) GetProfileUpdate() *ProfileUpdate {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_ProfileUpdate); ok {
		return x.ProfileUpdate
	}
	return nil
}

func (m *ClientRequest) GetProfileQuery() *ProfileQuery {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_ProfileQuery); ok {
		return x.ProfileQuery
	}
	return nil
}

func (m *ClientRequest) GetFriendUpdate() *FriendUpdate {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_FriendUpdate); ok {
		return x.FriendUpdate
	}
	return nil
}

func (m *ClientRequest) GetFriendRequest() *FriendRequest {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_FriendRequest); ok {
		return x.FriendRequest
	}
	return nil
}

func (m *ClientRequest) GetConfirmationRequest() *ConfirmationRequest {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_ConfirmationRequest); ok {
		return x.ConfirmationRequest
	}
	return nil
}

func (m *ClientRequest) GetMessageSendRequest() *MessageUpdate {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_MessageSendRequest); ok {
		return x.MessageSendRequest
	}
	return nil
}

func (m *ClientRequest) GetMessageFetchRequest() *MessageUpdate {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_MessageFetchRequest); ok {
		return x.MessageFetchRequest
	}
	return nil
}

func (m *ClientRequest) GetStoryFetchRequest() *StoryUpdate {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_StoryFetchRequest); ok {
		return x.StoryFetchRequest
	}
	return nil
}

func (m *ClientRequest) GetDebugMessage() *DebugMessage {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_DebugMessage); ok {
		return x.DebugMessage
	}
	return nil
}

func (m *ClientRequest) GetImageUpload() *ImageUpload {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_ImageUpload); ok {
		return x.ImageUpload
	}
	return nil
}

func (m *ClientRequest) GetAcceptInviteRequest() *AcceptInviteRequest {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_AcceptInviteRequest); ok {
		return x.AcceptInviteRequest
	}
	return nil
}

func (m *ClientRequest) GetPulsesForUser() *PulseUpdate {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_PulsesForUser); ok {
		return x.PulsesForUser
	}
	return nil
}

func (m *ClientRequest) GetProfilesFromContactInfo() *ProfilesFromContactInfo {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_ProfilesFromContactInfo); ok {
		return x.ProfilesFromContactInfo
	}
	return nil
}

func (m *ClientRequest) GetSendNewPulseBeat() *SendPulse {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_SendNewPulseBeat); ok {
		return x.SendNewPulseBeat
	}
	return nil
}

func (m *ClientRequest) GetScorePulseBeat() *ScorePulseBeat {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_ScorePulseBeat); ok {
		return x.ScorePulseBeat
	}
	return nil
}

func (m *ClientRequest) GetPulseStatusUpdate() *PulseStatusUpdate {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_PulseStatusUpdate); ok {
		return x.PulseStatusUpdate
	}
	return nil
}

func (m *ClientRequest) GetFetchScoresRequest() *FetchScoresRequest {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_FetchScoresRequest); ok {
		return x.FetchScoresRequest
	}
	return nil
}

func (m *ClientRequest) GetValidatePulseRequest() *ValidatedPulse {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_ValidatePulseRequest); ok {
		return x.ValidatePulseRequest
	}
	return nil
}

func (m *ClientRequest) GetScoreUpdate() *ScoreUpdate {
	if x, ok := m.GetClientRequestMessage().(*ClientRequest_ScoreUpdate); ok {
		return x.ScoreUpdate
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ClientRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ClientRequest_OneofMarshaler, _ClientRequest_OneofUnmarshaler, _ClientRequest_OneofSizer, []interface{}{
		(*ClientRequest_SessionRequest)(nil),
		(*ClientRequest_UserEventsRequest)(nil),
		(*ClientRequest_ProfileUpdate)(nil),
		(*ClientRequest_ProfileQuery)(nil),
		(*ClientRequest_FriendUpdate)(nil),
		(*ClientRequest_FriendRequest)(nil),
		(*ClientRequest_ConfirmationRequest)(nil),
		(*ClientRequest_MessageSendRequest)(nil),
		(*ClientRequest_MessageFetchRequest)(nil),
		(*ClientRequest_StoryFetchRequest)(nil),
		(*ClientRequest_DebugMessage)(nil),
		(*ClientRequest_ImageUpload)(nil),
		(*ClientRequest_AcceptInviteRequest)(nil),
		(*ClientRequest_PulsesForUser)(nil),
		(*ClientRequest_ProfilesFromContactInfo)(nil),
		(*ClientRequest_SendNewPulseBeat)(nil),
		(*ClientRequest_ScorePulseBeat)(nil),
		(*ClientRequest_PulseStatusUpdate)(nil),
		(*ClientRequest_FetchScoresRequest)(nil),
		(*ClientRequest_ValidatePulseRequest)(nil),
		(*ClientRequest_ScoreUpdate)(nil),
	}
}

func _ClientRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ClientRequest)
	// clientRequestMessage
	switch x := m.ClientRequestMessage.(type) {
	case *ClientRequest_SessionRequest:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionRequest); err != nil {
			return err
		}
	case *ClientRequest_UserEventsRequest:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserEventsRequest); err != nil {
			return err
		}
	case *ClientRequest_ProfileUpdate:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProfileUpdate); err != nil {
			return err
		}
	case *ClientRequest_ProfileQuery:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProfileQuery); err != nil {
			return err
		}
	case *ClientRequest_FriendUpdate:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FriendUpdate); err != nil {
			return err
		}
	case *ClientRequest_FriendRequest:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FriendRequest); err != nil {
			return err
		}
	case *ClientRequest_ConfirmationRequest:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConfirmationRequest); err != nil {
			return err
		}
	case *ClientRequest_MessageSendRequest:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MessageSendRequest); err != nil {
			return err
		}
	case *ClientRequest_MessageFetchRequest:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MessageFetchRequest); err != nil {
			return err
		}
	case *ClientRequest_StoryFetchRequest:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StoryFetchRequest); err != nil {
			return err
		}
	case *ClientRequest_DebugMessage:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DebugMessage); err != nil {
			return err
		}
	case *ClientRequest_ImageUpload:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImageUpload); err != nil {
			return err
		}
	case *ClientRequest_AcceptInviteRequest:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AcceptInviteRequest); err != nil {
			return err
		}
	case *ClientRequest_PulsesForUser:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PulsesForUser); err != nil {
			return err
		}
	case *ClientRequest_ProfilesFromContactInfo:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProfilesFromContactInfo); err != nil {
			return err
		}
	case *ClientRequest_SendNewPulseBeat:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SendNewPulseBeat); err != nil {
			return err
		}
	case *ClientRequest_ScorePulseBeat:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ScorePulseBeat); err != nil {
			return err
		}
	case *ClientRequest_PulseStatusUpdate:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PulseStatusUpdate); err != nil {
			return err
		}
	case *ClientRequest_FetchScoresRequest:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FetchScoresRequest); err != nil {
			return err
		}
	case *ClientRequest_ValidatePulseRequest:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ValidatePulseRequest); err != nil {
			return err
		}
	case *ClientRequest_ScoreUpdate:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ScoreUpdate); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ClientRequest.ClientRequestMessage has unexpected type %T", x)
	}
	return nil
}

func _ClientRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ClientRequest)
	switch tag {
	case 2: // clientRequestMessage.sessionRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionRequest)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_SessionRequest{msg}
		return true, err
	case 3: // clientRequestMessage.userEventsRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserEventsRequest)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_UserEventsRequest{msg}
		return true, err
	case 4: // clientRequestMessage.profileUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProfileUpdate)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_ProfileUpdate{msg}
		return true, err
	case 5: // clientRequestMessage.profileQuery
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProfileQuery)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_ProfileQuery{msg}
		return true, err
	case 7: // clientRequestMessage.friendUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FriendUpdate)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_FriendUpdate{msg}
		return true, err
	case 8: // clientRequestMessage.friendRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FriendRequest)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_FriendRequest{msg}
		return true, err
	case 9: // clientRequestMessage.confirmationRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConfirmationRequest)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_ConfirmationRequest{msg}
		return true, err
	case 10: // clientRequestMessage.messageSendRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MessageUpdate)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_MessageSendRequest{msg}
		return true, err
	case 11: // clientRequestMessage.messageFetchRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MessageUpdate)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_MessageFetchRequest{msg}
		return true, err
	case 12: // clientRequestMessage.storyFetchRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StoryUpdate)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_StoryFetchRequest{msg}
		return true, err
	case 13: // clientRequestMessage.debugMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DebugMessage)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_DebugMessage{msg}
		return true, err
	case 14: // clientRequestMessage.imageUpload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ImageUpload)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_ImageUpload{msg}
		return true, err
	case 15: // clientRequestMessage.acceptInviteRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AcceptInviteRequest)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_AcceptInviteRequest{msg}
		return true, err
	case 16: // clientRequestMessage.pulsesForUser
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PulseUpdate)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_PulsesForUser{msg}
		return true, err
	case 17: // clientRequestMessage.profilesFromContactInfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProfilesFromContactInfo)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_ProfilesFromContactInfo{msg}
		return true, err
	case 18: // clientRequestMessage.sendNewPulseBeat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SendPulse)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_SendNewPulseBeat{msg}
		return true, err
	case 19: // clientRequestMessage.scorePulseBeat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScorePulseBeat)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_ScorePulseBeat{msg}
		return true, err
	case 20: // clientRequestMessage.pulseStatusUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PulseStatusUpdate)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_PulseStatusUpdate{msg}
		return true, err
	case 21: // clientRequestMessage.fetchScoresRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FetchScoresRequest)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_FetchScoresRequest{msg}
		return true, err
	case 22: // clientRequestMessage.validatePulseRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ValidatedPulse)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_ValidatePulseRequest{msg}
		return true, err
	case 23: // clientRequestMessage.scoreUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScoreUpdate)
		err := b.DecodeMessage(msg)
		m.ClientRequestMessage = &ClientRequest_ScoreUpdate{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ClientRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ClientRequest)
	// clientRequestMessage
	switch x := m.ClientRequestMessage.(type) {
	case *ClientRequest_SessionRequest:
		s := proto.Size(x.SessionRequest)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_UserEventsRequest:
		s := proto.Size(x.UserEventsRequest)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_ProfileUpdate:
		s := proto.Size(x.ProfileUpdate)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_ProfileQuery:
		s := proto.Size(x.ProfileQuery)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_FriendUpdate:
		s := proto.Size(x.FriendUpdate)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_FriendRequest:
		s := proto.Size(x.FriendRequest)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_ConfirmationRequest:
		s := proto.Size(x.ConfirmationRequest)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_MessageSendRequest:
		s := proto.Size(x.MessageSendRequest)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_MessageFetchRequest:
		s := proto.Size(x.MessageFetchRequest)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_StoryFetchRequest:
		s := proto.Size(x.StoryFetchRequest)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_DebugMessage:
		s := proto.Size(x.DebugMessage)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_ImageUpload:
		s := proto.Size(x.ImageUpload)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_AcceptInviteRequest:
		s := proto.Size(x.AcceptInviteRequest)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_PulsesForUser:
		s := proto.Size(x.PulsesForUser)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_ProfilesFromContactInfo:
		s := proto.Size(x.ProfilesFromContactInfo)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_SendNewPulseBeat:
		s := proto.Size(x.SendNewPulseBeat)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_ScorePulseBeat:
		s := proto.Size(x.ScorePulseBeat)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_PulseStatusUpdate:
		s := proto.Size(x.PulseStatusUpdate)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_FetchScoresRequest:
		s := proto.Size(x.FetchScoresRequest)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_ValidatePulseRequest:
		s := proto.Size(x.ValidatePulseRequest)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientRequest_ScoreUpdate:
		s := proto.Size(x.ScoreUpdate)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ServerResponse struct {
	ResponseCode    *ResponseCode `protobuf:"varint,1,req,name=responseCode,enum=happiness.ResponseCode" json:"responseCode,omitempty"`
	ResponseMessage *string       `protobuf:"bytes,2,opt,name=responseMessage" json:"responseMessage,omitempty"`
	// Types that are valid to be assigned to Response:
	//	*ServerResponse_SessionResponse
	//	*ServerResponse_UserEventResponse
	//	*ServerResponse_ProfileUpdate
	//	*ServerResponse_ProfileQuery
	//	*ServerResponse_FriendResponse
	//	*ServerResponse_MessageResponse
	//	*ServerResponse_StoryUpdate
	//	*ServerResponse_DebugMessage
	//	*ServerResponse_ImageUploadReply
	//	*ServerResponse_ConfirmationRequest
	//	*ServerResponse_AcceptInviteResponse
	//	*ServerResponse_PulseUpdate
	//	*ServerResponse_ValidatePulseResponse
	//	*ServerResponse_ScoreUpdate
	Response         isServerResponse_Response `protobuf_oneof:"response"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *ServerResponse) Reset()                    { *m = ServerResponse{} }
func (m *ServerResponse) String() string            { return proto.CompactTextString(m) }
func (*ServerResponse) ProtoMessage()               {}
func (*ServerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

type isServerResponse_Response interface {
	isServerResponse_Response()
}

type ServerResponse_SessionResponse struct {
	SessionResponse *SessionResponse `protobuf:"bytes,3,opt,name=sessionResponse,oneof"`
}
type ServerResponse_UserEventResponse struct {
	UserEventResponse *UserEventsResponse `protobuf:"bytes,4,opt,name=userEventResponse,oneof"`
}
type ServerResponse_ProfileUpdate struct {
	ProfileUpdate *ProfileUpdate `protobuf:"bytes,5,opt,name=profileUpdate,oneof"`
}
type ServerResponse_ProfileQuery struct {
	ProfileQuery *ProfileQuery `protobuf:"bytes,6,opt,name=profileQuery,oneof"`
}
type ServerResponse_FriendResponse struct {
	FriendResponse *FriendResponse `protobuf:"bytes,9,opt,name=friendResponse,oneof"`
}
type ServerResponse_MessageResponse struct {
	MessageResponse *MessageUpdate `protobuf:"bytes,10,opt,name=messageResponse,oneof"`
}
type ServerResponse_StoryUpdate struct {
	StoryUpdate *StoryUpdate `protobuf:"bytes,11,opt,name=storyUpdate,oneof"`
}
type ServerResponse_DebugMessage struct {
	DebugMessage *DebugMessage `protobuf:"bytes,12,opt,name=debugMessage,oneof"`
}
type ServerResponse_ImageUploadReply struct {
	ImageUploadReply *ImageUpload `protobuf:"bytes,13,opt,name=imageUploadReply,oneof"`
}
type ServerResponse_ConfirmationRequest struct {
	ConfirmationRequest *ConfirmationRequest `protobuf:"bytes,14,opt,name=confirmationRequest,oneof"`
}
type ServerResponse_AcceptInviteResponse struct {
	AcceptInviteResponse *AcceptInviteResponse `protobuf:"bytes,15,opt,name=acceptInviteResponse,oneof"`
}
type ServerResponse_PulseUpdate struct {
	PulseUpdate *PulseUpdate `protobuf:"bytes,16,opt,name=pulseUpdate,oneof"`
}
type ServerResponse_ValidatePulseResponse struct {
	ValidatePulseResponse *ValidatedPulse `protobuf:"bytes,18,opt,name=validatePulseResponse,oneof"`
}
type ServerResponse_ScoreUpdate struct {
	ScoreUpdate *ScoreUpdate `protobuf:"bytes,19,opt,name=scoreUpdate,oneof"`
}

func (*ServerResponse_SessionResponse) isServerResponse_Response()       {}
func (*ServerResponse_UserEventResponse) isServerResponse_Response()     {}
func (*ServerResponse_ProfileUpdate) isServerResponse_Response()         {}
func (*ServerResponse_ProfileQuery) isServerResponse_Response()          {}
func (*ServerResponse_FriendResponse) isServerResponse_Response()        {}
func (*ServerResponse_MessageResponse) isServerResponse_Response()       {}
func (*ServerResponse_StoryUpdate) isServerResponse_Response()           {}
func (*ServerResponse_DebugMessage) isServerResponse_Response()          {}
func (*ServerResponse_ImageUploadReply) isServerResponse_Response()      {}
func (*ServerResponse_ConfirmationRequest) isServerResponse_Response()   {}
func (*ServerResponse_AcceptInviteResponse) isServerResponse_Response()  {}
func (*ServerResponse_PulseUpdate) isServerResponse_Response()           {}
func (*ServerResponse_ValidatePulseResponse) isServerResponse_Response() {}
func (*ServerResponse_ScoreUpdate) isServerResponse_Response()           {}

func (m *ServerResponse) GetResponse() isServerResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ServerResponse) GetResponseCode() ResponseCode {
	if m != nil && m.ResponseCode != nil {
		return *m.ResponseCode
	}
	return ResponseCode_RCSuccess
}

func (m *ServerResponse) GetResponseMessage() string {
	if m != nil && m.ResponseMessage != nil {
		return *m.ResponseMessage
	}
	return ""
}

func (m *ServerResponse) GetSessionResponse() *SessionResponse {
	if x, ok := m.GetResponse().(*ServerResponse_SessionResponse); ok {
		return x.SessionResponse
	}
	return nil
}

func (m *ServerResponse) GetUserEventResponse() *UserEventsResponse {
	if x, ok := m.GetResponse().(*ServerResponse_UserEventResponse); ok {
		return x.UserEventResponse
	}
	return nil
}

func (m *ServerResponse) GetProfileUpdate() *ProfileUpdate {
	if x, ok := m.GetResponse().(*ServerResponse_ProfileUpdate); ok {
		return x.ProfileUpdate
	}
	return nil
}

func (m *ServerResponse) GetProfileQuery() *ProfileQuery {
	if x, ok := m.GetResponse().(*ServerResponse_ProfileQuery); ok {
		return x.ProfileQuery
	}
	return nil
}

func (m *ServerResponse) GetFriendResponse() *FriendResponse {
	if x, ok := m.GetResponse().(*ServerResponse_FriendResponse); ok {
		return x.FriendResponse
	}
	return nil
}

func (m *ServerResponse) GetMessageResponse() *MessageUpdate {
	if x, ok := m.GetResponse().(*ServerResponse_MessageResponse); ok {
		return x.MessageResponse
	}
	return nil
}

func (m *ServerResponse) GetStoryUpdate() *StoryUpdate {
	if x, ok := m.GetResponse().(*ServerResponse_StoryUpdate); ok {
		return x.StoryUpdate
	}
	return nil
}

func (m *ServerResponse) GetDebugMessage() *DebugMessage {
	if x, ok := m.GetResponse().(*ServerResponse_DebugMessage); ok {
		return x.DebugMessage
	}
	return nil
}

func (m *ServerResponse) GetImageUploadReply() *ImageUpload {
	if x, ok := m.GetResponse().(*ServerResponse_ImageUploadReply); ok {
		return x.ImageUploadReply
	}
	return nil
}

func (m *ServerResponse) GetConfirmationRequest() *ConfirmationRequest {
	if x, ok := m.GetResponse().(*ServerResponse_ConfirmationRequest); ok {
		return x.ConfirmationRequest
	}
	return nil
}

func (m *ServerResponse) GetAcceptInviteResponse() *AcceptInviteResponse {
	if x, ok := m.GetResponse().(*ServerResponse_AcceptInviteResponse); ok {
		return x.AcceptInviteResponse
	}
	return nil
}

func (m *ServerResponse) GetPulseUpdate() *PulseUpdate {
	if x, ok := m.GetResponse().(*ServerResponse_PulseUpdate); ok {
		return x.PulseUpdate
	}
	return nil
}

func (m *ServerResponse) GetValidatePulseResponse() *ValidatedPulse {
	if x, ok := m.GetResponse().(*ServerResponse_ValidatePulseResponse); ok {
		return x.ValidatePulseResponse
	}
	return nil
}

func (m *ServerResponse) GetScoreUpdate() *ScoreUpdate {
	if x, ok := m.GetResponse().(*ServerResponse_ScoreUpdate); ok {
		return x.ScoreUpdate
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ServerResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ServerResponse_OneofMarshaler, _ServerResponse_OneofUnmarshaler, _ServerResponse_OneofSizer, []interface{}{
		(*ServerResponse_SessionResponse)(nil),
		(*ServerResponse_UserEventResponse)(nil),
		(*ServerResponse_ProfileUpdate)(nil),
		(*ServerResponse_ProfileQuery)(nil),
		(*ServerResponse_FriendResponse)(nil),
		(*ServerResponse_MessageResponse)(nil),
		(*ServerResponse_StoryUpdate)(nil),
		(*ServerResponse_DebugMessage)(nil),
		(*ServerResponse_ImageUploadReply)(nil),
		(*ServerResponse_ConfirmationRequest)(nil),
		(*ServerResponse_AcceptInviteResponse)(nil),
		(*ServerResponse_PulseUpdate)(nil),
		(*ServerResponse_ValidatePulseResponse)(nil),
		(*ServerResponse_ScoreUpdate)(nil),
	}
}

func _ServerResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ServerResponse)
	// response
	switch x := m.Response.(type) {
	case *ServerResponse_SessionResponse:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionResponse); err != nil {
			return err
		}
	case *ServerResponse_UserEventResponse:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UserEventResponse); err != nil {
			return err
		}
	case *ServerResponse_ProfileUpdate:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProfileUpdate); err != nil {
			return err
		}
	case *ServerResponse_ProfileQuery:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProfileQuery); err != nil {
			return err
		}
	case *ServerResponse_FriendResponse:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FriendResponse); err != nil {
			return err
		}
	case *ServerResponse_MessageResponse:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MessageResponse); err != nil {
			return err
		}
	case *ServerResponse_StoryUpdate:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StoryUpdate); err != nil {
			return err
		}
	case *ServerResponse_DebugMessage:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DebugMessage); err != nil {
			return err
		}
	case *ServerResponse_ImageUploadReply:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImageUploadReply); err != nil {
			return err
		}
	case *ServerResponse_ConfirmationRequest:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConfirmationRequest); err != nil {
			return err
		}
	case *ServerResponse_AcceptInviteResponse:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AcceptInviteResponse); err != nil {
			return err
		}
	case *ServerResponse_PulseUpdate:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PulseUpdate); err != nil {
			return err
		}
	case *ServerResponse_ValidatePulseResponse:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ValidatePulseResponse); err != nil {
			return err
		}
	case *ServerResponse_ScoreUpdate:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ScoreUpdate); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ServerResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _ServerResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ServerResponse)
	switch tag {
	case 3: // response.sessionResponse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ServerResponse_SessionResponse{msg}
		return true, err
	case 4: // response.userEventResponse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UserEventsResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ServerResponse_UserEventResponse{msg}
		return true, err
	case 5: // response.profileUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProfileUpdate)
		err := b.DecodeMessage(msg)
		m.Response = &ServerResponse_ProfileUpdate{msg}
		return true, err
	case 6: // response.profileQuery
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProfileQuery)
		err := b.DecodeMessage(msg)
		m.Response = &ServerResponse_ProfileQuery{msg}
		return true, err
	case 9: // response.friendResponse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FriendResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ServerResponse_FriendResponse{msg}
		return true, err
	case 10: // response.messageResponse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MessageUpdate)
		err := b.DecodeMessage(msg)
		m.Response = &ServerResponse_MessageResponse{msg}
		return true, err
	case 11: // response.storyUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StoryUpdate)
		err := b.DecodeMessage(msg)
		m.Response = &ServerResponse_StoryUpdate{msg}
		return true, err
	case 12: // response.debugMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DebugMessage)
		err := b.DecodeMessage(msg)
		m.Response = &ServerResponse_DebugMessage{msg}
		return true, err
	case 13: // response.imageUploadReply
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ImageUpload)
		err := b.DecodeMessage(msg)
		m.Response = &ServerResponse_ImageUploadReply{msg}
		return true, err
	case 14: // response.confirmationRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConfirmationRequest)
		err := b.DecodeMessage(msg)
		m.Response = &ServerResponse_ConfirmationRequest{msg}
		return true, err
	case 15: // response.acceptInviteResponse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AcceptInviteResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ServerResponse_AcceptInviteResponse{msg}
		return true, err
	case 16: // response.pulseUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PulseUpdate)
		err := b.DecodeMessage(msg)
		m.Response = &ServerResponse_PulseUpdate{msg}
		return true, err
	case 18: // response.validatePulseResponse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ValidatedPulse)
		err := b.DecodeMessage(msg)
		m.Response = &ServerResponse_ValidatePulseResponse{msg}
		return true, err
	case 19: // response.scoreUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScoreUpdate)
		err := b.DecodeMessage(msg)
		m.Response = &ServerResponse_ScoreUpdate{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ServerResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ServerResponse)
	// response
	switch x := m.Response.(type) {
	case *ServerResponse_SessionResponse:
		s := proto.Size(x.SessionResponse)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerResponse_UserEventResponse:
		s := proto.Size(x.UserEventResponse)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerResponse_ProfileUpdate:
		s := proto.Size(x.ProfileUpdate)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerResponse_ProfileQuery:
		s := proto.Size(x.ProfileQuery)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerResponse_FriendResponse:
		s := proto.Size(x.FriendResponse)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerResponse_MessageResponse:
		s := proto.Size(x.MessageResponse)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerResponse_StoryUpdate:
		s := proto.Size(x.StoryUpdate)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerResponse_DebugMessage:
		s := proto.Size(x.DebugMessage)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerResponse_ImageUploadReply:
		s := proto.Size(x.ImageUploadReply)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerResponse_ConfirmationRequest:
		s := proto.Size(x.ConfirmationRequest)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerResponse_AcceptInviteResponse:
		s := proto.Size(x.AcceptInviteResponse)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerResponse_PulseUpdate:
		s := proto.Size(x.PulseUpdate)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerResponse_ValidatePulseResponse:
		s := proto.Size(x.ValidatePulseResponse)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerResponse_ScoreUpdate:
		s := proto.Size(x.ScoreUpdate)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Globals)(nil), "happiness.Globals")
	proto.RegisterType((*Timestamp)(nil), "happiness.Timestamp")
	proto.RegisterType((*Timespan)(nil), "happiness.Timespan")
	proto.RegisterType((*Location)(nil), "happiness.Location")
	proto.RegisterType((*Size)(nil), "happiness.Size")
	proto.RegisterType((*ColorRGB256)(nil), "happiness.ColorRGB256")
	proto.RegisterType((*KeyValue)(nil), "happiness.KeyValue")
	proto.RegisterType((*DeviceInfo)(nil), "happiness.DeviceInfo")
	proto.RegisterType((*UserEvent)(nil), "happiness.UserEvent")
	proto.RegisterType((*UserEventsRequest)(nil), "happiness.UserEventsRequest")
	proto.RegisterType((*UserEventsResponse)(nil), "happiness.UserEventsResponse")
	proto.RegisterType((*Weather)(nil), "happiness.Weather")
	proto.RegisterType((*UserResponse)(nil), "happiness.UserResponse")
	proto.RegisterType((*ScoreComponent)(nil), "happiness.ScoreComponent")
	proto.RegisterType((*Score)(nil), "happiness.Score")
	proto.RegisterType((*SocialIdentity)(nil), "happiness.SocialIdentity")
	proto.RegisterType((*ContactInfo)(nil), "happiness.ContactInfo")
	proto.RegisterType((*ScoreSummary)(nil), "happiness.ScoreSummary")
	proto.RegisterType((*WeatherSummary)(nil), "happiness.WeatherSummary")
	proto.RegisterType((*Profile)(nil), "happiness.Profile")
	proto.RegisterType((*ImageData)(nil), "happiness.ImageData")
	proto.RegisterType((*ImageUpload)(nil), "happiness.ImageUpload")
	proto.RegisterType((*ProfileUpdate)(nil), "happiness.ProfileUpdate")
	proto.RegisterType((*ProfileQuery)(nil), "happiness.ProfileQuery")
	proto.RegisterType((*Friend)(nil), "happiness.Friend")
	proto.RegisterType((*FriendUpdate)(nil), "happiness.FriendUpdate")
	proto.RegisterType((*FriendRequest)(nil), "happiness.FriendRequest")
	proto.RegisterType((*FriendResponse)(nil), "happiness.FriendResponse")
	proto.RegisterType((*ConfirmationRequest)(nil), "happiness.ConfirmationRequest")
	proto.RegisterType((*Message)(nil), "happiness.Message")
	proto.RegisterType((*MessageUpdate)(nil), "happiness.MessageUpdate")
	proto.RegisterType((*Story)(nil), "happiness.Story")
	proto.RegisterType((*StoryUpdate)(nil), "happiness.StoryUpdate")
	proto.RegisterType((*DebugMessage)(nil), "happiness.DebugMessage")
	proto.RegisterType((*AcceptInviteRequest)(nil), "happiness.AcceptInviteRequest")
	proto.RegisterType((*AcceptInviteResponse)(nil), "happiness.AcceptInviteResponse")
	proto.RegisterType((*FetchScoresRequest)(nil), "happiness.FetchScoresRequest")
	proto.RegisterType((*ScoreUpdate)(nil), "happiness.ScoreUpdate")
	proto.RegisterType((*UserMessage)(nil), "happiness.UserMessage")
	proto.RegisterType((*BeingHappyOptions)(nil), "happiness.BeingHappyOptions")
	proto.RegisterType((*PulseMember)(nil), "happiness.PulseMember")
	proto.RegisterType((*PulseBeat)(nil), "happiness.PulseBeat")
	proto.RegisterType((*Pulse)(nil), "happiness.Pulse")
	proto.RegisterType((*PulseUpdate)(nil), "happiness.PulseUpdate")
	proto.RegisterType((*ProfilesFromContactInfo)(nil), "happiness.ProfilesFromContactInfo")
	proto.RegisterType((*ScorePulseBeat)(nil), "happiness.ScorePulseBeat")
	proto.RegisterType((*PulseStatusUpdate)(nil), "happiness.PulseStatusUpdate")
	proto.RegisterType((*PulseStatusUpdate_Status)(nil), "happiness.PulseStatusUpdate.Status")
	proto.RegisterType((*ValidatedPulse)(nil), "happiness.ValidatedPulse")
	proto.RegisterType((*SendPulse)(nil), "happiness.SendPulse")
	proto.RegisterType((*PulseOptions)(nil), "happiness.PulseOptions")
	proto.RegisterType((*SessionRequest)(nil), "happiness.SessionRequest")
	proto.RegisterType((*AppOptions)(nil), "happiness.AppOptions")
	proto.RegisterType((*SessionResponse)(nil), "happiness.SessionResponse")
	proto.RegisterType((*ClientRequest)(nil), "happiness.ClientRequest")
	proto.RegisterType((*ServerResponse)(nil), "happiness.ServerResponse")
	proto.RegisterEnum("happiness.UserStatus", UserStatus_name, UserStatus_value)
	proto.RegisterEnum("happiness.Gender", Gender_name, Gender_value)
	proto.RegisterEnum("happiness.PlatformType", PlatformType_name, PlatformType_value)
	proto.RegisterEnum("happiness.WeatherType", WeatherType_name, WeatherType_value)
	proto.RegisterEnum("happiness.PrecipitationType", PrecipitationType_name, PrecipitationType_value)
	proto.RegisterEnum("happiness.ContactType", ContactType_name, ContactType_value)
	proto.RegisterEnum("happiness.ImageContent", ImageContent_name, ImageContent_value)
	proto.RegisterEnum("happiness.FriendStatus", FriendStatus_name, FriendStatus_value)
	proto.RegisterEnum("happiness.FriendResponseType", FriendResponseType_name, FriendResponseType_value)
	proto.RegisterEnum("happiness.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("happiness.MessageStatus", MessageStatus_name, MessageStatus_value)
	proto.RegisterEnum("happiness.StoryType", StoryType_name, StoryType_value)
	proto.RegisterEnum("happiness.MessageCue", MessageCue_name, MessageCue_value)
	proto.RegisterEnum("happiness.PulseStatus", PulseStatus_name, PulseStatus_value)
	proto.RegisterEnum("happiness.PulseBeatState", PulseBeatState_name, PulseBeatState_value)
	proto.RegisterEnum("happiness.ResponseCode", ResponseCode_name, ResponseCode_value)
}

var fileDescriptor0 = []byte{
	// 4365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x5a, 0xcd, 0x6f, 0x1b, 0x49,
	0x76, 0x9f, 0xa6, 0x48, 0x89, 0x2c, 0x52, 0x14, 0xd5, 0x92, 0x2d, 0xad, 0x77, 0xe7, 0xab, 0x67,
	0x67, 0xd7, 0xa3, 0x19, 0x79, 0x6c, 0xca, 0x92, 0x6d, 0x2d, 0x76, 0x36, 0x22, 0x25, 0xda, 0xda,
	0x1d, 0xda, 0x5a, 0x91, 0xb2, 0x80, 0x20, 0xc1, 0xa0, 0xc5, 0x2e, 0x89, 0xbd, 0x6e, 0xb2, 0x7b,
	0xbb, 0x9b, 0xd2, 0x72, 0x80, 0xe4, 0x92, 0x4b, 0x4e, 0x41, 0x90, 0x00, 0x41, 0x72, 0x5f, 0x04,
	0xc8, 0x39, 0x48, 0x80, 0x04, 0x08, 0x02, 0x04, 0xc8, 0x25, 0xc7, 0x09, 0x90, 0x73, 0xce, 0x41,
	0x4e, 0xf9, 0x0b, 0xf2, 0xde, 0xab, 0xea, 0xee, 0x6a, 0x36, 0x49, 0xd9, 0xc9, 0x49, 0xea, 0xfa,
	0x78, 0xf5, 0xea, 0x7d, 0xfc, 0xde, 0x47, 0x91, 0xad, 0xf4, 0x4d, 0xcf, 0xb3, 0x87, 0x3c, 0x08,
	0x1e, 0x78, 0xbe, 0x1b, 0xba, 0x7a, 0x29, 0x1e, 0xb8, 0xf7, 0x7d, 0xf7, 0xe2, 0x57, 0xbc, 0x17,
	0xda, 0xd7, 0xbc, 0xb7, 0x6d, 0xf1, 0xa0, 0xe7, 0xdb, 0x5e, 0xe8, 0xfa, 0x62, 0x9d, 0xf1, 0xaf,
	0x1a, 0x5b, 0x7a, 0xee, 0xb8, 0x17, 0xa6, 0x13, 0xe8, 0xfb, 0xac, 0x12, 0x8c, 0x83, 0x90, 0x0f,
	0xce, 0x02, 0xee, 0x1f, 0x1f, 0x6e, 0x6a, 0x1f, 0xe5, 0xee, 0x97, 0xf6, 0x7f, 0xb8, 0xb7, 0x5b,
	0x6f, 0x3e, 0xdc, 0x69, 0xb5, 0xb6, 0x77, 0x9f, 0x3d, 0x39, 0xd8, 0x7e, 0xdc, 0xd8, 0xdd, 0xdb,
	0x7e, 0xfa, 0x14, 0x3f, 0xf7, 0x76, 0x1e, 0x3e, 0x7c, 0xb6, 0x73, 0xd0, 0xaa, 0x37, 0x76, 0xf5,
	0xaf, 0x58, 0xed, 0x82, 0xdb, 0xc3, 0xab, 0x17, 0x70, 0xec, 0xb8, 0xcb, 0x83, 0x10, 0xf6, 0xe7,
	0xc4, 0xfe, 0xc7, 0x8d, 0x67, 0xad, 0x87, 0x07, 0x07, 0x87, 0xdb, 0xf5, 0xa3, 0xc3, 0xdd, 0xed,
	0xc7, 0x87, 0x8d, 0xe6, 0xf6, 0xd3, 0xe6, 0xd3, 0xfa, 0xf6, 0x5e, 0xa3, 0xb9, 0xf3, 0xe4, 0xe9,
	0x5e, 0xf3, 0x59, 0xfd, 0xa0, 0x8e, 0xfb, 0x91, 0xe3, 0xf1, 0xc9, 0xc8, 0x09, 0xb8, 0xdc, 0xbf,
	0x20, 0xf6, 0x1f, 0x36, 0x76, 0x5a, 0xcd, 0x27, 0x8d, 0x83, 0xed, 0xc3, 0xc7, 0x47, 0x4f, 0xb7,
	0x1f, 0x3f, 0x86, 0xad, 0x4f, 0xeb, 0x7b, 0xf5, 0xed, 0xd6, 0xd3, 0x47, 0x70, 0xf8, 0xee, 0x93,
	0xfa, 0xc3, 0xdd, 0x86, 0x71, 0x8f, 0x95, 0xba, 0xf6, 0x00, 0xf6, 0x99, 0x03, 0x4f, 0x5f, 0x66,
	0x05, 0xee, 0xb9, 0xbd, 0x3e, 0xdd, 0x40, 0x33, 0x38, 0x2b, 0xd2, 0x9c, 0x67, 0x0e, 0xf5, 0x2f,
	0x58, 0x15, 0xd6, 0xf8, 0x61, 0xbc, 0x18, 0xd6, 0x68, 0xf7, 0xcb, 0xf5, 0xf5, 0x07, 0x89, 0x04,
	0x13, 0x42, 0x9f, 0xb3, 0xe5, 0x20, 0x74, 0xbd, 0x64, 0x71, 0x6e, 0xf6, 0x62, 0xe3, 0x25, 0x2b,
	0x7e, 0xed, 0xf6, 0xcc, 0xd0, 0x76, 0x87, 0xfa, 0x5d, 0x56, 0x74, 0xe0, 0xbf, 0x70, 0x64, 0x71,
	0xc1, 0xc4, 0x7e, 0x7e, 0x7b, 0x67, 0xef, 0xa1, 0xbe, 0xc1, 0x4a, 0x8e, 0x3b, 0xbc, 0x12, 0x13,
	0x39, 0x65, 0x62, 0x95, 0x95, 0x3c, 0xc7, 0xec, 0xf1, 0xa1, 0x39, 0xe0, 0x70, 0x71, 0xed, 0x7e,
	0xc9, 0xf8, 0x9c, 0xe5, 0x3b, 0xf6, 0xb7, 0x5c, 0xaf, 0xb1, 0xc2, 0x8d, 0x6d, 0x85, 0xf2, 0x36,
	0xfb, 0x1a, 0x2e, 0x5e, 0xec, 0x73, 0xfb, 0xaa, 0x1f, 0x4a, 0x12, 0xda, 0x43, 0xa3, 0xc5, 0xca,
	0x4d, 0xd7, 0x71, 0xfd, 0xd3, 0xe7, 0x8d, 0xfa, 0xee, 0x9e, 0x5e, 0x66, 0x0b, 0x3e, 0xb7, 0x68,
	0x47, 0x01, 0xc5, 0x71, 0xe5, 0x73, 0x3e, 0xa4, 0xd5, 0x05, 0xbd, 0xc2, 0xf2, 0x17, 0xce, 0x88,
	0x93, 0x78, 0x69, 0xd2, 0x74, 0xbc, 0xbe, 0xb9, 0x99, 0x87, 0x43, 0x35, 0xe3, 0x47, 0xac, 0xf8,
	0x0b, 0x3e, 0x7e, 0x6d, 0xc2, 0x02, 0x24, 0xf2, 0x86, 0x8f, 0x85, 0x19, 0xe0, 0xba, 0x6b, 0x1c,
	0x15, 0x5a, 0x35, 0x7e, 0x9b, 0x67, 0xec, 0x90, 0x5f, 0xdb, 0x3d, 0x7e, 0x3c, 0xbc, 0x74, 0x91,
	0xfd, 0x6b, 0x3e, 0xb4, 0x5c, 0xff, 0x8c, 0xec, 0x06, 0xd8, 0x07, 0x11, 0x54, 0x4d, 0xeb, 0x9a,
	0xfb, 0xa1, 0x1d, 0x80, 0x5d, 0x9c, 0x91, 0x3d, 0xe0, 0xf8, 0x36, 0xab, 0xc0, 0x4d, 0xc3, 0x4b,
	0xd7, 0x1f, 0x74, 0xc7, 0x9e, 0xb8, 0x6c, 0xb5, 0xbe, 0xa1, 0x88, 0xf4, 0x44, 0x99, 0x46, 0xca,
	0x03, 0xd7, 0xe2, 0xce, 0x4b, 0x14, 0x4c, 0x9e, 0x28, 0xdc, 0x01, 0xad, 0x90, 0x9d, 0xbe, 0xe6,
	0x7e, 0x00, 0xd2, 0xde, 0x2c, 0xd0, 0x70, 0x0d, 0x65, 0x3e, 0xbc, 0x1a, 0x99, 0x57, 0x7c, 0x73,
	0x31, 0x1a, 0x09, 0x41, 0x3d, 0xdf, 0xba, 0x43, 0xbe, 0xb9, 0x44, 0x23, 0x9b, 0xac, 0xe6, 0xf5,
	0xe1, 0xb3, 0xe9, 0x8e, 0x86, 0xa1, 0x3f, 0x6e, 0x02, 0xe5, 0xcd, 0x22, 0xcd, 0x7c, 0xc2, 0x18,
	0xb8, 0x06, 0x48, 0x09, 0x65, 0xbe, 0x59, 0x22, 0x3d, 0xaf, 0x28, 0x4c, 0x91, 0x2a, 0xee, 0xb2,
	0xb2, 0x5c, 0xd4, 0x33, 0x1d, 0xbe, 0xc9, 0x60, 0x55, 0x6e, 0x5f, 0x7b, 0x44, 0x42, 0xf4, 0x3c,
	0xb8, 0x62, 0x99, 0x68, 0xe9, 0x8c, 0xc1, 0x67, 0xc4, 0x5d, 0x85, 0xc6, 0xbe, 0xc7, 0x56, 0x87,
	0x6e, 0x68, 0x5f, 0xda, 0xc2, 0x42, 0xba, 0xee, 0x1b, 0x50, 0xc8, 0x32, 0x4d, 0xfd, 0x84, 0xbd,
	0xef, 0x98, 0x41, 0xd8, 0x74, 0x87, 0x21, 0x1f, 0x86, 0xa7, 0xfc, 0xd2, 0xe7, 0x41, 0xff, 0x9b,
	0x43, 0xee, 0xf9, 0x1c, 0x16, 0x83, 0x1a, 0xab, 0x73, 0x4c, 0x14, 0xee, 0x38, 0x02, 0x77, 0xed,
	0x9a, 0x57, 0xc1, 0xe6, 0xca, 0x47, 0x0b, 0xe2, 0x74, 0x8b, 0x34, 0x73, 0x76, 0x08, 0x1c, 0xd5,
	0xe8, 0x88, 0xef, 0xb3, 0x35, 0x64, 0x30, 0x38, 0xe5, 0x0e, 0x37, 0x03, 0x1e, 0xb1, 0xb6, 0x0a,
	0x93, 0x45, 0xdc, 0xd0, 0x43, 0xdb, 0x81, 0x13, 0xc1, 0xca, 0x74, 0xbc, 0x14, 0x8a, 0xfd, 0xf8,
	0xe4, 0xc0, 0xb2, 0x80, 0x95, 0x60, 0x73, 0x8d, 0x68, 0xdc, 0x63, 0xba, 0x10, 0x7b, 0x63, 0x64,
	0x3b, 0x56, 0x44, 0x62, 0x3d, 0x52, 0xb6, 0x03, 0xb6, 0xef, 0x24, 0x7b, 0xee, 0x90, 0x0d, 0xff,
	0x01, 0x2b, 0x21, 0x98, 0x1c, 0x81, 0x71, 0x84, 0xfa, 0x8f, 0x59, 0x29, 0x54, 0xdc, 0x2e, 0x37,
	0xf3, 0x4e, 0x9f, 0x82, 0x26, 0xa5, 0x27, 0x49, 0x8f, 0x5b, 0x53, 0xd6, 0xc5, 0x4e, 0x86, 0x6e,
	0x8e, 0x84, 0x05, 0x50, 0x20, 0xcb, 0xf4, 0x79, 0x68, 0x86, 0x68, 0xcd, 0x20, 0x0a, 0xe3, 0xa7,
	0x6c, 0x35, 0x3e, 0x1e, 0xee, 0xfe, 0xeb, 0x11, 0x1c, 0xa0, 0xdf, 0x67, 0x6c, 0x14, 0x0f, 0x02,
	0x1f, 0x0b, 0x13, 0x7c, 0xc4, 0x3b, 0x8c, 0x23, 0xa6, 0xab, 0xdb, 0x03, 0xcf, 0x1d, 0x06, 0x5c,
	0xff, 0x92, 0xad, 0x82, 0x81, 0x02, 0x25, 0x1a, 0x3f, 0xf3, 0x2c, 0xf8, 0x98, 0x87, 0x22, 0xc6,
	0x3f, 0xe4, 0xd8, 0xd2, 0x39, 0x37, 0xc3, 0x3e, 0xf7, 0x27, 0x65, 0xa0, 0xfd, 0x7f, 0x65, 0xf0,
	0x39, 0x2b, 0xdf, 0x08, 0xd2, 0x8a, 0x33, 0xdd, 0x55, 0x56, 0x9e, 0x27, 0xb3, 0xfa, 0x1a, 0x2b,
	0x83, 0xfa, 0x3c, 0xee, 0x9b, 0xe1, 0xc8, 0x17, 0xde, 0x94, 0x23, 0xed, 0x3b, 0xee, 0xc8, 0x6a,
	0xba, 0xe0, 0xac, 0xe4, 0x4a, 0x39, 0xf4, 0x30, 0x34, 0x3e, 0xdb, 0xb3, 0x43, 0xc1, 0xc1, 0x22,
	0x0d, 0x3f, 0x61, 0xab, 0xa9, 0x61, 0x3a, 0x72, 0x89, 0x8e, 0xfc, 0x81, 0xea, 0xbf, 0x93, 0x6b,
	0xd0, 0x48, 0x3d, 0xb4, 0x0a, 0x3c, 0xb5, 0x18, 0xd9, 0xd7, 0x8d, 0x3d, 0xb4, 0x3a, 0x1e, 0x07,
	0xfb, 0x2e, 0xd1, 0x10, 0x70, 0x87, 0x43, 0x0d, 0x6e, 0xfa, 0x00, 0x18, 0xc2, 0xb9, 0x8c, 0x36,
	0xab, 0xa0, 0x0a, 0x62, 0xe1, 0xa3, 0x92, 0x07, 0x2e, 0x12, 0x96, 0x40, 0x53, 0xd0, 0xd7, 0x59,
	0x45, 0x0e, 0x91, 0x57, 0x93, 0xb4, 0xd4, 0x51, 0x02, 0x33, 0x92, 0x4c, 0xce, 0x78, 0xc0, 0xaa,
	0x9d, 0x9e, 0xeb, 0x83, 0xff, 0x0f, 0x80, 0x1e, 0x1a, 0x25, 0x18, 0x91, 0x63, 0x5e, 0x70, 0x47,
	0xa2, 0x16, 0x7c, 0x06, 0xb8, 0x80, 0xa8, 0x68, 0xc6, 0xdf, 0xe6, 0x59, 0x81, 0x36, 0xbc, 0xbd,
	0xe2, 0xbe, 0x24, 0x21, 0x5d, 0xdb, 0xee, 0x28, 0x78, 0xab, 0xb8, 0x81, 0xc8, 0x10, 0x6d, 0x68,
	0x80, 0x6f, 0xd2, 0x71, 0xc4, 0xae, 0x86, 0xba, 0xa1, 0xa8, 0x28, 0xc6, 0x08, 0xa1, 0x51, 0x02,
	0x17, 0xf1, 0xb2, 0x02, 0x0d, 0xc1, 0x5d, 0x2d, 0x3b, 0x00, 0x54, 0x95, 0x0b, 0x17, 0x69, 0x14,
	0x85, 0xde, 0x1f, 0x07, 0x00, 0x38, 0x0e, 0x29, 0x49, 0xd3, 0xab, 0x6c, 0x71, 0x00, 0x77, 0x86,
	0xef, 0x22, 0x7d, 0x23, 0xa6, 0xdb, 0xf8, 0x59, 0xa2, 0x4f, 0xd0, 0x3a, 0x1f, 0x5e, 0xdb, 0xbe,
	0x3b, 0x94, 0xab, 0x18, 0x0d, 0xab, 0x96, 0x58, 0x9e, 0x6d, 0x89, 0x9f, 0xb0, 0x25, 0x69, 0x89,
	0x84, 0x78, 0xe5, 0xba, 0x9e, 0xb5, 0x42, 0xbc, 0x6b, 0x48, 0xc1, 0xfd, 0x1b, 0x2b, 0x81, 0xb7,
	0x65, 0x52, 0xd8, 0x87, 0x6c, 0x03, 0xa7, 0x3a, 0xe8, 0xa5, 0xc3, 0x1e, 0x57, 0x17, 0x54, 0xc1,
	0x47, 0x0b, 0x88, 0x3f, 0x84, 0x74, 0xb0, 0xe8, 0x20, 0x08, 0x80, 0x2a, 0x72, 0x09, 0x98, 0x87,
	0x3c, 0x42, 0x50, 0x19, 0x29, 0x66, 0x02, 0xa8, 0x87, 0x5e, 0xbd, 0x31, 0xe1, 0xd5, 0xb1, 0x15,
	0x01, 0x1b, 0x23, 0xca, 0x71, 0xd4, 0x53, 0x56, 0xc9, 0x00, 0x40, 0x46, 0x82, 0x43, 0x02, 0xc2,
	0x92, 0x5e, 0x67, 0x2b, 0x41, 0xca, 0x62, 0x10, 0x0e, 0x91, 0xf8, 0xf7, 0xd4, 0xe0, 0x90, 0x5a,
	0x61, 0xfc, 0x8b, 0x06, 0x66, 0xe6, 0xf6, 0x6c, 0xc0, 0x43, 0x0b, 0xbe, 0xed, 0x70, 0x4c, 0x31,
	0x8b, 0x46, 0x3a, 0xdc, 0x47, 0x6c, 0x96, 0x51, 0x15, 0x74, 0x24, 0x86, 0xe3, 0xf0, 0x28, 0xf1,
	0xfc, 0x65, 0x9c, 0x07, 0xa0, 0x5f, 0x48, 0xed, 0x2a, 0x31, 0x70, 0x85, 0x2d, 0xe1, 0xb2, 0xb3,
	0xd3, 0x63, 0x19, 0xfd, 0xc0, 0x2c, 0xcc, 0x51, 0xd8, 0x17, 0x71, 0x45, 0x84, 0x3f, 0x00, 0x3a,
	0x1c, 0x3a, 0xfa, 0x8d, 0x67, 0xfb, 0xc2, 0x4f, 0x67, 0x99, 0xa0, 0x2e, 0x56, 0x76, 0x38, 0x04,
	0xb7, 0x50, 0x04, 0x44, 0xe3, 0x1b, 0xcc, 0x28, 0xc0, 0x0c, 0x7a, 0x21, 0x45, 0x78, 0x00, 0x9a,
	0x9e, 0xf8, 0x24, 0xaf, 0x47, 0xf6, 0xd3, 0x40, 0xd3, 0x4c, 0x66, 0x91, 0x3b, 0xb9, 0x58, 0xa4,
	0x0b, 0x78, 0x80, 0x1d, 0x40, 0xc8, 0x80, 0xf8, 0x07, 0x92, 0xc6, 0x7b, 0x15, 0x0d, 0x97, 0x55,
	0x48, 0x6e, 0x9d, 0xd1, 0x60, 0x60, 0xfa, 0x63, 0xfd, 0x03, 0x96, 0xbf, 0xe1, 0xfc, 0x8d, 0x44,
	0xe4, 0xda, 0xa4, 0x78, 0xc1, 0x40, 0x0a, 0x03, 0x20, 0xda, 0x07, 0x92, 0xd3, 0x17, 0x00, 0x81,
	0x31, 0x80, 0x07, 0x90, 0x9f, 0x3a, 0x6f, 0x5c, 0xb1, 0xaa, 0xb4, 0xc3, 0xe8, 0xc8, 0x09, 0xf4,
	0xd4, 0xe6, 0xa2, 0x27, 0x78, 0x99, 0x5c, 0xac, 0xe2, 0x4c, 0xda, 0x45, 0x05, 0xca, 0xfc, 0x4f,
	0x81, 0x2d, 0x9d, 0xf8, 0xee, 0xa5, 0xed, 0x70, 0xb4, 0xa7, 0x51, 0x94, 0x4e, 0xa3, 0x52, 0x20,
	0xfb, 0xa2, 0x1c, 0x4f, 0x68, 0xfb, 0x63, 0xb6, 0x78, 0x05, 0x79, 0x13, 0xf7, 0x25, 0x72, 0xaf,
	0x2a, 0x67, 0x3f, 0xa7, 0x09, 0xfd, 0x33, 0x11, 0xae, 0x3a, 0x00, 0xa7, 0xa3, 0x80, 0xb4, 0x5f,
	0xad, 0xdf, 0x99, 0x30, 0x6c, 0x31, 0xa9, 0x43, 0xf2, 0x76, 0x61, 0xfb, 0x61, 0xdf, 0x32, 0xc7,
	0x64, 0x15, 0x73, 0x72, 0x06, 0x7b, 0x00, 0x69, 0xd2, 0xd9, 0xe9, 0xd7, 0x60, 0x2a, 0x0b, 0x4a,
	0x5e, 0xa4, 0x66, 0x1d, 0x4b, 0xd1, 0x0c, 0x1f, 0x98, 0xb6, 0xa3, 0xce, 0x14, 0x69, 0x66, 0x87,
	0xd5, 0x02, 0xd5, 0xc8, 0x6d, 0x1e, 0x00, 0x90, 0x64, 0x5c, 0x23, 0xed, 0x07, 0x9f, 0xb3, 0x55,
	0x72, 0xa7, 0x40, 0xa5, 0xc7, 0x66, 0x28, 0xf4, 0x47, 0x98, 0xd1, 0x21, 0x24, 0xf0, 0x08, 0x79,
	0xa6, 0xdf, 0x67, 0x8b, 0x55, 0xc0, 0x70, 0x09, 0x86, 0x0e, 0x31, 0x18, 0x57, 0xe6, 0xac, 0x85,
	0x4c, 0xa5, 0x0f, 0x46, 0x82, 0xf1, 0xbc, 0xc7, 0xa1, 0x26, 0x8a, 0xe0, 0x07, 0xf5, 0x48, 0xe3,
	0x1d, 0x44, 0x95, 0x2a, 0x8d, 0x25, 0x36, 0x8f, 0x2e, 0x40, 0xe9, 0x55, 0x79, 0x9a, 0xcd, 0x93,
	0x83, 0x7c, 0xc1, 0xca, 0xa4, 0x27, 0x61, 0x5a, 0x94, 0x77, 0xa5, 0x11, 0x28, 0x65, 0xec, 0x0f,
	0xd8, 0x72, 0xcf, 0xf6, 0x7b, 0x4e, 0x34, 0x40, 0xe8, 0x33, 0x7f, 0xfd, 0x15, 0x95, 0x69, 0xd1,
	0x7a, 0x7d, 0xfe, 0xfa, 0x47, 0xac, 0x7a, 0x93, 0xb2, 0xf5, 0x29, 0xa8, 0x35, 0xe1, 0x0c, 0x98,
	0xc3, 0x81, 0xb4, 0x5f, 0x24, 0xd6, 0xbc, 0x2e, 0xf1, 0xbf, 0x2c, 0xf2, 0x1d, 0x31, 0x78, 0x87,
	0x0e, 0xce, 0x7a, 0xd7, 0x08, 0x32, 0x46, 0x34, 0x2a, 0x4c, 0xbf, 0x10, 0x8f, 0xc9, 0xc2, 0x64,
	0x4e, 0x2b, 0x3d, 0x4b, 0xe5, 0xf6, 0x58, 0x99, 0x26, 0x78, 0xc0, 0xef, 0xc6, 0x18, 0xce, 0x21,
	0xd7, 0xa8, 0x20, 0xec, 0xf5, 0xc4, 0x74, 0x9c, 0xd9, 0x94, 0x52, 0x96, 0x4b, 0x40, 0x68, 0xec,
	0xb1, 0x32, 0x91, 0x3a, 0xf3, 0x1c, 0xd7, 0xb4, 0x30, 0x4c, 0xdb, 0x11, 0x17, 0x53, 0x72, 0xbb,
	0x98, 0x43, 0x63, 0x97, 0x2d, 0x4b, 0x17, 0x15, 0x19, 0x9c, 0xfe, 0x43, 0xcc, 0x51, 0x68, 0x20,
	0x4a, 0x0a, 0xf5, 0x54, 0x4e, 0x43, 0x53, 0xc6, 0x87, 0xac, 0x22, 0xff, 0xfd, 0xe5, 0x88, 0x83,
	0xd0, 0x24, 0x0e, 0x1f, 0x1f, 0x8a, 0x4d, 0x25, 0xe3, 0xd7, 0x6c, 0xb1, 0xe5, 0xdb, 0xe0, 0xba,
	0xc8, 0xeb, 0x25, 0xfd, 0x17, 0x95, 0xd2, 0x28, 0x15, 0x31, 0x22, 0x9d, 0x39, 0x47, 0x20, 0xaa,
	0x4a, 0xa5, 0xa5, 0x4c, 0x0b, 0xd0, 0x3c, 0x1e, 0x36, 0xc9, 0x4e, 0x04, 0x68, 0xd2, 0x18, 0xc4,
	0xe8, 0x90, 0x7f, 0x6d, 0x0f, 0xdf, 0x48, 0x11, 0xd4, 0x59, 0x45, 0xec, 0x93, 0x37, 0x31, 0xd8,
	0x92, 0x38, 0x26, 0xba, 0xc8, 0x6a, 0xe6, 0x04, 0x28, 0x56, 0x97, 0xc5, 0x7f, 0x51, 0x56, 0xfc,
	0x19, 0x5b, 0x16, 0x9b, 0xe4, 0xf5, 0x64, 0x8e, 0x33, 0x45, 0x06, 0x13, 0x7c, 0xe5, 0x08, 0xcc,
	0xff, 0x06, 0x42, 0x5e, 0x44, 0x50, 0x06, 0xd9, 0xb7, 0x60, 0x03, 0x3c, 0xb7, 0x9a, 0x3a, 0x35,
	0x90, 0xe0, 0x3e, 0xeb, 0xd8, 0xe4, 0xea, 0xc2, 0x1e, 0x76, 0x58, 0xc5, 0x97, 0xe7, 0x91, 0x95,
	0x08, 0x78, 0x7c, 0x3f, 0x73, 0xd0, 0xa9, 0xb2, 0xc8, 0xf8, 0x4b, 0x8d, 0xad, 0x81, 0xe5, 0x5d,
	0xda, 0xfe, 0x80, 0x30, 0x23, 0x12, 0xc1, 0x84, 0xbb, 0x0b, 0x01, 0xcc, 0x72, 0x77, 0x48, 0x77,
	0xa4, 0xb9, 0xc8, 0xe4, 0x6e, 0x1a, 0xcb, 0x00, 0x9e, 0x3d, 0xe5, 0x20, 0x2a, 0x37, 0x17, 0xa2,
	0x1a, 0x56, 0x5c, 0xc6, 0x97, 0xcd, 0x16, 0xa1, 0xca, 0xff, 0x84, 0x52, 0xa1, 0x0d, 0x14, 0xc0,
	0x4a, 0xa9, 0xf2, 0x15, 0xff, 0xc6, 0x06, 0x84, 0xe9, 0x02, 0x45, 0x85, 0xa8, 0xbb, 0x82, 0x42,
	0x11, 0xd9, 0x36, 0x65, 0x26, 0x0b, 0x04, 0xcc, 0x93, 0x70, 0x98, 0x9f, 0x03, 0x87, 0x0f, 0x58,
	0x4d, 0x2d, 0x4b, 0x69, 0xfd, 0xbc, 0xd0, 0x01, 0x90, 0x0c, 0xa4, 0x2d, 0x5a, 0xb7, 0x38, 0xb7,
	0x73, 0x52, 0x96, 0xcc, 0x2b, 0x45, 0x82, 0x2a, 0xcb, 0x76, 0x32, 0x8b, 0xae, 0x1e, 0x2d, 0xe6,
	0xbf, 0x91, 0xf9, 0x07, 0xe4, 0xd1, 0xcb, 0x72, 0x50, 0x7a, 0x4b, 0x89, 0x68, 0x6c, 0x66, 0x69,
	0x24, 0xee, 0x02, 0xca, 0xc1, 0xca, 0x00, 0x64, 0x4e, 0xb9, 0xab, 0xc8, 0x8a, 0x68, 0x0c, 0x01,
	0x83, 0x8a, 0x73, 0xe3, 0xf7, 0xd8, 0xb2, 0xdc, 0x27, 0xdd, 0xe5, 0x53, 0xd1, 0x25, 0xc0, 0xf6,
	0x90, 0xd4, 0xf9, 0xda, 0xe4, 0x95, 0xb0, 0x73, 0x04, 0xf8, 0x20, 0xf9, 0x99, 0x66, 0xa4, 0x92,
	0xa4, 0xf1, 0xcf, 0x1a, 0x14, 0x0c, 0xa1, 0x2b, 0x90, 0x21, 0xc0, 0x7f, 0xe2, 0xc8, 0x0f, 0xd0,
	0x44, 0x03, 0x24, 0x90, 0x1c, 0x5d, 0x46, 0x95, 0x5d, 0x27, 0x9a, 0xcb, 0xe8, 0x6f, 0x61, 0x7e,
	0xe6, 0x36, 0xad, 0x42, 0x10, 0x07, 0xa1, 0x30, 0x0b, 0x51, 0xdf, 0x83, 0x86, 0x0e, 0xc2, 0xd0,
	0xb7, 0x2f, 0x46, 0x71, 0x4d, 0x47, 0x89, 0xe4, 0x8d, 0x09, 0xc1, 0xd0, 0xb4, 0x48, 0x49, 0x45,
	0xe3, 0x9c, 0x95, 0x89, 0x95, 0x77, 0x93, 0xce, 0xc7, 0xe2, 0xb6, 0x76, 0x2c, 0x9c, 0xda, 0xe4,
	0xd5, 0x8c, 0x8f, 0x59, 0xe5, 0x90, 0x5f, 0x8c, 0xae, 0x14, 0xfb, 0xb6, 0xf0, 0x9b, 0xd8, 0x14,
	0xe0, 0xf9, 0x77, 0xe0, 0x99, 0x07, 0xbd, 0x1e, 0xf7, 0xc0, 0xc7, 0xd0, 0x39, 0x22, 0xcf, 0x9c,
	0x4c, 0xa2, 0x54, 0x68, 0xcd, 0x45, 0xd7, 0x90, 0xda, 0x91, 0x0e, 0x36, 0xe1, 0xcc, 0xf9, 0xb9,
	0xce, 0xac, 0x62, 0x7f, 0x61, 0x26, 0x00, 0x4d, 0xf3, 0x66, 0x12, 0xa2, 0xf1, 0xe7, 0x1a, 0x5b,
	0x4f, 0xf3, 0x2d, 0x31, 0xf0, 0xff, 0xc0, 0xb8, 0x02, 0x9b, 0xf9, 0x59, 0xb0, 0xf9, 0x56, 0xfc,
	0x1a, 0xbf, 0xc3, 0xf4, 0x16, 0x0f, 0x7b, 0x7d, 0xb2, 0x8d, 0xb8, 0xfd, 0xb1, 0x05, 0x95, 0x08,
	0x0e, 0x74, 0x6f, 0xd7, 0xaa, 0xf1, 0x25, 0xd8, 0x02, 0xae, 0x95, 0xb6, 0xf0, 0x11, 0x5b, 0x14,
	0xc9, 0xdb, 0xac, 0x1c, 0xdd, 0xf8, 0x2b, 0x8d, 0x95, 0x11, 0xd0, 0x66, 0x60, 0x18, 0x26, 0x55,
	0x90, 0xcf, 0xca, 0xa1, 0xe6, 0x28, 0xf2, 0x83, 0x3b, 0x59, 0x4f, 0x6a, 0x8a, 0x06, 0x24, 0xfa,
	0xad, 0x90, 0xcb, 0x17, 0x6c, 0x25, 0x02, 0x89, 0x88, 0xf3, 0xfc, 0x6c, 0x7b, 0x44, 0x1f, 0xe8,
	0xbb, 0x37, 0x22, 0x53, 0x47, 0x1f, 0x28, 0x40, 0xa6, 0xb0, 0xda, 0x88, 0x5b, 0xd4, 0xaf, 0x3c,
	0x54, 0x61, 0x00, 0x76, 0x7b, 0xb7, 0x6d, 0x0f, 0xed, 0xc1, 0x68, 0x70, 0x24, 0xba, 0x05, 0x41,
	0xd7, 0x15, 0xbe, 0x44, 0xdc, 0xee, 0x6b, 0x3b, 0xc6, 0x5f, 0xc3, 0x9d, 0xa8, 0x2d, 0xdd, 0xe6,
	0x83, 0x0b, 0x48, 0xc8, 0xe7, 0x67, 0xf4, 0xe8, 0xe5, 0xb8, 0xff, 0x56, 0xcf, 0x7d, 0x27, 0x03,
	0x55, 0xa2, 0x4d, 0x61, 0x56, 0xb4, 0x31, 0xfe, 0x3e, 0xc7, 0x4a, 0xc4, 0x68, 0x03, 0xc0, 0x83,
	0x8a, 0x01, 0xf8, 0x7b, 0x78, 0x4b, 0x77, 0x0a, 0x3b, 0xe2, 0x1c, 0x2b, 0xc4, 0x04, 0x6f, 0xe6,
	0x35, 0x2b, 0xb0, 0x79, 0x46, 0xc6, 0x70, 0xeb, 0xfd, 0xd6, 0x93, 0xd0, 0x7c, 0x1a, 0x45, 0xa1,
	0xc9, 0x8e, 0x86, 0x68, 0x5f, 0x18, 0xec, 0xde, 0x44, 0x89, 0xad, 0x96, 0xe5, 0x58, 0xa0, 0x68,
	0x20, 0x56, 0x70, 0x13, 0x14, 0x7f, 0x40, 0x75, 0x49, 0x5a, 0x52, 0xaa, 0x76, 0xa6, 0xd4, 0xeb,
	0xc5, 0xdb, 0xea, 0xf5, 0x7f, 0xca, 0xb1, 0x02, 0xd1, 0x40, 0x6f, 0xf4, 0xf0, 0x1f, 0xd5, 0x61,
	0x95, 0x88, 0x2b, 0x3b, 0x44, 0x50, 0xc9, 0x38, 0x91, 0xbb, 0x62, 0x37, 0xdd, 0xb5, 0xc6, 0xb2,
	0x2c, 0xff, 0x94, 0x15, 0xa8, 0x95, 0x2a, 0xb5, 0x94, 0x56, 0x67, 0xd2, 0x9e, 0x87, 0xe8, 0x1f,
	0x72, 0x73, 0x70, 0x1c, 0xbc, 0xb6, 0x03, 0xfb, 0xc2, 0x11, 0x30, 0x52, 0xcc, 0x00, 0xff, 0xbc,
	0x92, 0x3d, 0xe9, 0x53, 0x44, 0xfd, 0xeb, 0x02, 0xaa, 0x3b, 0x2a, 0xc1, 0xd6, 0x27, 0xc5, 0x43,
	0x36, 0x01, 0x36, 0x47, 0xd7, 0x93, 0x11, 0x95, 0x65, 0xa2, 0xf2, 0x49, 0x32, 0x3b, 0xa1, 0xea,
	0x39, 0xf5, 0x97, 0xf1, 0xdb, 0xc8, 0x43, 0xde, 0x2d, 0x66, 0x00, 0x9c, 0x10, 0x37, 0xd3, 0x42,
	0x86, 0x50, 0x07, 0xa4, 0x87, 0x42, 0xeb, 0x71, 0x7a, 0xb8, 0x30, 0x13, 0x9d, 0x13, 0x70, 0xca,
	0xcf, 0x00, 0xa7, 0x9f, 0xb1, 0x8d, 0x88, 0x4e, 0xcb, 0x77, 0x07, 0xb3, 0x02, 0xc0, 0xec, 0xe4,
	0xff, 0xbf, 0x34, 0xd9, 0x3e, 0x4c, 0x24, 0x9a, 0x31, 0x18, 0xd5, 0xed, 0x72, 0x73, 0x6b, 0xd6,
	0x52, 0xe4, 0x1e, 0xd1, 0xad, 0x66, 0xb6, 0xab, 0x94, 0xd6, 0x5a, 0x7e, 0x66, 0x6b, 0x4d, 0x6d,
	0xd3, 0x15, 0x66, 0xb7, 0xe9, 0x52, 0xf8, 0x34, 0x27, 0x83, 0x33, 0xfe, 0x54, 0x63, 0xab, 0x8a,
	0x39, 0x48, 0xd5, 0xee, 0x80, 0x94, 0x85, 0xf1, 0x08, 0x31, 0x7d, 0x32, 0xdd, 0x78, 0xc4, 0xea,
	0x07, 0xe2, 0xe3, 0x5e, 0x8b, 0x2d, 0x4a, 0x9b, 0xca, 0x88, 0x6b, 0xc2, 0x22, 0x73, 0xf3, 0x2c,
	0xd2, 0xe8, 0xb3, 0xea, 0x6b, 0xd3, 0xb1, 0x91, 0xb4, 0x25, 0x0c, 0xe4, 0x43, 0x56, 0xa0, 0xed,
	0xd2, 0xcc, 0xb2, 0x16, 0x64, 0x80, 0x7b, 0x82, 0x80, 0xa6, 0xa8, 0x22, 0xd1, 0x21, 0xbe, 0xbd,
	0xf9, 0xae, 0x35, 0xea, 0x89, 0x47, 0x47, 0x0c, 0xe8, 0x7f, 0xa6, 0xb1, 0x52, 0x07, 0xcb, 0x12,
	0x22, 0x02, 0xc5, 0xf4, 0x75, 0xea, 0x5c, 0x79, 0x9c, 0x0a, 0x29, 0x13, 0x8c, 0xa1, 0x87, 0xfb,
	0xe6, 0x30, 0x90, 0x19, 0x69, 0x04, 0x1e, 0x90, 0xe9, 0xfa, 0xd8, 0x77, 0xf0, 0xc4, 0x2b, 0xc5,
	0x02, 0x55, 0xba, 0xd1, 0xe3, 0x89, 0xfd, 0x2d, 0xec, 0xf6, 0xb1, 0x39, 0x98, 0x8f, 0x5a, 0x91,
	0x34, 0x2e, 0x70, 0xb2, 0x64, 0xfc, 0x21, 0xd4, 0x9e, 0x48, 0xfc, 0xed, 0x63, 0x97, 0xb2, 0x44,
	0xc0, 0x63, 0xd0, 0x72, 0x7d, 0x71, 0x83, 0x5c, 0xb4, 0xe4, 0x3e, 0x7b, 0x5f, 0x2e, 0x89, 0xec,
	0x2d, 0x5e, 0x84, 0x62, 0x0f, 0x88, 0x49, 0x0a, 0x84, 0xff, 0x81, 0xe6, 0x0f, 0x77, 0x55, 0x4a,
	0xa6, 0xa4, 0x91, 0xaa, 0xb4, 0x73, 0x34, 0x09, 0x85, 0x6f, 0xf5, 0x80, 0xf1, 0x59, 0xf4, 0x5a,
	0x45, 0x51, 0x50, 0x04, 0x14, 0x35, 0x1d, 0x50, 0x1e, 0x19, 0x95, 0x20, 0x98, 0x9f, 0x59, 0x72,
	0xd5, 0xd9, 0x3a, 0x76, 0x31, 0x0e, 0x3c, 0x0f, 0x25, 0x0c, 0x57, 0xe2, 0xe1, 0x6d, 0x45, 0x8d,
	0xf1, 0x47, 0x1a, 0x63, 0xb0, 0x21, 0x92, 0xeb, 0x33, 0xb6, 0x7a, 0x31, 0x99, 0x28, 0x48, 0x8d,
	0xab, 0xcf, 0x1c, 0x99, 0x64, 0xe2, 0xc5, 0x7b, 0x50, 0xb4, 0x54, 0x3c, 0x45, 0x45, 0xf2, 0xe2,
	0x1b, 0x93, 0x66, 0x17, 0x6f, 0x68, 0x94, 0xd8, 0x92, 0xfc, 0x30, 0xfe, 0x3b, 0xc7, 0x56, 0x62,
	0xf1, 0xce, 0xc8, 0x1f, 0x21, 0xa8, 0x06, 0x62, 0x89, 0x68, 0xf4, 0xe6, 0xa2, 0x2a, 0x07, 0x16,
	0x5d, 0x63, 0x3b, 0x38, 0xc9, 0x96, 0xa8, 0x21, 0xde, 0x8e, 0x2a, 0x96, 0x42, 0x26, 0x68, 0xaa,
	0x69, 0xda, 0x8f, 0x45, 0xef, 0x2a, 0x2a, 0xfd, 0x17, 0xe7, 0x95, 0xfe, 0x3e, 0x8a, 0xb4, 0x69,
	0xf6, 0xfa, 0x42, 0x0b, 0x45, 0xb4, 0x01, 0x1a, 0x43, 0x82, 0x87, 0xfc, 0xd2, 0x1c, 0x39, 0x61,
	0x20, 0x6a, 0x09, 0x7d, 0x83, 0xad, 0xd0, 0xd4, 0x81, 0xe3, 0x48, 0x85, 0x50, 0xb4, 0x2a, 0x62,
	0xb3, 0x1f, 0x68, 0x1f, 0x72, 0xee, 0x61, 0x31, 0x9f, 0x6a, 0x06, 0x96, 0xa8, 0x86, 0xdd, 0x8d,
	0xea, 0x63, 0x69, 0x69, 0x14, 0xab, 0xca, 0xf5, 0x0f, 0x14, 0x9e, 0xa6, 0x15, 0x0a, 0x9f, 0xd1,
	0xcb, 0x6b, 0x24, 0xfd, 0x72, 0xc6, 0x9a, 0x12, 0x2d, 0x1b, 0xff, 0x58, 0x62, 0xcb, 0x4d, 0xc7,
	0xa6, 0x17, 0x57, 0xb1, 0x79, 0x52, 0xb8, 0x9a, 0x6c, 0x31, 0x54, 0x83, 0x94, 0xd1, 0x4b, 0xa5,
	0xa6, 0xf2, 0x89, 0xd4, 0x02, 0xb0, 0x83, 0x67, 0xc2, 0x2f, 0x52, 0x0f, 0x8f, 0xd2, 0xb8, 0x7f,
	0x30, 0xed, 0xa9, 0x31, 0x48, 0xb6, 0x3e, 0xc2, 0xb7, 0x37, 0xa5, 0x31, 0x25, 0x6d, 0x7d, 0x33,
	0xab, 0x0d, 0x31, 0x2f, 0xad, 0x4e, 0x69, 0x4a, 0x49, 0x5b, 0xdf, 0xc8, 0xee, 0xa0, 0x69, 0xb1,
	0xe1, 0x52, 0xe9, 0x18, 0xc9, 0x44, 0x23, 0xdb, 0x88, 0x8a, 0x4f, 0x78, 0x14, 0x75, 0x87, 0xa2,
	0xbb, 0x14, 0x33, 0x4c, 0xa5, 0xda, 0x49, 0xb0, 0xe5, 0xa7, 0x6c, 0xad, 0x97, 0x6d, 0xb2, 0xc8,
	0x97, 0xf5, 0x0f, 0xd2, 0x79, 0xee, 0xe4, 0x2a, 0xd8, 0xbe, 0xc7, 0xf4, 0xa8, 0xfc, 0x57, 0x8e,
	0x65, 0x99, 0x63, 0x53, 0xb5, 0x3c, 0xec, 0x7b, 0xc2, 0xd6, 0xe4, 0x3e, 0xaa, 0x7d, 0xa2, 0x8d,
	0xe5, 0x5b, 0x37, 0xee, 0xb0, 0x55, 0x2a, 0x91, 0x53, 0xdb, 0x2a, 0x99, 0x34, 0x4e, 0xa9, 0x8d,
	0x85, 0x20, 0x2d, 0xa5, 0xa6, 0xa5, 0x5e, 0x72, 0x5a, 0x90, 0x6a, 0xc9, 0x0b, 0x1b, 0xb6, 0x59,
	0xd9, 0x4e, 0xda, 0x95, 0xf2, 0x65, 0xff, 0xee, 0x64, 0x87, 0x52, 0xcc, 0x0a, 0x21, 0x9a, 0x59,
	0x33, 0xa7, 0x47, 0xaf, 0x5b, 0x9d, 0x81, 0xd8, 0x5b, 0x16, 0x19, 0x16, 0x20, 0x3a, 0xda, 0x9a,
	0xec, 0x4a, 0x67, 0xe2, 0x6b, 0x7c, 0x9f, 0x23, 0xb6, 0xe1, 0x4d, 0x4f, 0x91, 0x64, 0x83, 0xda,
	0xc8, 0x1a, 0xd5, 0xe4, 0x4a, 0x20, 0xf3, 0x90, 0xd5, 0x30, 0x6b, 0x7e, 0xc9, 0x6f, 0xe2, 0x28,
	0x2b, 0x1b, 0xd6, 0xa9, 0x8e, 0x47, 0x14, 0x60, 0x49, 0xfa, 0xd5, 0x20, 0x95, 0x59, 0xd1, 0x8f,
	0x0e, 0xa6, 0x64, 0xed, 0xf1, 0x02, 0xe1, 0x65, 0xde, 0x64, 0xce, 0x41, 0x4d, 0xeb, 0xb4, 0x97,
	0x65, 0xf2, 0x12, 0xd8, 0xfa, 0x13, 0xa6, 0x5f, 0x66, 0x6a, 0x63, 0xd9, 0xdb, 0x4e, 0xb5, 0x0f,
	0x33, 0x8b, 0xe8, 0xdc, 0xf5, 0x28, 0x1f, 0x20, 0xda, 0xd1, 0xf6, 0xbb, 0xb7, 0x64, 0x05, 0x42,
	0xff, 0x41, 0x52, 0x51, 0x6f, 0x6e, 0x64, 0xed, 0x2b, 0x99, 0x85, 0xf0, 0x70, 0x97, 0xad, 0xf7,
	0x54, 0x8c, 0x8a, 0xda, 0x4c, 0xff, 0xbe, 0x88, 0xa1, 0x18, 0x21, 0x3f, 0x0e, 0x15, 0xdb, 0x49,
	0xbd, 0x45, 0x9d, 0x09, 0x2d, 0xd3, 0x5c, 0x3e, 0x55, 0xa6, 0x25, 0x34, 0xd3, 0x77, 0x64, 0xbc,
	0x22, 0x98, 0xec, 0x42, 0x01, 0x95, 0x8e, 0x42, 0x12, 0xb8, 0xee, 0x4d, 0x03, 0x3c, 0xb1, 0x02,
	0x2e, 0xb6, 0xaf, 0x20, 0x5e, 0xbc, 0x31, 0x9f, 0x91, 0x67, 0xf6, 0xf7, 0x14, 0xd3, 0x20, 0xaf,
	0xf0, 0xce, 0x90, 0xb7, 0x78, 0x1b, 0xe4, 0xed, 0x44, 0x9d, 0xe6, 0x98, 0xb9, 0x52, 0x46, 0x5b,
	0xe9, 0x5e, 0x31, 0x6d, 0x8a, 0x7a, 0x0e, 0xf1, 0xae, 0xdb, 0x11, 0x08, 0x55, 0x9c, 0x80, 0x84,
	0x44, 0x9e, 0xb7, 0x87, 0x90, 0xca, 0x6d, 0x10, 0x52, 0x67, 0x35, 0x05, 0x42, 0x4e, 0xb9, 0xe7,
	0x8c, 0x25, 0xee, 0xcc, 0xc5, 0x91, 0x69, 0x60, 0x5c, 0x7d, 0x4b, 0x30, 0xfe, 0x19, 0x5b, 0x37,
	0xa7, 0xb4, 0xb7, 0x24, 0x0e, 0x7d, 0x38, 0x13, 0x87, 0x62, 0x41, 0x6e, 0xcb, 0x34, 0x5f, 0xca,
	0xe4, 0x36, 0x18, 0xda, 0x67, 0x77, 0x26, 0x1c, 0x4c, 0x1e, 0xa8, 0xbf, 0xb3, 0x87, 0xad, 0xdd,
	0xe2, 0x61, 0x0c, 0x1b, 0xda, 0x82, 0xfa, 0xd6, 0xaf, 0x18, 0x53, 0x5e, 0x53, 0x97, 0x59, 0xe9,
	0xac, 0x73, 0x36, 0x7c, 0x33, 0x74, 0x6f, 0x86, 0xb5, 0xf7, 0xc4, 0x67, 0x03, 0x52, 0xda, 0x37,
	0xdc, 0xaa, 0x69, 0xe2, 0x53, 0xdc, 0xd3, 0xaa, 0xe5, 0xf4, 0x0a, 0x2b, 0x9e, 0x75, 0x0e, 0xe8,
	0x57, 0x96, 0xb5, 0x05, 0xbd, 0xc6, 0x2a, 0x67, 0x1d, 0x29, 0x4a, 0x48, 0x12, 0x6b, 0x79, 0x28,
	0x7c, 0xca, 0xf1, 0x08, 0x6c, 0x28, 0x6c, 0xed, 0xb3, 0x45, 0xf9, 0xc0, 0x0b, 0x5b, 0x9f, 0x27,
	0xc7, 0x94, 0xd9, 0xd2, 0xf3, 0x16, 0x1f, 0x40, 0xd6, 0x0f, 0x87, 0x94, 0x58, 0xe1, 0x79, 0x1b,
	0xff, 0xcd, 0x41, 0xe2, 0xb5, 0xf8, 0xfc, 0x15, 0x16, 0x7a, 0xb5, 0x85, 0xad, 0x06, 0x14, 0x02,
	0xea, 0x6f, 0xe4, 0x80, 0x97, 0x93, 0x6e, 0x42, 0x02, 0x76, 0x9d, 0x74, 0xed, 0x57, 0x1d, 0xc1,
	0xe5, 0x49, 0xf7, 0x60, 0x68, 0xf9, 0xae, 0x8d, 0x5c, 0xd2, 0xcc, 0x39, 0xbf, 0x00, 0x1a, 0x7f,
	0x02, 0x35, 0xbb, 0xfa, 0xba, 0x0d, 0x2b, 0xcf, 0xbb, 0x29, 0x36, 0xce, 0xbb, 0x4d, 0x87, 0x9b,
	0x7e, 0x0d, 0x9b, 0x36, 0xd5, 0xf3, 0xee, 0x89, 0xe9, 0x87, 0xce, 0xb8, 0x89, 0x3f, 0x15, 0x1a,
	0x8b, 0x0b, 0xe3, 0x02, 0xfa, 0x5a, 0x80, 0x3c, 0x95, 0x9d, 0x77, 0x5f, 0x01, 0x1c, 0xf5, 0x20,
	0xf7, 0x86, 0xeb, 0x02, 0xb7, 0xe7, 0xdd, 0x53, 0xd3, 0x1e, 0xd6, 0x0a, 0x62, 0x25, 0xda, 0xfc,
	0x60, 0x5c, 0x5b, 0x14, 0x33, 0x1d, 0x38, 0xa5, 0xb6, 0x24, 0x0e, 0xe9, 0x38, 0x9c, 0x87, 0xb5,
	0xe2, 0xd6, 0xef, 0x43, 0xb9, 0x99, 0xf9, 0xe1, 0x10, 0xac, 0x3e, 0xe9, 0xbe, 0x74, 0x87, 0x1c,
	0x58, 0xa2, 0xff, 0x89, 0xa6, 0x26, 0xfe, 0x27, 0x2a, 0x39, 0xa4, 0x72, 0x22, 0xa9, 0x2c, 0x88,
	0x89, 0x17, 0xa6, 0xed, 0x00, 0x13, 0x34, 0x01, 0xc1, 0xe9, 0x2a, 0x00, 0x79, 0xff, 0x6e, 0xfc,
	0x73, 0x86, 0xe8, 0xba, 0x4d, 0xe5, 0xba, 0xc0, 0x7f, 0xb3, 0x7b, 0x82, 0x2f, 0xe0, 0x9d, 0x36,
	0xca, 0x0d, 0xb6, 0x36, 0xbb, 0x47, 0xf8, 0xee, 0x2d, 0x44, 0xdf, 0xec, 0x36, 0xfb, 0x26, 0xd2,
	0x5f, 0x63, 0x2b, 0xcd, 0x6e, 0x47, 0xfd, 0x25, 0x47, 0x2d, 0xbf, 0x75, 0xc4, 0x2a, 0xa9, 0xe7,
	0x4c, 0x20, 0x7e, 0xdc, 0x4c, 0x59, 0xce, 0x71, 0x53, 0xc2, 0x11, 0xd0, 0xde, 0x60, 0x6b, 0xf1,
	0x67, 0xc3, 0xec, 0xbd, 0xb9, 0xf2, 0xdd, 0xd1, 0x10, 0xb4, 0xb3, 0xe5, 0x47, 0xef, 0x78, 0x89,
	0x01, 0xb6, 0xd2, 0x06, 0xd8, 0x92, 0x16, 0xe7, 0x0b, 0xd5, 0x46, 0x9f, 0x68, 0x1f, 0xe2, 0xf3,
	0x6a, 0x08, 0xb6, 0x6d, 0x09, 0x85, 0xb4, 0x3a, 0xc2, 0x19, 0xe1, 0x3b, 0x0f, 0x35, 0xa6, 0xde,
	0xea, 0x88, 0x17, 0xbb, 0x24, 0xd7, 0x06, 0xb1, 0xfc, 0x1c, 0xc6, 0x33, 0x2f, 0x64, 0x44, 0xec,
	0x34, 0x39, 0x19, 0x04, 0xd0, 0x3a, 0xfd, 0xda, 0x06, 0xcd, 0x6a, 0xa8, 0x4d, 0x98, 0x22, 0xef,
	0x11, 0xb2, 0x6f, 0x9d, 0x76, 0xfa, 0xa6, 0x0f, 0x56, 0xbf, 0xf5, 0x6f, 0x60, 0x52, 0xea, 0xb3,
	0xce, 0x2a, 0x5b, 0x6e, 0x77, 0x25, 0x88, 0xfc, 0xdc, 0x25, 0xbd, 0xc1, 0xee, 0x76, 0x17, 0xff,
	0x27, 0xa7, 0x01, 0x61, 0xb6, 0xbb, 0xa9, 0xbc, 0x11, 0x38, 0x07, 0x63, 0x8b, 0x06, 0x05, 0xff,
	0xc0, 0xbd, 0x32, 0x26, 0xee, 0x20, 0xcc, 0xaa, 0xdd, 0x25, 0x5f, 0xb6, 0xc0, 0xac, 0x68, 0x05,
	0x7d, 0x45, 0x94, 0x96, 0xf0, 0x16, 0xed, 0xee, 0x0b, 0x7c, 0xd4, 0x87, 0x25, 0x45, 0xc1, 0x8e,
	0xfc, 0x44, 0xb9, 0xd7, 0x4a, 0x92, 0x06, 0xfd, 0xa8, 0xb1, 0xc6, 0xf0, 0x32, 0xed, 0x2e, 0xc1,
	0x48, 0xad, 0xbc, 0xf5, 0x38, 0x7e, 0x26, 0x92, 0xda, 0x00, 0xdf, 0x69, 0x77, 0x20, 0xa3, 0x01,
	0x79, 0xe0, 0xb6, 0xce, 0x0b, 0xdb, 0xb2, 0xb8, 0xb4, 0xc5, 0x76, 0x07, 0x1f, 0x50, 0x40, 0x85,
	0xbb, 0xac, 0x94, 0xbc, 0xe3, 0xc0, 0xf9, 0x9d, 0xb4, 0x4b, 0x75, 0xba, 0xbf, 0x1c, 0xb9, 0x21,
	0x17, 0x82, 0xe8, 0x74, 0x0f, 0xa8, 0x39, 0x00, 0xdb, 0x3e, 0x62, 0x4c, 0x69, 0x7b, 0xe3, 0x5d,
	0x9a, 0x1d, 0xfc, 0x95, 0xb2, 0x1c, 0xac, 0x69, 0xa0, 0xa7, 0xb2, 0xda, 0x9b, 0x43, 0xbf, 0x4e,
	0x9b, 0x06, 0x7c, 0x92, 0x52, 0x10, 0x9b, 0x40, 0xf9, 0x27, 0x9d, 0x03, 0xbf, 0xd7, 0xc7, 0xdf,
	0x37, 0x08, 0xdb, 0x38, 0xe9, 0x1c, 0x72, 0x87, 0xe3, 0xf4, 0xc2, 0xd6, 0x2f, 0x58, 0x35, 0xce,
	0xa2, 0x90, 0x1e, 0x71, 0xda, 0xe8, 0xa4, 0xf4, 0xdd, 0xe8, 0xe0, 0xef, 0x20, 0x04, 0xad, 0x06,
	0xdc, 0x0e, 0x60, 0xcc, 0x22, 0x5a, 0xf4, 0x8d, 0xad, 0x53, 0xa4, 0x06, 0xc4, 0xfe, 0x42, 0x63,
	0x95, 0x54, 0x62, 0x01, 0xb4, 0x4e, 0x9b, 0x9d, 0x11, 0xa8, 0x2e, 0x08, 0x04, 0x76, 0x9c, 0x36,
	0x8f, 0x87, 0xde, 0x28, 0x6c, 0xba, 0xbe, 0x3f, 0x02, 0x75, 0xe6, 0x94, 0x31, 0xb0, 0x5f, 0xc4,
	0x6f, 0xe1, 0x58, 0xb0, 0x8d, 0x52, 0x9a, 0x73, 0xd3, 0x1f, 0x0a, 0xd4, 0x04, 0x95, 0x45, 0x83,
	0x47, 0xbe, 0xef, 0xfa, 0xa0, 0x76, 0x5a, 0xf7, 0xd2, 0x0d, 0x0f, 0x46, 0x61, 0xdf, 0xf5, 0xb1,
	0x65, 0x22, 0xb4, 0x7f, 0xda, 0x14, 0xc5, 0x5c, 0xd7, 0x75, 0x5f, 0x39, 0x56, 0x6d, 0xa9, 0xb1,
	0xfd, 0xdd, 0x57, 0x39, 0xf6, 0xde, 0x77, 0x5f, 0xe5, 0xf5, 0xdc, 0x8b, 0x36, 0xfc, 0xbf, 0xa9,
	0xb1, 0x0d, 0xdb, 0x7d, 0x40, 0x95, 0x3d, 0xb5, 0xa0, 0x93, 0x90, 0xf0, 0xc7, 0x9a, 0xf6, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xa7, 0x8c, 0x3f, 0x42, 0x2f, 0x00, 0x00,
}
