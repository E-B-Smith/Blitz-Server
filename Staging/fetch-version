#!/bin/bash
#  fetch-version  -  Fetches & maintains version numbers.
#
#  The version number is maintained in the file:
#
#        shimmering.blue:/home/shimmering/www/blue.shimmering/version/*
#
#  EB Smith,  January 2014.


set -euo pipefail
function usage() {
cat <<USAGE
fetch-version  -  Retreive the current version and build number.

Usage:  fetch-version  [ -hbBfFi ]  [ package-name ]

Options:

  -h  Print this usage info.
  -b  Print the build number.
  -B  Print the zero-filled 4 digit build number.
  -f  Print the full version number, i.e., 1.3.2.5.
  -F  Print the zero-filled version number: 1.03.02.0005.
  -i  Increment the build number.

USAGE
}


baseurl="https://blitzhere.com/version"
username="blitzhere"
host="blitzhere.com"
versionfile="/home/blitzhere/www/version"
packagename=""
url=""

Version=""
Major=""
Minor=""
Revision=""
Build=""


function fetchVersion() {
    Version=$(curl -fs "$url") || true
    Version=$(echo "$Version" | sed -e 's/^ *//' -e 's/ *$//')
    if [[ ${#Version} == 0 ]]; then
        echo ">>> Error: Can't get the version from '$url'." 1>&2
        exit 1
    fi
    IFS=$". \n" read Major Minor Revision Build <<<$(echo $Version)
    # echo "$Major | $Minor | $Revision | $Build"
}


function incrementBuild() {
    # echo "`hostname` $host $USER $username" 1>&2
    if [[ "$host" =~ `hostname` && "$USER" == "$username" ]]; then
       # echo ">>> Local update." 1>&2
       let Build+=1
       echo "$Major.$Minor.$Revision.$Build" > "$versionfile"
    else
       # echo ">>> Remote update for '$packagename'." 1>&2
       ssh -T $username@$host fetch-version -i $packagename &> /dev/null
    fi
    local newversion=$(curl -fs "$url") || true
    newversion=$(echo "$newversion" | sed -e 's/^ *//' -e 's/ *$//')
    if [[ ${#newversion} == 0 || "$newversion" == "$Version" ]]; then
       echo ">>> Error: Can't increment the version at '$url'." 1>&2
       exit 1
    fi
    Version="$newversion"
    IFS=$". \n" read Major Minor Revision Build <<<$(echo $Version)
}


#  Pre-parse our command line:

#echo "Command line: $@." 1>&2
while getopts ":hibBfF" option
do
    case "$option" in
    b|B|f|F|i) ;;
    h)  usage; exit 0 ;;
    ?)  echo ">>> Error: Unknown option '-$OPTARG'." 1>&2; exit 1 ;;
    esac
done

if (( $# < $OPTIND ))
then
   echo ">>> Error: Expected a package name."  1>&2
   exit 1
fi


packagename=${@:$OPTIND:1}
url="$baseurl"/"$packagename"
versionfile="$versionfile"/"$packagename"
let OPTIND+=1

if (( $# >= $OPTIND ))
then
   echo ">>> Error: Extraneous option '${@:$OPTIND:1}'." 1>&2
   exit 1
fi


# Execute the commands:

fetchVersion

displayed=false
OPTIND=1
while getopts ":hibBfF" option; do
    displayed=true
    case "$option" in
    b)  printf "%d\n" $Build ;;
    B)  printf "%04d\n" $Build ;;
    f)  printf "%d.%d.%d.%d\n" $Major $Minor $Revision $Build ;;
    F)  printf "%d.%02d.%02d.%04d\n" $Major $Minor $Revision $Build ;;
    h)  usage; exit 0 ;;
    i)  incrementBuild; displayed=false ;;
    ?)  echo ">>> Error: Unknown option '-$OPTARG'." 1>&2; exit 1 ;;
    esac
done

if ! $displayed; then
   if (( ${#Version} == "" ))
   then
      echo ">>> Error: Version not updated." 1>&2
      exit 1
    else
      echo $Version
    fi
fi
